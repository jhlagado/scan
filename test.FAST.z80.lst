0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 POP HL
0000                 PUSH HL
0000                 LD DE,val1
0000                 OR A
0000                 SBC HL,DE
0000                 LD A,L
0000                 OR H
0000                 JR Z,expect%%M
0000                 CALL printStr
0000                 .cstr msg1,"\r\nActual: "
0000                 CALL printdec
0000                 CALL printStr
0000                 .cstr "\r\nExpected: "
0000                 LD HL,val1
0000                 CALL printdec
0000                 HALT
0000                 .cstr
0000                expect%%M:
0000                 POP HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 CALL enter
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 1C               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 1C               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 1C               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 1C               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 1C               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 1C               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 1C               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 46 1C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 48 1C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4A 1C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 36 1C               LD   (RST08),HL   
0094   22 38 1C               LD   (RST10),HL   
0097   22 3A 1C               LD   (RST18),HL   
009A   22 3C 1C               LD   (RST20),HL   
009D   22 3E 1C               LD   (RST28),HL   
00A0   22 40 1C               LD   (RST30),HL   
00A3   22 44 1C               LD   (INTVEC),HL   
00A6   22 46 1C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 48 1C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4A 1C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 44 03               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;       SCAN Programming Language for the Z80
00CC                             ; 
00CC                             ;       by John Hardy 2022
00CC                             ; 
00CC                             ;       Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00CC                             ; 
00CC                             ;       see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                LSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   1   ; not FF, for SCAN
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; for an empty macro, ctrl-<something>=macro, ie ctrl-h = backspace macros (in SCAN)
00CC                MINTDATASIZE:   EQU   26*2*2   ; A..Z, a..z words
00CC                .macro LITDAT,len
00CC                             ; 
00CC                 DB len
00CC                .endm
00CC                 
00CC                .macro REPDAT,len,data
00CC                             ; 
00CC                 DB (len | $80)
00CC                 DB data
00CC                .endm
00CC                 
00CC                .macro ENDDAT,
00CC                             ; 
00CC                 DB 0
00CC                .endm
00CC                 
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put SCAN code from here	
0180                             ; **************************************************************************
0180                             ; Macros must be written in SCAN and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; backsp_:
0180                             ;         DB "\\c@0=0=(\\c@1-\\c!`\b \b`);"	;ctr-h  , \ needed inside control code, escape it with anothe \
0180                             ;                                             	; \c tib add of tib, not visible
0180                             ;                                          	;@ fetch val
0180                             ;                                           	;1- reduce
0180                             ;                                           	;c! store
0180                             ;                                           	;`\b move cursor back, terminal command
0180                             ;                                           	;the space between the \b is to over write
0180                             ;                                             	;
0180                             ; 
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                IALTVARS:      ; value copied into tables
0180   00 1A                  DW   dStack   ; a vS0 start of datastack			
0182   00 00                  DW   FALSE   ; b vBase16
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   41 00                  DW   65   ; e vLastDef "A" last command u defined
018A   00 00                  DW   0   ; f
018C   00 07                  DW   page6   ; g 256 bytes limits
018E   28 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                IOPCODES:      
0190                          ;*Macro unroll:  LITDAT 4		; macros for compression
0190   04                     DB   4   ; macros for compression
0191   4E                     DB   lsb(exit_)   ;   NUL get least signif byte of address exit_
0192   6E                     DB   lsb(nop_)   ;   SOH
0193   6E                     DB   lsb(nop_)   ;   STX
0194   4B                     DB   lsb(etx_)   ;   ETX
0195                          ;*Macro unroll:  LITDAT 29
0195   1D                     DB   29   
0196                             ; REPDAT 29, lsb(nop_)
0196   6E                     DB   lsb(nop_)   ; 
0197   6E                     DB   lsb(nop_)   ; 
0198   6E                     DB   lsb(nop_)   ; 
0199   6E                     DB   lsb(nop_)   ; 
019A   6E                     DB   lsb(nop_)   ; 
019B   6E                     DB   lsb(nop_)   ; 
019C   6E                     DB   lsb(nop_)   ; 
019D   6E                     DB   lsb(nop_)   ; 
019E   6E                     DB   lsb(nop_)   ; 
019F   6E                     DB   lsb(nop_)   ; 
01A0   6E                     DB   lsb(nop_)   ; 
01A1   6E                     DB   lsb(nop_)   ; 
01A2   6E                     DB   lsb(nop_)   ; 
01A3   6E                     DB   lsb(nop_)   ; 
01A4   6E                     DB   lsb(nop_)   ; 
01A5   6E                     DB   lsb(nop_)   ; 
01A6   6E                     DB   lsb(nop_)   ; 
01A7   6E                     DB   lsb(nop_)   ; 
01A8   6E                     DB   lsb(nop_)   ; 
01A9   6E                     DB   lsb(nop_)   ; 
01AA   6E                     DB   lsb(nop_)   ; 
01AB   6E                     DB   lsb(nop_)   ; 
01AC   6E                     DB   lsb(nop_)   ; 
01AD   6E                     DB   lsb(nop_)   ; 
01AE   6E                     DB   lsb(nop_)   ; 
01AF   6E                     DB   lsb(nop_)   ; 
01B0   6E                     DB   lsb(nop_)   ; 
01B1   6E                     DB   lsb(nop_)   ; 
01B2   6E                     DB   lsb(nop_)   ; 
01B3                          ;*Macro unroll:  LITDAT 15
01B3   0F                     DB   15   
01B4   6E                     DB   lsb(nop_)   ;  !
01B5   6E                     DB   lsb(nop_)   ;  "
01B6   6E                     DB   lsb(nop_)   ;  #
01B7   5F                     DB   lsb(hex_)   ;  $
01B8   6E                     DB   lsb(nop_)   ;  %
01B9   00                     DB   lsb(and_)   ;  &
01BA   6E                     DB   lsb(nop_)   ;  '
01BB   6E                     DB   lsb(nop_)   ;  (
01BC   6E                     DB   lsb(nop_)   ;  )
01BD   6B                     DB   lsb(mul_)   ;  *
01BE   22                     DB   lsb(add_)   ;  +
01BF   6E                     DB   lsb(nop_)   ;  ,
01C0   A5                     DB   lsb(sub_)   ;  -
01C1   6E                     DB   lsb(nop_)   ;  .
01C2   6E                     DB   lsb(nop_)   ;  /	
01C3                             ; REPDAT 10, lsb(num_)		; 10 x repeat lsb of add to the num routine
01C3                          ;*Macro unroll:  LITDAT 10
01C3   0A                     DB   10   
01C4   E4                     DB   lsb(num_)   ;  0
01C5   E4                     DB   lsb(num_)   ;  1
01C6   E4                     DB   lsb(num_)   ;  2
01C7   E4                     DB   lsb(num_)   ;  3
01C8   E4                     DB   lsb(num_)   ;  4
01C9   E4                     DB   lsb(num_)   ;  5
01CA   E4                     DB   lsb(num_)   ;  6
01CB   E4                     DB   lsb(num_)   ;  7
01CC   E4                     DB   lsb(num_)   ;  8
01CD   E4                     DB   lsb(num_)   ;  9
01CE                          ;*Macro unroll:  LITDAT 7
01CE   07                     DB   7   
01CF   6E                     DB   lsb(nop_)   ;    :
01D0   6E                     DB   lsb(nop_)   ;    ;
01D1   BE                     DB   lsb(lt_)   ;    <
01D2   AD                     DB   lsb(eq_)   ;    =
01D3   BA                     DB   lsb(gt_)   ;    >
01D4   6E                     DB   lsb(nop_)   ;    ?   ( -- val )  read a char from input
01D5   6E                     DB   lsb(nop_)   ;    @
01D6                             ; REPDAT 26, lsb(call_)		; call a command A, B ....Z
01D6                          ;*Macro unroll:  LITDAT 26
01D6   1A                     DB   26   
01D7   28                     DB   lsb(call_)   ;  A
01D8   28                     DB   lsb(call_)   ;  B
01D9   28                     DB   lsb(call_)   ;  C
01DA   28                     DB   lsb(call_)   ;  D
01DB   28                     DB   lsb(call_)   ;  E
01DC   28                     DB   lsb(call_)   ;  F
01DD   28                     DB   lsb(call_)   ;  G
01DE   28                     DB   lsb(call_)   ;  H
01DF   28                     DB   lsb(call_)   ;  I
01E0   28                     DB   lsb(call_)   ;  J
01E1   28                     DB   lsb(call_)   ;  K
01E2   28                     DB   lsb(call_)   ;  L
01E3   28                     DB   lsb(call_)   ;  M
01E4   28                     DB   lsb(call_)   ;  N
01E5   28                     DB   lsb(call_)   ;  O
01E6   28                     DB   lsb(call_)   ;  P
01E7   28                     DB   lsb(call_)   ;  Q
01E8   28                     DB   lsb(call_)   ;  R
01E9   28                     DB   lsb(call_)   ;  S
01EA   28                     DB   lsb(call_)   ;  T
01EB   28                     DB   lsb(call_)   ;  U
01EC   28                     DB   lsb(call_)   ;  V
01ED   28                     DB   lsb(call_)   ;  W
01EE   28                     DB   lsb(call_)   ;  X
01EF   28                     DB   lsb(call_)   ;  Y
01F0   28                     DB   lsb(call_)   ;  Z
01F1                          ;*Macro unroll:  LITDAT 6
01F1   06                     DB   6   
01F2   6E                     DB   lsb(nop_)   ;    [
01F3   6E                     DB   lsb(nop_)   ;    \
01F4   6E                     DB   lsb(nop_)   ;    ]
01F5   6E                     DB   lsb(nop_)   ;    ^
01F6   6E                     DB   lsb(nop_)   ;    _
01F7   6E                     DB   lsb(nop_)   ;    `    	; for printing `hello`
01F8                             ; REPDAT 26, lsb(var_)		; a b c .....z
01F8                          ;*Macro unroll:  LITDAT 26
01F8   1A                     DB   26   
01F9   E9                     DB   lsb(a_)   ;   a
01FA   DD                     DB   lsb(var_)   ;   b
01FB   EC                     DB   lsb(c_)   ;   c
01FC   EF                     DB   lsb(d_)   ;   d
01FD   F2                     DB   lsb(e_)   ;   e
01FE   F5                     DB   lsb(f_)   ;   f
01FF   F8                     DB   lsb(g_)   ;   g
0200   DD                     DB   lsb(var_)   ;   h
0201   FB                     DB   lsb(i_)   ;   i
0202   DD                     DB   lsb(var_)   ;   j
0203   FE                     DB   lsb(k_)   ;   k
0204   01                     DB   lsb(l_)   ;   l
0205   04                     DB   lsb(m_)   ;   m
0206   04                     DB   lsb(m_)   ;   n
0207   0A                     DB   lsb(o_)   ;   o
0208   0D                     DB   lsb(p_)   ;   p
0209   DD                     DB   lsb(var_)   ;   q
020A   10                     DB   lsb(r_)   ;   r
020B   13                     DB   lsb(s_)   ;   s
020C   DD                     DB   lsb(var_)   ;   t
020D   16                     DB   lsb(u_)   ;   u
020E   DD                     DB   lsb(var_)   ;   v
020F   19                     DB   lsb(w_)   ;   w
0210   1C                     DB   lsb(x_)   ;   x
0211   DD                     DB   lsb(var_)   ;   y
0212   DD                     DB   lsb(var_)   ;   z
0213                          ;*Macro unroll:  LITDAT 5
0213   05                     DB   5   
0214   6E                     DB   lsb(nop_)   ;    {
0215   0B                     DB   lsb(or_)   ;    |
0216   6E                     DB   lsb(nop_)   ;    }
0217   6E                     DB   lsb(nop_)   ;    ~ ( a b c -- b c a ) rotate
0218   6E                     DB   lsb(nop_)   ;    DEL	; eg 10000()
0219                          ;*Macro unroll:  LITDAT 32
0219   20                     DB   32   
021A   00                     DB   lsb(EMPTY)   ; NUL ^@
021B   00                     DB   lsb(EMPTY)   ; SOH ^A  1
021C   00                     DB   lsb(EMPTY)   ; STX ^B  2
021D   00                     DB   lsb(EMPTY)   ; ETX ^C  3
021E   00                     DB   lsb(EMPTY)   ; EOT ^D  4
021F   00                     DB   lsb(EMPTY)   ; ENQ ^E  5
0220   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0221   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0222   00                     DB   lsb(EMPTY)   ; BS  ^H  8
0223   00                     DB   lsb(EMPTY)   ; TAB ^I  9
0224   00                     DB   lsb(EMPTY)   ; LF  ^J 10
0225   00                     DB   lsb(EMPTY)   ; VT  ^K 11
0226   00                     DB   lsb(EMPTY)   ; FF  ^L 12
0227   00                     DB   lsb(EMPTY)   ; CR  ^M 13
0228   00                     DB   lsb(EMPTY)   ; SO  ^N 14
0229   00                     DB   lsb(EMPTY)   ; SI  ^O 15
022A   00                     DB   lsb(EMPTY)   ; DLE ^P 16
022B   00                     DB   lsb(EMPTY)   ; ^Q
022C   00                     DB   lsb(EMPTY)   ; ^R
022D   00                     DB   lsb(EMPTY)   ; ^S
022E   00                     DB   lsb(EMPTY)   ; ^T
022F   00                     DB   lsb(EMPTY)   ; ^U
0230   00                     DB   lsb(EMPTY)   ; ^V
0231   00                     DB   lsb(EMPTY)   ; ^W
0232   00                     DB   lsb(EMPTY)   ; ^X
0233   00                     DB   lsb(EMPTY)   ; ^Y
0234   00                     DB   lsb(EMPTY)   ; ^Z
0235   00                     DB   lsb(EMPTY)   ; ^[
0236   00                     DB   lsb(EMPTY)   ; ^\
0237   00                     DB   lsb(EMPTY)   ; ^]
0238   00                     DB   lsb(EMPTY)   ; ^^
0239   00                     DB   lsb(EMPTY)   ; ^_
023A                          ;*Macro unroll:  LITDAT 5
023A   05                     DB   5   
023B   00                     DB   lsb(aNop_)   ;a0    SP  				;space
023C   00                     DB   lsb(aNop_)   ;a1    \!       			; this is a bug shud be lsb(cstore_)
023D   00                     DB   lsb(aNop_)   ;a2    \"  				
023E   00                     DB   lsb(aNop_)   ;a3    \#  utility command		; table of special routines ie #5 etc				
023F   00                     DB   lsb(aNop_)   ;a4    \$  prints a newline to output	
0240                             ; REPDAT 3, lsb(aNop_)
0240                          ;*Macro unroll:  LITDAT 3
0240   03                     DB   3   
0241   00                     DB   lsb(aNop_)   ; 
0242   00                     DB   lsb(aNop_)   ; 
0243   00                     DB   lsb(aNop_)   ; 
0244                          ;*Macro unroll:  LITDAT 8
0244   08                     DB   8   
0245   00                     DB   lsb(aNop_)   ;a8    \(  ( b -- )
0246   00                     DB   lsb(aNop_)   ;a9    \)
0247   00                     DB   lsb(aNop_)   ;aa    \*
0248   00                     DB   lsb(aNop_)   ;ab    \+
0249   00                     DB   lsb(aNop_)   ;ac    \,  ( b -- ) prints a char
024A   00                     DB   lsb(aNop_)   ;ad    \-
024B   00                     DB   lsb(aNop_)   ;ae    \.  ( b -- ) prints a string from add term by null char
024C   00                     DB   lsb(aNop_)   ;af    \/
024D                             ; REPDAT 10, lsb(aNop_)
024D                          ;*Macro unroll:  LITDAT 10
024D   0A                     DB   10   
024E   00                     DB   lsb(aNop_)   ; 
024F   00                     DB   lsb(aNop_)   ; 
0250   00                     DB   lsb(aNop_)   ; 
0251   00                     DB   lsb(aNop_)   ; 
0252   00                     DB   lsb(aNop_)   ; 
0253   00                     DB   lsb(aNop_)   ; 
0254   00                     DB   lsb(aNop_)   ; 
0255   00                     DB   lsb(aNop_)   ; 
0256   00                     DB   lsb(aNop_)   ; 
0257   00                     DB   lsb(aNop_)   ; 
0258                          ;*Macro unroll:  LITDAT 7
0258   07                     DB   7   
0259   00                     DB   lsb(aNop_)   ;ba    \:	return add of a anon def, \: 1 2 3;    \\ ret add of this
025A   00                     DB   lsb(aNop_)   ;bb    \;
025B   00                     DB   lsb(aNop_)   ;bc    \<  ( port -- val )
025C   00                     DB   lsb(aNop_)   ;bd    \=
025D   00                     DB   lsb(aNop_)   ;be    \>  ( val port -- )
025E   00                     DB   lsb(aNop_)   ;bf    \?
025F   00                     DB   lsb(aNop_)   ;c0    \@      byte fetch
0260                             ; REPDAT 26, lsb(aNop_)
0260                          ;*Macro unroll:  LITDAT 26
0260   1A                     DB   26   
0261   00                     DB   lsb(aNop_)   ; 
0262   00                     DB   lsb(aNop_)   ; 
0263   00                     DB   lsb(aNop_)   ; 
0264   00                     DB   lsb(aNop_)   ; 
0265   00                     DB   lsb(aNop_)   ; 
0266   00                     DB   lsb(aNop_)   ; 
0267   00                     DB   lsb(aNop_)   ; 
0268   00                     DB   lsb(aNop_)   ; 
0269   00                     DB   lsb(aNop_)   ; 
026A   00                     DB   lsb(aNop_)   ; 
026B   00                     DB   lsb(aNop_)   ; 
026C   00                     DB   lsb(aNop_)   ; 
026D   00                     DB   lsb(aNop_)   ; 
026E   00                     DB   lsb(aNop_)   ; 
026F   00                     DB   lsb(aNop_)   ; 
0270   00                     DB   lsb(aNop_)   ; 
0271   00                     DB   lsb(aNop_)   ; 
0272   00                     DB   lsb(aNop_)   ; 
0273   00                     DB   lsb(aNop_)   ; 
0274   00                     DB   lsb(aNop_)   ; 
0275   00                     DB   lsb(aNop_)   ; 
0276   00                     DB   lsb(aNop_)   ; 
0277   00                     DB   lsb(aNop_)   ; 
0278   00                     DB   lsb(aNop_)   ; 
0279   00                     DB   lsb(aNop_)   ; 
027A   00                     DB   lsb(aNop_)   ; 
027B                          ;*Macro unroll:  LITDAT 6
027B   06                     DB   6   
027C   00                     DB   lsb(aNop_)   ;     \[
027D   00                     DB   lsb(aNop_)   ;     \\  comment text, skips reading until end of line
027E   00                     DB   lsb(aNop_)   ;     \]
027F   00                     DB   lsb(aNop_)   ;     \^  ( -- ? ) execute SCAN definition a is address of SCAN code
0280   00                     DB   lsb(aNop_)   ;       \_  ( b -- ) conditional early return - stop everything
0281   00                     DB   lsb(aNop_)   ;     \`  ( -- adr ) defines a string \` string ` then use \. to prt
0282                             ; REPDAT 8, lsb(altVar_)  ;e1	\a...\h
0282                          ;*Macro unroll:  LITDAT 8
0282   08                     DB   8   
0283   00                     DB   lsb(aNop_)   
0284   00                     DB   lsb(aNop_)   
0285   00                     DB   lsb(aNop_)   
0286   00                     DB   lsb(aNop_)   
0287   00                     DB   lsb(aNop_)   
0288   00                     DB   lsb(aNop_)   
0289   00                     DB   lsb(aNop_)   
028A   00                     DB   lsb(aNop_)   
028B                          ;*Macro unroll:  LITDAT 2
028B   02                     DB   2   
028C   00                     DB   lsb(aNop_)   ; returns index variable of current loop
028D   00                     DB   lsb(aNop_)   ; returns index variable of outer loop     \i+6
028E                             ; REPDAT 16, lsb(altVar_)		; \k...\z
028E                          ;*Macro unroll:  LITDAT 16
028E   10                     DB   16   
028F   00                     DB   lsb(aNop_)   
0290   00                     DB   lsb(aNop_)   
0291   00                     DB   lsb(aNop_)   
0292   00                     DB   lsb(aNop_)   
0293   00                     DB   lsb(aNop_)   
0294   00                     DB   lsb(aNop_)   
0295   00                     DB   lsb(aNop_)   
0296   00                     DB   lsb(aNop_)   
0297   00                     DB   lsb(aNop_)   
0298   00                     DB   lsb(aNop_)   
0299   00                     DB   lsb(aNop_)   
029A   00                     DB   lsb(aNop_)   
029B   00                     DB   lsb(aNop_)   
029C   00                     DB   lsb(aNop_)   
029D   00                     DB   lsb(aNop_)   
029E   00                     DB   lsb(aNop_)   
029F                          ;*Macro unroll:  LITDAT 5
029F   05                     DB   5   
02A0   00                     DB   lsb(aNop_)   ;       { ( -- n ) pop from SCAN return stack
02A1   00                     DB   lsb(aNop_)   ; 
02A2   00                     DB   lsb(aNop_)   ;       } ( n -- ) push to return stack
02A3   00                     DB   lsb(aNop_)   ;       ~ ( b -- ) conditional break from loop
02A4   00                     DB   lsb(aNop_)   ;       DEL
02A5                          ;*Macro unroll:  ENDDAT
02A5   00                     DB   0   
02A6                ETX:         ;=12
02A6   21 00 E6               LD   HL,-DSTACK   
02A9   39                     ADD   HL,SP   
02AA   30 03                  JR   NC,etx1   
02AC   31 00 1A               LD   SP,DSTACK   
02AF                ETX1:        
02AF   18 15                  JR   interpret   
02B1                START:       
02B1   31 00 1A               LD   SP,DSTACK   ; start of SCAN
02B4   CD 44 03               CALL   init   ; setups
02B7   CD 97 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
02BA   53 43 41 4E 20 56 30 2E 30 0D 0A 00 .CSTR   "SCAN V0.0\r\n"   
02C6                INTERPRET:      
02C6   CD DC 08               CALL   prompt   
02C9   01 00 00               LD   BC,0   ; load BC with offset into TIB, decide char into tib or execute or control
02CC   ED 43 84 1C            LD   (vTIBPtr),BC   
02D0                INTERPRET2:      ; calc nesting (a macro might have changed it)
02D0   1E 00                  LD   E,0   ; initilize nesting value
02D2   C5                     PUSH   BC   ; save offset into TIB,
02D3                             ; BC is also the count of chars in TIB
02D3   21 00 18               LD   HL,TIB   ; HL is start of TIB
02D6   18 06                  JR   interpret4   
02D8                INTERPRET3:      
02D8   7E                     LD   A,(HL)   ; A = char in TIB
02D9   23                     INC   HL   ; inc pointer into TIB
02DA   0B                     DEC   BC   ; dec count of chars in TIB
02DB   CD FF 03               CALL   nesting   ; update nesting value
02DE                INTERPRET4:      
02DE   79                     LD   A,C   ; is count zero?
02DF   B0                     OR   B   
02E0   20 F6                  JR   NZ,interpret3   ; if not loop
02E2   C1                     POP   BC   ; restore offset into TIB
02E3                             ; *******************************************************************
02E3                             ; Wait for a character from the serial input (keyboard)
02E3                             ; and store it in the text buffer. Keep accepting characters,
02E3                             ; increasing the instruction pointer BC - until a newline received.
02E3                             ; *******************************************************************
02E3                WAITCHAR:      
02E3   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
02E6   FE 20                  CP   $20   ; compare to space
02E8   30 25                  JR   NC,waitchar1   ; if >= space, if below 20 set cary flag
02EA   FE 00                  CP   $0   ; is it end of string? null end of string
02EC   28 45                  JR   Z,waitchar4   
02EE   FE 0D                  CP   "\r"   ; carriage return? ascii 13
02F0   28 2B                  JR   Z,waitchar3   ; if anything else its macro/control
02F2                             ; LD D,0
02F2                MACRO:       ;=25
02F2   ED 43 84 1C            LD   (vTIBPtr),BC   
02F6   21 80 1B               LD   HL,ctrlCodes   
02F9   85                     ADD   A,L   ;look up key of macros
02FA   6F                     LD   L,A   
02FB   5E                     LD   E,(HL)   
02FC   7B                     LD   A,E   
02FD   B7                     OR   A   
02FE   28 09                  JR   Z,macro1   
0300   16 01                  LD   D,msb(macros)   
0302   D5                     PUSH   DE   
0303   CD 8E 03               CALL   ENTER   ;SCAN go operation and jump to it
0306   5C 5E 00               .CSTR   "\\^"   
0309                MACRO1:      
0309   ED 4B 84 1C            LD   BC,(vTIBPtr)   
030D   18 C1                  JR   interpret2   
030F                WAITCHAR1:      
030F   21 00 18               LD   HL,TIB   
0312   09                     ADD   HL,BC   
0313   77                     LD   (HL),A   ; store the character in textbuf
0314   03                     INC   BC   
0315   CD 85 00               CALL   putchar   ; echo character to screen
0318   CD FF 03               CALL   nesting   
031B   18 C6                  JR   waitchar   ; wait for next character
031D                WAITCHAR3:      
031D   21 00 18               LD   HL,TIB   
0320   09                     ADD   HL,BC   
0321   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0323   23                     INC   HL   
0324   36 0A                  LD   (HL),"\n"   
0326   23                     INC   HL   ; ????
0327   03                     INC   BC   
0328   03                     INC   BC   
0329   CD 04 09               CALL   crlf   ; echo character to screen
032C   7B                     LD   A,E   ; if zero nesting append and ETX after \r
032D   B7                     OR   A   
032E   20 B3                  JR   NZ,waitchar   
0330   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
0332   03                     INC   BC   
0333                WAITCHAR4:      
0333   ED 43 84 1C            LD   (vTIBPtr),BC   
0337   01 00 18               LD   BC,TIB   ; Instructions stored on heap at address HERE, we pressed enter
033A   0B                     DEC   BC   
033B                             ; ********************************************************************************
033B                             ; 
033B                             ; Dispatch Routine.
033B                             ; 
033B                             ; Get the next character and form a 1 byte jump address
033B                             ; 
033B                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
033B                             ; jump to the selected function.
033B                             ; 
033B                             ; Individual handler routines will deal with each category:
033B                             ; 
033B                             ; 1. Detect characters A-Z and jump to the User Command handler routine
033B                             ; 
033B                             ; 2. Detect characters a-z and jump to the variable handler routine
033B                             ; 
033B                             ; 3. All other characters are punctuation and cause a jump to the associated
033B                             ; primitive code.
033B                             ; 
033B                             ; Instruction Pointer IP BC is incremented
033B                             ; 
033B                             ; *********************************************************************************
033B                NEXT:        ;=9
033B   03                     INC   BC   ;       Increment the IP
033C   0A                     LD   A,(BC)   ;       Get the next character and dispatch
033D   6F                     LD   L,A   ;       Index into table
033E   26 1B                  LD   H,msb(opcodes)   ;       Start address of jump table
0340   6E                     LD   L,(HL)   ;       get low jump address
0341   26 05                  LD   H,msb(page4)   ;       Load H with the 1st page address
0343   E9                     JP   (HL)   ;       Jump to routine
0344                INIT:        ;=68
0344   21 80 1A               LD   HL,LSTACK   
0347   22 30 1C               LD   (vLoopSP),HL   ; Loop stack pointer stored in memory
034A   DD 21 80 19            LD   IX,RSTACK   
034E   FD 21 3B 03            LD   IY,NEXT   ; IY provides a faster jump to NEXT
0352   21 80 01               LD   HL,ialtVars   
0355   11 80 1C               LD   DE,altVars   
0358   01 10 00               LD   BC,8 * 2   
035B   ED B0                  LDIR      
035D   21 C0 1C               LD   HL,mintData   ; init namespaces to 0 using LDIR
0360   54 5D                  LD   DE,HL   
0362   13                     INC   DE   
0363   36 00                  LD   (HL),0   
0365   01 68 00               LD   BC,mintDataSize   
0368   ED B0                  LDIR      
036A                INITOPS:      
036A   21 90 01               LD   HL,iOpcodes   
036D   11 00 1B               LD   DE,opcodes   
0370   01 00 01               LD   BC,256   
0373                INITOPS1:      
0373   7E                     LD   A,(HL)   
0374   23                     INC   HL   
0375   CB 27                  SLA   A   
0377   C8                     RET   Z   
0378   38 09                  JR   C,initOps2   
037A   CB 3F                  SRL   A   
037C   4F                     LD   C,A   
037D   06 00                  LD   B,0   
037F   ED B0                  LDIR      
0381   18 F0                  JR   initOps1   
0383                INITOPS2:      
0383   CB 3F                  SRL   A   
0385   47                     LD   B,A   
0386   7E                     LD   A,(HL)   
0387   23                     INC   HL   
0388                INITOPS2A:      
0388   12                     LD   (DE),A   
0389   13                     INC   DE   
038A   10 FC                  DJNZ   initOps2a   
038C   18 E5                  JR   initOps1   
038E                ENTER:       ;=9
038E   60 69                  LD   HL,BC   
0390   CD EE 08               CALL   rpush   ; save Instruction Pointer
0393   C1                     POP   BC   
0394   0B                     DEC   BC   
0395   FD E9                  JP   (IY)   
0397                PRINTSTR:      ;=14
0397   E3                     EX   (SP),HL   ; swap			
0398   CD E9 08               CALL   putStr   
039B   23                     INC   HL   ; inc past null
039C   E3                     EX   (SP),HL   ; put it back	
039D   C9                     RET      
039E                LOOKUPREF:      
039E   16 00                  LD   D,0   
03A0                LOOKUPREF0:      
03A0   FE 61                  CP   "a"   
03A2   30 06                  JR   NC,lookupRef2   
03A4                LOOKUPREF1:      
03A4   D6 41                  SUB   "A"   
03A6   1E 00                  LD   E,0   
03A8   18 04                  JR   lookupRef3   
03AA                LOOKUPREF2:      
03AA   D6 61                  SUB   "a"   
03AC   1E 34                  LD   E,26*2   
03AE                LOOKUPREF3:      
03AE   87                     ADD   A,A   
03AF   83                     ADD   A,E   
03B0   21 C0 1C               LD   HL,mintData   
03B3   85                     ADD   A,L   
03B4   6F                     LD   L,A   
03B5   3E 00                  LD   A,0   
03B7   8C                     ADC   A,H   
03B8   67                     LD   H,A   
03B9   AF                     XOR   A   
03BA   B3                     OR   E   ; sets Z flag if A-Z
03BB   C9                     RET      
03BC                PRINTDEC:      ;=36
03BC   11 F0 D8               LD   DE,-10000   ; SCAN ., 5th location of a dev number
03BF   CD D5 03               CALL   printdec1   ; text book method look it up
03C2   11 18 FC               LD   DE,-1000   
03C5   CD D5 03               CALL   printdec1   
03C8   11 9C FF               LD   DE,-100   
03CB   CD D5 03               CALL   printdec1   
03CE   1E F6                  LD   E,-10   
03D0   CD D5 03               CALL   printdec1   
03D3   1E FF                  LD   E,-1   
03D5                PRINTDEC1:      
03D5   3E 2F                  LD   A,"0"-1   
03D7                PRINTDEC2:      
03D7   3C                     INC   A   
03D8   19                     ADD   HL,DE   
03D9   38 FC                  JR   C,printdec2   
03DB   ED 52                  SBC   HL,DE   
03DD   C3 85 00               JP   putchar   
03E0                PRINTHEX:      ;=31
03E0                             ; Display HL as a 16-bit number in hex.
03E0   C5                     PUSH   BC   ; preserve the IP
03E1   7C                     LD   A,H   
03E2   CD EB 03               CALL   printhex2   
03E5   7D                     LD   A,L   
03E6   CD EB 03               CALL   printhex2   
03E9   C1                     POP   BC   
03EA   C9                     RET      
03EB                PRINTHEX2:      
03EB   4F                     LD   C,A   
03EC   1F                     RRA      
03ED   1F                     RRA      
03EE   1F                     RRA      
03EF   1F                     RRA      
03F0   CD F4 03               CALL   printhex3   
03F3   79                     LD   A,C   
03F4                PRINTHEX3:      
03F4   E6 0F                  AND   0x0F   
03F6   C6 90                  ADD   A,0x90   
03F8   27                     DAA      
03F9   CE 40                  ADC   A,0x40   
03FB   27                     DAA      
03FC   C3 85 00               JP   putchar   
03FF                             ; **************************************************************************
03FF                             ; calculate nesting value
03FF                             ; A is char to be tested,
03FF                             ; E is the nesting value (initially 0)
03FF                             ; E is increased by ( and [
03FF                             ; E is decreased by ) and ]
03FF                             ; E has its bit 7 toggled by `
03FF                             ; limited to 127 levels
03FF                             ; **************************************************************************
03FF                NESTING:      ;=44
03FF   FE 60                  CP   "`"   
0401   20 0A                  JR   NZ,nesting1   
0403   CB 7B                  BIT   7,E   
0405   28 03                  JR   Z,nesting1a   
0407   CB BB                  RES   7,E   
0409   C9                     RET      
040A                NESTING1A:      
040A   CB FB                  SET   7,E   
040C   C9                     RET      
040D                NESTING1:      
040D   CB 7B                  BIT   7,E   
040F   C0                     RET   NZ   
0410   FE 3A                  CP   ":"   
0412   28 08                  JR   Z,nesting2   
0414   FE 5B                  CP   "["   
0416   28 04                  JR   Z,nesting2   
0418   FE 28                  CP   "("   
041A   20 02                  JR   NZ,nesting3   
041C                NESTING2:      
041C   1C                     INC   E   
041D   C9                     RET      
041E                NESTING3:      
041E   FE 3B                  CP   ";"   
0420   28 07                  JR   Z,nesting4   
0422   FE 5D                  CP   "]"   
0424   28 03                  JR   Z,nesting4   
0426   FE 29                  CP   ")"   
0428   C0                     RET   NZ   
0429                NESTING4:      
0429   1D                     DEC   E   
042A   C9                     RET      
042B                             ; **********************************************************************			
042B                             ; Page 4 primitive routines
042B                             ; **********************************************************************
042B                          ALIGN   $100   
0500                PAGE4:       
0500                AND_:        
0500   D1                     POP   DE   ;     Bitwise AND the top 2 elements of the stack
0501   E1                     POP   HL   ; 
0502   7B                     LD   A,E   ; 
0503   A5                     AND   L   ; 
0504   6F                     LD   L,A   ; 
0505   7A                     LD   A,D   ; 
0506   A4                     AND   H   ; 
0507                AND1:        
0507   67                     LD   H,A   ; 
0508   E5                     PUSH   HL   ; 
0509   FD E9                  JP   (IY)   ; 
050B                             ; 
050B                OR_:         
050B   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
050C   E1                     POP   HL   
050D   7B                     LD   A,E   
050E   B5                     OR   L   
050F   6F                     LD   L,A   
0510   7A                     LD   A,D   
0511   B4                     OR   H   
0512   18 F3                  JR   and1   
0514                XOR_:        
0514   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0515                XOR1:        
0515   E1                     POP   HL   
0516   7B                     LD   A,E   
0517   AD                     XOR   L   
0518   6F                     LD   L,A   
0519   7A                     LD   A,D   
051A   AC                     XOR   H   
051B   18 EA                  JR   and1   
051D                INV_:        ; Bitwise INVert the top member of the stack
051D   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0520   18 F3                  JR   xor1   
0522                ADD_:        ; Add the top 2 members of the stack
0522   D1                     POP   DE   
0523   E1                     POP   HL   
0524   19                     ADD   HL,DE   
0525   E5                     PUSH   HL   
0526   FD E9                  JP   (IY)   
0528                CALL_:       
0528   0A                     LD   A,(BC)   
0529   CD A4 03               CALL   lookupRef1   
052C   5E                     LD   E,(HL)   
052D   23                     INC   HL   
052E   56                     LD   D,(HL)   
052F   C3 2C 07               JP   go1   
0532                DOT_:        
0532   E1                     POP   HL   
0533   CD BC 03               CALL   printdec   
0536                DOT2:        
0536   3E 20                  LD   A," "   
0538   CD 85 00               CALL   putChar   
053B   FD E9                  JP   (IY)   
053D                HDOT_:       ; print hexadecimal
053D   E1                     POP   HL   
053E   CD E0 03               CALL   printhex   
0541   18 F3                  JR   dot2   
0543                DROP_:       ; Discard the top member of the stack
0543   E1                     POP   HL   
0544   FD E9                  JP   (IY)   
0546                DUP_:        
0546   E1                     POP   HL   ; Duplicate the top member of the stack
0547   E5                     PUSH   HL   
0548   E5                     PUSH   HL   
0549   FD E9                  JP   (IY)   
054B                ETX_:        
054B   C3 A6 02               JP   ETX   
054E                EXIT_:       
054E   03                     INC   BC   ; store offests into a table of bytes, smaller
054F   50 59                  LD   DE,BC   
0551   CD F9 08               CALL   rpop   ; Restore Instruction pointer
0554   44 4D                  LD   BC,HL   
0556   EB                     EX   DE,HL   
0557   E9                     JP   (HL)   
0558                FETCH_:      ; Fetch the value from the address placed on the top of the stack
0558   E1                     POP   HL   
0559                FETCH1:      
0559   5E                     LD   E,(HL)   
055A   23                     INC   HL   
055B   56                     LD   D,(HL)   
055C   D5                     PUSH   DE   
055D   FD E9                  JP   (IY)   
055F   C3 BF 08     HEX_:     JP   hex   
0562                KEY_:        
0562   CD 81 00               CALL   getchar   
0565   26 00                  LD   H,0   
0567   6F                     LD   L,A   
0568   E5                     PUSH   HL   
0569   FD E9                  JP   (IY)   
056B   C3 81 08     MUL_:     JP   mul   
056E                NOP_:        
056E   C3 3B 03               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0571                OVER_:       
0571   E1                     POP   HL   ; Duplicate 2nd element of the stack
0572   D1                     POP   DE   
0573   D5                     PUSH   DE   
0574   E5                     PUSH   HL   
0575   D5                     PUSH   DE   ; And push it to top of stack
0576   FD E9                  JP   (IY)   
0578                RET_:        
0578   CD F9 08               CALL   rpop   ; Restore Instruction pointer
057B   44 4D                  LD   BC,HL   
057D   FD E9                  JP   (IY)   
057F                ROT_:        ; a b c -- b c a
057F   D1                     POP   DE   ; a b                   de = c
0580   E1                     POP   HL   ; a                     hl = b
0581   E3                     EX   (SP),HL   ; b                     hl = a
0582   D5                     PUSH   DE   ; b c
0583   E5                     PUSH   HL   ; b c a
0584   FD E9                  JP   (IY)   
0586                             ;  Left shift { is multiply by 2		
0586                SHL_:        
0586   E1                     POP   HL   ; Duplicate the top member of the stack
0587   29                     ADD   HL,HL   
0588   E5                     PUSH   HL   ; shift left fallthrough into add_
0589   FD E9                  JP   (IY)   ; 
058B                             ;  Right shift } is a divide by 2		
058B                SHR_:        
058B   E1                     POP   HL   ; Get the top member of the stack
058C                SHR1:        
058C   CB 3C                  SRL   H   
058E   CB 1D                  RR   L   
0590   E5                     PUSH   HL   
0591   FD E9                  JP   (IY)   ; 
0593                STORE_:      ; Store the value at the address placed on the top of the stack
0593   E1                     POP   HL   
0594   D1                     POP   DE   
0595   73                     LD   (HL),E   
0596   23                     INC   HL   
0597   72                     LD   (HL),D   
0598   FD E9                  JP   (IY)   
059A                SWAP_:       ; a b -- b a Swap the top 2 elements of the stack
059A   E1                     POP   HL   
059B   E3                     EX   (SP),HL   
059C   E5                     PUSH   HL   
059D   FD E9                  JP   (IY)   
059F                NEG_:        
059F   21 00 00               LD   HL,0   ; NEGate the value on top of stack (2's complement)
05A2   D1                     POP   DE   ; 
05A3   18 02                  JR   sub2   ; use the SUBtract routine
05A5                SUB_:        ; Subtract the value 2nd on stack from top of stack
05A5   D1                     POP   DE   ; 
05A6   E1                     POP   HL   ;      Entry point for INVert
05A7                SUB2:        
05A7   A7                     AND   A   ;      Entry point for NEGate
05A8   ED 52                  SBC   HL,DE   ; 15t
05AA   E5                     PUSH   HL   ; 
05AB   FD E9                  JP   (IY)   ; 
05AD                             ; 5
05AD                EQ_:         
05AD   E1                     POP   HL   
05AE   D1                     POP   DE   
05AF   B7                     OR   A   ; reset the carry flag
05B0   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
05B2   28 14                  JR   Z,true_   
05B4                FALSE_:      
05B4   21 00 00               LD   HL,0   
05B7   E5                     PUSH   HL   
05B8   FD E9                  JP   (IY)   
05BA                GT_:         
05BA   D1                     POP   DE   
05BB   E1                     POP   HL   
05BC   18 02                  JR   lt1   
05BE                LT_:         
05BE   E1                     POP   HL   
05BF   D1                     POP   DE   
05C0                LT1:         
05C0   B7                     OR   A   ; reset the carry flag
05C1   ED 52                  SBC   HL,DE   
05C3   28 EF                  JR   Z,false_   
05C5   FA B4 05               JP   M,false_   
05C8                TRUE_:       
05C8   21 01 00               LD   HL,1   
05CB   E5                     PUSH   HL   
05CC   FD E9                  JP   (IY)   
05CE                GTE_:        
05CE   D1                     POP   DE   
05CF   E1                     POP   HL   
05D0   18 02                  JR   lte1   
05D2                LTE_:        
05D2   E1                     POP   HL   
05D3   D1                     POP   DE   
05D4                LTE1:        
05D4   B7                     OR   A   ; reset the carry flag
05D5   ED 52                  SBC   HL,DE   
05D7   FA B4 05               JP   M,false_   
05DA   C3 01 00               JP   true   
05DD                VAR_:        
05DD   0A                     LD   A,(BC)   
05DE   CD AA 03               CALL   lookupRef2   
05E1   E5                     PUSH   HL   
05E2   FD E9                  JP   (IY)   
05E4   C3 9D 08     NUM_:     JP   num   
05E7                LAMBDA_:      
05E7   18 3B                  JR   lambda   
05E9                A_:          
05E9   C3 6B 07               JP   a   
05EC                C_:          
05EC   C3 7B 07               JP   c   
05EF                D_:          
05EF   C3 8B 07               JP   d   
05F2                E_:          
05F2   C3 A5 07               JP   e   
05F5                F_:          
05F5   C3 B0 07               JP   f   
05F8                G_:          
05F8   C3 BB 07               JP   g   
05FB                I_:          
05FB   C3 D0 07               JP   i   
05FE                K_:          
05FE   C3 E0 07               JP   k   
0601                L_:          
0601   C3 EE 07               JP   l   
0604                M_:          
0604   C3 FE 07               JP   m   
0607                N_:          
0607   C3 0E 08               JP   n   
060A                O_:          
060A   C3 19 08               JP   o   
060D                P_:          
060D   C3 29 08               JP   p   
0610                R_:          
0610   C3 34 08               JP   r   
0613                S_:          
0613   C3 3F 08               JP   s   
0616                U_:          
0616   C3 5E 08               JP   u   
0619                W_:          
0619   C3 69 08               JP   w   
061C                X_:          
061C   C3 74 08               JP   x   
061F   18 18        DIV_:     JR   div   
0621                             ;*******************************************************************
0621                             ; Page 5 primitive routines
0621                             ;*******************************************************************
0621                             ;falls through
0621   E5                     PUSH   HL   
0622   FD E9                  JP   (IY)   
0624                LAMBDA:      ;=
0624   03                     INC   BC   
0625   ED 5B 8E 1C            LD   DE,(vHeapPtr)   ; start of defintion
0629   D5                     PUSH   DE   
062A                LAMBDA1:      ; Skip to end of definition
062A   0A                     LD   A,(BC)   ; Get the next character
062B   03                     INC   BC   ; Point to next character
062C   12                     LD   (DE),A   
062D   13                     INC   DE   
062E   FE 29                  CP   ")"   ; Is it a semicolon
0630   20 F8                  JR   NZ,lambda1   ; get the next element
0632                LAMBDA2:      
0632   0B                     DEC   BC   
0633   ED 53 8E 1C            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
0637   FD E9                  JP   (IY)   
0639                             ; ********************************************************************
0639                             ; 16-bit division subroutine.
0639                             ; 
0639                             ; BC: divisor, DE: dividend, HL: remainder
0639                             ; *********************************************************************
0639                             ; This divides DE by BC, storing the result in DE, remainder in HL
0639                             ; *********************************************************************
0639                             ; 1382 cycles
0639                             ; 35 bytes (reduced from 48)
0639                             ; 
0639                DIV:         ;=34
0639   D1                     POP   DE   ; get first value
063A   E1                     POP   HL   ; get 2nd value
063B   C5                     PUSH   BC   ; Preserve the IP
063C   44                     LD   B,H   ; BC = 2nd value
063D   4D                     LD   C,L   
063E                             ; 
063E   21 00 00               LD   HL,0   ; Zero the remainder
0641   3E 10                  LD   A,16   ; Loop counter
0643                DIV1:        ;shift the bits from BC (numerator) into HL (accumulator)
0643   CB 21                  SLA   C   
0645   CB 10                  RL   B   
0647   ED 6A                  ADC   HL,HL   
0649   ED 52                  SBC   HL,DE   ;Check if remainder >= denominator (HL>=DE)
064B   38 03                  JR   C,div2   
064D   0C                     INC   C   
064E   18 01                  JR   div3   
0650                DIV2:        ; remainder is not >= denominator, so we have to add DE back to HL
0650   19                     ADD   hl,de   
0651                DIV3:        
0651   3D                     DEC   A   
0652   20 EF                  JR   NZ,div1   
0654   50                     LD   D,B   ; Result from BC to DE
0655   59                     LD   E,C   
0656                DIV4:        
0656   C1                     POP   BC   ; Restore the IP
0657   D5                     PUSH   DE   ; Push Result
0658   E5                     PUSH   HL   ; Push remainder
0659   FD E9                  JP   (IY)   
065B                             ;=57
065B                             ; **************************************************************************
065B                             ; Page 6 Alt primitives
065B                             ; **************************************************************************
065B                          ALIGN   $100   
0700                PAGE6:       
0700                ANOP_:       
0700   FD E9                  JP   (IY)   
0702                CFETCH_:      
0702   E1                     POP   HL   
0703   16 00                  LD   D,0   
0705   5E                     LD   E,(HL)   
0706   D5                     PUSH   DE   
0707   FD E9                  JP   (IY)   
0709                COMMENT_:      
0709   03                     INC   BC   ; point to next char
070A   0A                     LD   A,(BC)   
070B   FE 0D                  CP   "\r"   ; terminate at cr
070D   20 FA                  JR   NZ,comment_   
070F   0B                     DEC   BC   
0710   FD E9                  JP   (IY)   
0712                CSTORE_:      
0712   E1                     POP   HL   
0713   D1                     POP   DE   
0714   73                     LD   (HL),E   
0715   FD E9                  JP   (IY)   
0717                EMIT_:       
0717   E1                     POP   HL   
0718   7D                     LD   A,L   
0719   CD 85 00               CALL   putchar   
071C   FD E9                  JP   (IY)   
071E                EXEC_:       
071E   CD 23 07               CALL   exec1   
0721   FD E9                  JP   (IY)   
0723                EXEC1:       
0723   E1                     POP   HL   
0724   E3                     EX   (SP),HL   
0725   E9                     JP   (HL)   
0726                PROMPT_:      
0726   CD DC 08               CALL   prompt   
0729   FD E9                  JP   (IY)   
072B                GO_:         ;\^
072B   D1                     POP   DE   
072C                GO1:         
072C   7A                     LD   A,D   ; skip if destination address is null
072D   B3                     OR   E   
072E   28 0E                  JR   Z,go3   
0730   60 69                  LD   HL,BC   
0732   03                     INC   BC   ; read next char from source
0733   0A                     LD   A,(BC)   ; if ; to tail call optimise
0734   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
0736   28 03                  JR   Z,go2   
0738   CD EE 08               CALL   rpush   ; save Instruction Pointer
073B                GO2:         
073B   42 4B                  LD   BC,DE   
073D   0B                     DEC   BC   
073E                GO3:         
073E   FD E9                  JP   (IY)   
0740                INPORT_:      ; \<
0740   E1                     POP   HL   
0741   79                     LD   A,C   
0742   4D                     LD   C,L   
0743   ED 68                  IN   L,(C)   
0745   26 00                  LD   H,0   
0747   4F                     LD   C,A   
0748   E5                     PUSH   HL   
0749   FD E9                  JP   (IY)   
074B                NEWLN_:      
074B   CD 04 09               CALL   crlf   
074E   FD E9                  JP   (IY)   
0750                OUTPORT_:      
0750   E1                     POP   HL   
0751   59                     LD   E,C   
0752   4D                     LD   C,L   
0753   E1                     POP   HL   
0754   ED 69                  OUT   (C),L   
0756   4B                     LD   C,E   
0757   FD E9                  JP   (IY)   
0759                PRNSTR_:      
0759                PRNSTR:      
0759   E1                     POP   HL   
075A   CD E9 08               CALL   putStr   
075D   FD E9                  JP   (IY)   
075F                RPUSH_:      
075F   E1                     POP   HL   
0760   CD EE 08               CALL   rpush   
0763   FD E9                  JP   (IY)   
0765                RPOP_:       
0765   CD F9 08               CALL   rpop   
0768   E5                     PUSH   HL   
0769   FD E9                  JP   (IY)   
076B                             ; **************************************************************************
076B                             ; Page 6 primitive routines continued  (page 7)
076B                             ; **************************************************************************
076B                             ; falls through to following page
076B                A:           
076B   03                     INC   BC   
076C   0A                     LD   A,(BC)   
076D   FE 64                  CP   "d"   
076F   CA 22 05               JP   Z,add_   
0772   FE 6E                  CP   "n"   
0774   CA 00 05               JP   Z,and_   
0777   0B                     DEC   BC   
0778   C3 DD 05               JP   var_   
077B                C:           
077B   03                     INC   BC   
077C   0A                     LD   A,(BC)   
077D   FE 61                  CP   "a"   
077F   CA 7F 08               JP   Z,case_   
0782   FE 6C                  CP   "l"   
0784   CA 7F 08               JP   Z,closure_   
0787   0B                     DEC   BC   
0788   C3 DD 05               JP   var_   
078B                D:           
078B   03                     INC   BC   
078C   0A                     LD   A,(BC)   
078D   FE 65                  CP   "e"   
078F   CA 7F 08               JP   Z,def_   
0792   FE 69                  CP   "i"   
0794   CA 1F 06               JP   Z,div_   
0797   FE 72                  CP   "r"   
0799   CA 43 05               JP   Z,drop_   
079C   FE 75                  CP   "u"   
079E   CA 46 05               JP   Z,dup_   
07A1   0B                     DEC   BC   
07A2   C3 DD 05               JP   var_   
07A5                E:           
07A5   03                     INC   BC   
07A6   0A                     LD   A,(BC)   
07A7   FE 71                  CP   "q"   
07A9   CA AD 05               JP   Z,eq_   
07AC   0B                     DEC   BC   
07AD   C3 DD 05               JP   var_   
07B0                F:           
07B0   03                     INC   BC   
07B1   0A                     LD   A,(BC)   
07B2   FE 69                  CP   "i"   
07B4   CA 7F 08               JP   Z,filter_   
07B7   0B                     DEC   BC   
07B8   C3 DD 05               JP   var_   
07BB                G:           
07BB   03                     INC   BC   
07BC   0A                     LD   A,(BC)   
07BD   FE 65                  CP   "e"   
07BF   CA 7F 08               JP   Z,get_   
07C2   FE 6F                  CP   "o"   
07C4   CA 2B 07               JP   Z,go_   
07C7   FE 74                  CP   "t"   
07C9   CA BA 05               JP   Z,gt_   
07CC   0B                     DEC   BC   
07CD   C3 DD 05               JP   var_   
07D0                I:           
07D0   03                     INC   BC   
07D1   0A                     LD   A,(BC)   
07D2   FE 66                  CP   "f"   
07D4   CA 7F 08               JP   Z,if_   
07D7   FE 6E                  CP   "n"   
07D9   CA 1D 05               JP   Z,inv_   
07DC   0B                     DEC   BC   
07DD   C3 DD 05               JP   var_   
07E0                K:           
07E0   C3 74 08               JP   x   
07E3   03                     INC   BC   
07E4   0A                     LD   A,(BC)   
07E5   FE 65                  CP   "e"   
07E7   CA 62 05               JP   Z,key_   
07EA   0B                     DEC   BC   
07EB   C3 DD 05               JP   var_   
07EE                L:           
07EE   03                     INC   BC   
07EF   0A                     LD   A,(BC)   
07F0   FE 65                  CP   "e"   
07F2   CA 7F 08               JP   Z,let_   
07F5   FE 74                  CP   "t"   
07F7   CA BE 05               JP   Z,lt_   
07FA   0B                     DEC   BC   
07FB   C3 DD 05               JP   var_   
07FE                M:           
07FE   03                     INC   BC   
07FF   0A                     LD   A,(BC)   
0800   FE 61                  CP   "a"   
0802   CA 7F 08               JP   Z,map_   
0805   FE 75                  CP   "u"   
0807   CA 6B 05               JP   Z,mul_   
080A   0B                     DEC   BC   
080B   C3 DD 05               JP   var_   
080E                N:           
080E   03                     INC   BC   
080F   0A                     LD   A,(BC)   
0810   FE 65                  CP   "e"   
0812   CA 9F 05               JP   Z,neg_   
0815   0B                     DEC   BC   
0816   C3 DD 05               JP   var_   
0819                O:           
0819   03                     INC   BC   
081A   0A                     LD   A,(BC)   
081B   FE 76                  CP   "v"   
081D   CA 71 05               JP   Z,over_   
0820   FE 72                  CP   "r"   
0822   CA 0B 05               JP   Z,or_   
0825   0B                     DEC   BC   
0826   C3 DD 05               JP   var_   
0829                P:           
0829   03                     INC   BC   
082A   0A                     LD   A,(BC)   
082B   FE 72                  CP   "r"   
082D   CA 7F 08               JP   Z,print_   
0830   0B                     DEC   BC   
0831   C3 DD 05               JP   var_   
0834                R:           
0834   03                     INC   BC   
0835   0A                     LD   A,(BC)   
0836   FE 6F                  CP   "o"   
0838   CA 7F 05               JP   Z,rot_   
083B   0B                     DEC   BC   
083C   C3 DD 05               JP   var_   
083F                S:           
083F   03                     INC   BC   
0840   0A                     LD   A,(BC)   
0841   FE 63                  CP   "c"   
0843   CA 7F 08               JP   Z,scan_   
0846   FE 65                  CP   "e"   
0848   CA 7F 08               JP   Z,set_   
084B   FE 68                  CP   "h"   
084D   CA 7F 08               JP   Z,shift_   
0850   FE 75                  CP   "u"   
0852   CA A5 05               JP   Z,sub_   
0855   FE 77                  CP   "w"   
0857   CA 9A 05               JP   Z,swap_   
085A   0B                     DEC   BC   
085B   C3 DD 05               JP   var_   
085E                U:           
085E   03                     INC   BC   
085F   0A                     LD   A,(BC)   
0860   FE 6E                  CP   "n"   
0862   CA 7F 08               JP   Z,undrop_   
0865   0B                     DEC   BC   
0866   C3 DD 05               JP   var_   
0869                W:           
0869   03                     INC   BC   
086A   0A                     LD   A,(BC)   
086B   FE 68                  CP   "h"   
086D   CA 7F 08               JP   Z,while_   
0870   0B                     DEC   BC   
0871   C3 DD 05               JP   var_   
0874                X:           
0874   03                     INC   BC   
0875   0A                     LD   A,(BC)   
0876   FE 78                  CP   "x"   
0878   CA 14 05               JP   Z,xor_   
087B   0B                     DEC   BC   
087C   C3 DD 05               JP   var_   
087F                CASE_:       
087F                CLOSURE_:      
087F                DEF_:        
087F                FILTER_:      
087F                GET_:        
087F                IF_:         
087F                LET_:        
087F                MAP_:        
087F                PRINT_:      
087F                SCAN_:       
087F                SET_:        
087F                SHIFT_:      
087F                UNDROP_:      
087F                WHILE_:      
087F   FD E9                  JP   (IY)   
0881                             ;*******************************************************************
0881                             ; Page 5 primitive routines continued
0881                             ;*******************************************************************
0881                             ; ********************************************************************
0881                             ; 16-bit multiply
0881                MUL:         ;=19
0881   D1                     POP   DE   ; get first value
0882   E1                     POP   HL   
0883   C5                     PUSH   BC   ; Preserve the IP
0884   44                     LD   B,H   ; BC = 2nd value
0885   4D                     LD   C,L   
0886   21 00 00               LD   HL,0   
0889   3E 10                  LD   A,16   
088B                MUL2:        
088B   29                     ADD   HL,HL   
088C   CB 13                  RL   E   
088E   CB 12                  RL   D   
0890   30 04                  JR   NC,$+6   
0892   09                     ADD   HL,BC   
0893   30 01                  JR   NC,$+3   
0895   13                     INC   DE   
0896   3D                     DEC   A   
0897   20 F2                  JR   NZ,mul2   
0899   C1                     POP   BC   ; Restore the IP
089A   E5                     PUSH   HL   ; Put the product on the stack - stack bug fixed 2/12/21
089B   FD E9                  JP   (IY)   
089D                             ; ********************************************************************************
089D                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
089D                             ; Read the first character.
089D                             ;			
089D                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
089D                             ; and then added into the L register. (HL forms a 16-bit accumulator)
089D                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
089D                             ; and then add in the next digit. Repeat this until a non-number character is
089D                             ; detected. Add in the final digit so that HL contains the converted number.
089D                             ; Push HL onto the stack and proceed to the dispatch routine.
089D                             ; ********************************************************************************
089D                NUM:         ;=23
089D   21 00 00               LD   HL,$0000   ;     Clear HL to accept the number
08A0   0A                     LD   A,(BC)   ;     Get the character which is a numeral
08A1                NUM1:        ; corrected KB 24/11/21
08A1   D6 30                  SUB   $30   ;       Form decimal digit
08A3   85                     ADD   A,L   ;       Add into bottom of HL
08A4   6F                     LD   L,A   ; 
08A5   3E 00                  LD   A,00   ;       Clear A
08A7   8C                     ADC   A,H   ; Add with carry H-reg
08A8   67                     LD   H,A   ; Put result in H-reg
08A9   03                     INC   BC   ;       Increment IP
08AA   0A                     LD   A,(BC)   ;       and get the next character
08AB   FE 30                  CP   $30   ;       Less than $30
08AD   38 0C                  JR   C,num2   ;       Not a number / end of number
08AF   FE 3A                  CP   $3A   ;       Greater or equal to $3A
08B1   30 08                  JR   NC,num2   ;       Not a number / end of number
08B3                             ; Multiply digit(s) in HL by 10
08B3   29                     ADD   HL,HL   ;        2X
08B4   5D                     LD   E,L   ;        LD DE,HL
08B5   54                     LD   D,H   ; 
08B6   29                     ADD   HL,HL   ;        4X
08B7   29                     ADD   HL,HL   ;        8X
08B8   19                     ADD   HL,DE   ;        2X  + 8X  = 10X
08B9                             ; 52t cycles
08B9   18 E6                  JR   num1   
08BB                NUM2:        
08BB   0B                     DEC   BC   
08BC   E5                     PUSH   HL   ; Put the number on the stack
08BD   FD E9                  JP   (IY)   ; and process the next character
08BF                HEX:         ;=26
08BF   21 00 00               LD   HL,0   ; Clear HL to accept the number
08C2                HEX1:        
08C2   03                     INC   BC   
08C3   0A                     LD   A,(BC)   ; Get the character which is a numeral
08C4   CB 77                  BIT   6,A   ; is it uppercase alpha?
08C6   28 02                  JR   Z,hex2   ; no a decimal
08C8   D6 07                  SUB   7   ; sub 7  to make $A - $F
08CA                HEX2:        
08CA   D6 30                  SUB   $30   ; Form decimal digit
08CC   DA BB 08               JP   C,num2   
08CF   FE 10                  CP   $0F+1   
08D1   D2 BB 08               JP   NC,num2   
08D4   29                     ADD   HL,HL   ; 2X ; Multiply digit(s) in HL by 16
08D5   29                     ADD   HL,HL   ; 4X
08D6   29                     ADD   HL,HL   ; 8X
08D7   29                     ADD   HL,HL   ; 16X
08D8   85                     ADD   A,L   ; Add into bottom of HL
08D9   6F                     LD   L,A   ; 
08DA   18 E6                  JR   hex1   
08DC                             ;*******************************************************************
08DC                             ; Subroutines
08DC                             ;*******************************************************************
08DC                PROMPT:      ;=9
08DC   CD 97 03               CALL   printStr   
08DF   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08E4   C9                     RET      
08E5                PUTSTR0:      
08E5   CD 85 00               CALL   putchar   
08E8   23                     INC   HL   
08E9                PUTSTR:      
08E9   7E                     LD   A,(HL)   
08EA   B7                     OR   A   
08EB   20 F8                  JR   NZ,putStr0   
08ED   C9                     RET      
08EE                RPUSH:       ;=11
08EE   DD 2B                  DEC   IX   
08F0   DD 74 00               LD   (IX+0),H   
08F3   DD 2B                  DEC   IX   
08F5   DD 75 00               LD   (IX+0),L   
08F8   C9                     RET      
08F9                RPOP:        ;=11
08F9   DD 6E 00               LD   L,(IX+0)   
08FC   DD 23                  INC   IX   
08FE   DD 66 00               LD   H,(IX+0)   
0901   DD 23                  INC   IX   
0903                RPOP2:       
0903   C9                     RET      
0904                CRLF:        ;=7
0904   CD 97 03               CALL   printStr   
0907   0D 0A 00               .CSTR   "\r\n"   
090A   C9                     RET      
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          DS   LSIZE   
1A80                LSTACK:      
1A80                          ALIGN   $100   
1B00                OPCODES:      
1B00                          DS   $80   
1B80                CTRLCODES:      
1B80                ALTCODES:      
1B80                          DS   $80   
1C00                          ALIGN   $100   
1C00                MINTVARS:      
1C00                          DS   $30   
1C30                VLOOPSP:   DS   2   ; 
1C32                VBYTEMODE:   DS   2   ; 
1C34                TBPTR:    DS   2   ; reserved for tests
1C36                RST08:    DS   2   
1C38                RST10:    DS   2   
1C3A                RST18:    DS   2   
1C3C                RST20:    DS   2   
1C3E                RST28:    DS   2   
1C40                RST30:    DS   2   ; 
1C42                BAUD:     DS   2   ; 
1C44                INTVEC:   DS   2   ; 
1C46                NMIVEC:   DS   2   ; 
1C48                GETCVEC:   DS   2   ; 
1C4A                PUTCVEC:   DS   2   ; 
1C4C                          DS   26*2   
1C80                ALTVARS:      
1C80                VS0:      DS   2   ; a
1C82                VBASE16:   DS   2   ; b
1C84                VTIBPTR:   DS   2   ; c
1C86                VNS:      DS   2   ; d
1C88                VLASTDEF:   DS   2   ; e
1C8A                          DS   2   ; f
1C8C                VALTPAGE:   DS   2   ; g
1C8E                VHEAPPTR:   DS   2   ; h
1C90                          DS   2   ; i
1C92                          DS   2   ; j
1C94                          DS   2   ; k
1C96                          DS   2   ; l
1C98                          DS   2   ; m
1C9A                          DS   2   ; n
1C9C                          DS   2   ; o
1C9E                          DS   2   ; p
1CA0                          DS   2   ; q
1CA2                          DS   2   ; r
1CA4                          DS   2   ; s
1CA6                          DS   2   ; t
1CA8                          DS   2   ; u
1CAA                          DS   2   ; v
1CAC                          DS   2   ; w
1CAE                          DS   2   ; x
1CB0                          DS   2   ; y
1CB2                          DS   2   ; z
1CB4                             ; ****************************************************************
1CB4                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1CB4                             ; ****************************************************************
1CB4                          ALIGN   $40   
1CC0                MINTDATA:   DS   mintDataSize   
1D28                HEAP:        
1D28                             ; 
4000                          .ORG   $4000   
4000                             ; 
4000                TESTSSTART:      
4000                             ; 
4000                             ; test "3 3 >", 0
4000                             ; 
4000                             ; 
4000                          ;*Macro unroll:  test "1", 1
4000   CD 8E 03               CALL   enter   
4003   31 00                  .CSTR   "1"   
4005                          ;*Macro unroll:  expect "1",1
4005   E1                     POP   HL   
4006   E5                     PUSH   HL   
4007   11 01 00               LD   DE,1   
400A   B7                     OR   A   
400B   ED 52                  SBC   HL,DE   
400D   7D                     LD   A,L   
400E   B4                     OR   H   
400F   28 2A                  JR   Z,expectM_0_1945S29   
4011   CD 97 03               CALL   printStr   
4014   31 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1","\r\nActual: "   
4020   CD BC 03               CALL   printdec   
4023   CD 97 03               CALL   printStr   
4026   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4033   21 01 00               LD   HL,1   
4036   CD BC 03               CALL   printdec   
4039   76                     HALT      
403A   00                     .CSTR      
403B                EXPECTM_0_1945S29:      
403B   E1                     POP   HL   
403C                          ;*Macro unroll:  test "0", 0
403C   CD 8E 03               CALL   enter   
403F   30 00                  .CSTR   "0"   
4041                          ;*Macro unroll:  expect "0",0
4041   E1                     POP   HL   
4042   E5                     PUSH   HL   
4043   11 00 00               LD   DE,0   
4046   B7                     OR   A   
4047   ED 52                  SBC   HL,DE   
4049   7D                     LD   A,L   
404A   B4                     OR   H   
404B   28 2A                  JR   Z,expectM_0_1946S29   
404D   CD 97 03               CALL   printStr   
4050   30 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0","\r\nActual: "   
405C   CD BC 03               CALL   printdec   
405F   CD 97 03               CALL   printStr   
4062   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
406F   21 00 00               LD   HL,0   
4072   CD BC 03               CALL   printdec   
4075   76                     HALT      
4076   00                     .CSTR      
4077                EXPECTM_0_1946S29:      
4077   E1                     POP   HL   
4078                          ;*Macro unroll:  test "10", 10
4078   CD 8E 03               CALL   enter   
407B   31 30 00               .CSTR   "10"   
407E                          ;*Macro unroll:  expect "10",10
407E   E1                     POP   HL   
407F   E5                     PUSH   HL   
4080   11 0A 00               LD   DE,10   
4083   B7                     OR   A   
4084   ED 52                  SBC   HL,DE   
4086   7D                     LD   A,L   
4087   B4                     OR   H   
4088   28 2B                  JR   Z,expectM_0_1947S29   
408A   CD 97 03               CALL   printStr   
408D   31 30 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "10","\r\nActual: "   
409A   CD BC 03               CALL   printdec   
409D   CD 97 03               CALL   printStr   
40A0   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
40AD   21 0A 00               LD   HL,10   
40B0   CD BC 03               CALL   printdec   
40B3   76                     HALT      
40B4   00                     .CSTR      
40B5                EXPECTM_0_1947S29:      
40B5   E1                     POP   HL   
40B6                          ;*Macro unroll:  test "$10", $10
40B6   CD 8E 03               CALL   enter   
40B9   24 31 30 00            .CSTR   "$10"   
40BD                          ;*Macro unroll:  expect "$10",$10
40BD   E1                     POP   HL   
40BE   E5                     PUSH   HL   
40BF   11 10 00               LD   DE,$10   
40C2   B7                     OR   A   
40C3   ED 52                  SBC   HL,DE   
40C5   7D                     LD   A,L   
40C6   B4                     OR   H   
40C7   28 2C                  JR   Z,expectM_0_1948S29   
40C9   CD 97 03               CALL   printStr   
40CC   24 31 30 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "$10","\r\nActual: "   
40DA   CD BC 03               CALL   printdec   
40DD   CD 97 03               CALL   printStr   
40E0   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
40ED   21 10 00               LD   HL,$10   
40F0   CD BC 03               CALL   printdec   
40F3   76                     HALT      
40F4   00                     .CSTR      
40F5                EXPECTM_0_1948S29:      
40F5   E1                     POP   HL   
40F6                          ;*Macro unroll:  test "$FF", $FF
40F6   CD 8E 03               CALL   enter   
40F9   24 46 46 00            .CSTR   "$FF"   
40FD                          ;*Macro unroll:  expect "$FF",$FF
40FD   E1                     POP   HL   
40FE   E5                     PUSH   HL   
40FF   11 FF 00               LD   DE,$FF   
4102   B7                     OR   A   
4103   ED 52                  SBC   HL,DE   
4105   7D                     LD   A,L   
4106   B4                     OR   H   
4107   28 2C                  JR   Z,expectM_0_1949S29   
4109   CD 97 03               CALL   printStr   
410C   24 46 46 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "$FF","\r\nActual: "   
411A   CD BC 03               CALL   printdec   
411D   CD 97 03               CALL   printStr   
4120   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
412D   21 FF 00               LD   HL,$FF   
4130   CD BC 03               CALL   printdec   
4133   76                     HALT      
4134   00                     .CSTR      
4135                EXPECTM_0_1949S29:      
4135   E1                     POP   HL   
4136                          ;*Macro unroll:  test "2 3 =", 0
4136   CD 8E 03               CALL   enter   
4139   32 20 33 20 3D 00      .CSTR   "2 3 ="   
413F                          ;*Macro unroll:  expect "2 3 =",0
413F   E1                     POP   HL   
4140   E5                     PUSH   HL   
4141   11 00 00               LD   DE,0   
4144   B7                     OR   A   
4145   ED 52                  SBC   HL,DE   
4147   7D                     LD   A,L   
4148   B4                     OR   H   
4149   28 2E                  JR   Z,expectM_0_1950S29   
414B   CD 97 03               CALL   printStr   
414E   32 20 33 20 3D 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "2 3 =","\r\nActual: "   
415E   CD BC 03               CALL   printdec   
4161   CD 97 03               CALL   printStr   
4164   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4171   21 00 00               LD   HL,0   
4174   CD BC 03               CALL   printdec   
4177   76                     HALT      
4178   00                     .CSTR      
4179                EXPECTM_0_1950S29:      
4179   E1                     POP   HL   
417A                          ;*Macro unroll:  test "3 3 =", 1
417A   CD 8E 03               CALL   enter   
417D   33 20 33 20 3D 00      .CSTR   "3 3 ="   
4183                          ;*Macro unroll:  expect "3 3 =",1
4183   E1                     POP   HL   
4184   E5                     PUSH   HL   
4185   11 01 00               LD   DE,1   
4188   B7                     OR   A   
4189   ED 52                  SBC   HL,DE   
418B   7D                     LD   A,L   
418C   B4                     OR   H   
418D   28 2E                  JR   Z,expectM_0_1951S29   
418F   CD 97 03               CALL   printStr   
4192   33 20 33 20 3D 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "3 3 =","\r\nActual: "   
41A2   CD BC 03               CALL   printdec   
41A5   CD 97 03               CALL   printStr   
41A8   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
41B5   21 01 00               LD   HL,1   
41B8   CD BC 03               CALL   printdec   
41BB   76                     HALT      
41BC   00                     .CSTR      
41BD                EXPECTM_0_1951S29:      
41BD   E1                     POP   HL   
41BE                          ;*Macro unroll:  test "2 3 <", 1
41BE   CD 8E 03               CALL   enter   
41C1   32 20 33 20 3C 00      .CSTR   "2 3 <"   
41C7                          ;*Macro unroll:  expect "2 3 <",1
41C7   E1                     POP   HL   
41C8   E5                     PUSH   HL   
41C9   11 01 00               LD   DE,1   
41CC   B7                     OR   A   
41CD   ED 52                  SBC   HL,DE   
41CF   7D                     LD   A,L   
41D0   B4                     OR   H   
41D1   28 2E                  JR   Z,expectM_0_1952S29   
41D3   CD 97 03               CALL   printStr   
41D6   32 20 33 20 3C 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "2 3 <","\r\nActual: "   
41E6   CD BC 03               CALL   printdec   
41E9   CD 97 03               CALL   printStr   
41EC   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
41F9   21 01 00               LD   HL,1   
41FC   CD BC 03               CALL   printdec   
41FF   76                     HALT      
4200   00                     .CSTR      
4201                EXPECTM_0_1952S29:      
4201   E1                     POP   HL   
4202                          ;*Macro unroll:  test "3 3 <", 0
4202   CD 8E 03               CALL   enter   
4205   33 20 33 20 3C 00      .CSTR   "3 3 <"   
420B                          ;*Macro unroll:  expect "3 3 <",0
420B   E1                     POP   HL   
420C   E5                     PUSH   HL   
420D   11 00 00               LD   DE,0   
4210   B7                     OR   A   
4211   ED 52                  SBC   HL,DE   
4213   7D                     LD   A,L   
4214   B4                     OR   H   
4215   28 2E                  JR   Z,expectM_0_1953S29   
4217   CD 97 03               CALL   printStr   
421A   33 20 33 20 3C 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "3 3 <","\r\nActual: "   
422A   CD BC 03               CALL   printdec   
422D   CD 97 03               CALL   printStr   
4230   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
423D   21 00 00               LD   HL,0   
4240   CD BC 03               CALL   printdec   
4243   76                     HALT      
4244   00                     .CSTR      
4245                EXPECTM_0_1953S29:      
4245   E1                     POP   HL   
4246                          ;*Macro unroll:  test "3 3 >", 0
4246   CD 8E 03               CALL   enter   
4249   33 20 33 20 3E 00      .CSTR   "3 3 >"   
424F                          ;*Macro unroll:  expect "3 3 >",0
424F   E1                     POP   HL   
4250   E5                     PUSH   HL   
4251   11 00 00               LD   DE,0   
4254   B7                     OR   A   
4255   ED 52                  SBC   HL,DE   
4257   7D                     LD   A,L   
4258   B4                     OR   H   
4259   28 2E                  JR   Z,expectM_0_1954S29   
425B   CD 97 03               CALL   printStr   
425E   33 20 33 20 3E 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "3 3 >","\r\nActual: "   
426E   CD BC 03               CALL   printdec   
4271   CD 97 03               CALL   printStr   
4274   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4281   21 00 00               LD   HL,0   
4284   CD BC 03               CALL   printdec   
4287   76                     HALT      
4288   00                     .CSTR      
4289                EXPECTM_0_1954S29:      
4289   E1                     POP   HL   
428A                          ;*Macro unroll:  test "4 3 >", 1
428A   CD 8E 03               CALL   enter   
428D   34 20 33 20 3E 00      .CSTR   "4 3 >"   
4293                          ;*Macro unroll:  expect "4 3 >",1
4293   E1                     POP   HL   
4294   E5                     PUSH   HL   
4295   11 01 00               LD   DE,1   
4298   B7                     OR   A   
4299   ED 52                  SBC   HL,DE   
429B   7D                     LD   A,L   
429C   B4                     OR   H   
429D   28 2E                  JR   Z,expectM_0_1955S29   
429F   CD 97 03               CALL   printStr   
42A2   34 20 33 20 3E 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "4 3 >","\r\nActual: "   
42B2   CD BC 03               CALL   printdec   
42B5   CD 97 03               CALL   printStr   
42B8   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
42C5   21 01 00               LD   HL,1   
42C8   CD BC 03               CALL   printdec   
42CB   76                     HALT      
42CC   00                     .CSTR      
42CD                EXPECTM_0_1955S29:      
42CD   E1                     POP   HL   
42CE                          ;*Macro unroll:  test "1 2 +", 3
42CE   CD 8E 03               CALL   enter   
42D1   31 20 32 20 2B 00      .CSTR   "1 2 +"   
42D7                          ;*Macro unroll:  expect "1 2 +",3
42D7   E1                     POP   HL   
42D8   E5                     PUSH   HL   
42D9   11 03 00               LD   DE,3   
42DC   B7                     OR   A   
42DD   ED 52                  SBC   HL,DE   
42DF   7D                     LD   A,L   
42E0   B4                     OR   H   
42E1   28 2E                  JR   Z,expectM_0_1956S29   
42E3   CD 97 03               CALL   printStr   
42E6   31 20 32 20 2B 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1 2 +","\r\nActual: "   
42F6   CD BC 03               CALL   printdec   
42F9   CD 97 03               CALL   printStr   
42FC   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4309   21 03 00               LD   HL,3   
430C   CD BC 03               CALL   printdec   
430F   76                     HALT      
4310   00                     .CSTR      
4311                EXPECTM_0_1956S29:      
4311   E1                     POP   HL   
4312                          ;*Macro unroll:  test "123 456 +", 123+456
4312   CD 8E 03               CALL   enter   
4315   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
431F                          ;*Macro unroll:  expect "123 456 +",123+456
431F   E1                     POP   HL   
4320   E5                     PUSH   HL   
4321   11 43 02               LD   DE,123+456   
4324   B7                     OR   A   
4325   ED 52                  SBC   HL,DE   
4327   7D                     LD   A,L   
4328   B4                     OR   H   
4329   28 32                  JR   Z,expectM_0_1957S29   
432B   CD 97 03               CALL   printStr   
432E   31 32 33 20 34 35 36 20 2B 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "123 456 +","\r\nActual: "   
4342   CD BC 03               CALL   printdec   
4345   CD 97 03               CALL   printStr   
4348   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4355   21 43 02               LD   HL,123+456   
4358   CD BC 03               CALL   printdec   
435B   76                     HALT      
435C   00                     .CSTR      
435D                EXPECTM_0_1957S29:      
435D   E1                     POP   HL   
435E                          ;*Macro unroll:  test "64 128 +", 64+128
435E   CD 8E 03               CALL   enter   
4361   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
436A                          ;*Macro unroll:  expect "64 128 +",64+128
436A   E1                     POP   HL   
436B   E5                     PUSH   HL   
436C   11 C0 00               LD   DE,64+128   
436F   B7                     OR   A   
4370   ED 52                  SBC   HL,DE   
4372   7D                     LD   A,L   
4373   B4                     OR   H   
4374   28 31                  JR   Z,expectM_0_1958S29   
4376   CD 97 03               CALL   printStr   
4379   36 34 20 31 32 38 20 2B 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "64 128 +","\r\nActual: "   
438C   CD BC 03               CALL   printdec   
438F   CD 97 03               CALL   printStr   
4392   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
439F   21 C0 00               LD   HL,64+128   
43A2   CD BC 03               CALL   printdec   
43A5   76                     HALT      
43A6   00                     .CSTR      
43A7                EXPECTM_0_1958S29:      
43A7   E1                     POP   HL   
43A8                          ;*Macro unroll:  test "5 3 -", 2
43A8   CD 8E 03               CALL   enter   
43AB   35 20 33 20 2D 00      .CSTR   "5 3 -"   
43B1                          ;*Macro unroll:  expect "5 3 -",2
43B1   E1                     POP   HL   
43B2   E5                     PUSH   HL   
43B3   11 02 00               LD   DE,2   
43B6   B7                     OR   A   
43B7   ED 52                  SBC   HL,DE   
43B9   7D                     LD   A,L   
43BA   B4                     OR   H   
43BB   28 2E                  JR   Z,expectM_0_1959S29   
43BD   CD 97 03               CALL   printStr   
43C0   35 20 33 20 2D 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "5 3 -","\r\nActual: "   
43D0   CD BC 03               CALL   printdec   
43D3   CD 97 03               CALL   printStr   
43D6   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
43E3   21 02 00               LD   HL,2   
43E6   CD BC 03               CALL   printdec   
43E9   76                     HALT      
43EA   00                     .CSTR      
43EB                EXPECTM_0_1959S29:      
43EB   E1                     POP   HL   
43EC                          ;*Macro unroll:  test "3 5 &", 1
43EC   CD 8E 03               CALL   enter   
43EF   33 20 35 20 26 00      .CSTR   "3 5 &"   
43F5                          ;*Macro unroll:  expect "3 5 &",1
43F5   E1                     POP   HL   
43F6   E5                     PUSH   HL   
43F7   11 01 00               LD   DE,1   
43FA   B7                     OR   A   
43FB   ED 52                  SBC   HL,DE   
43FD   7D                     LD   A,L   
43FE   B4                     OR   H   
43FF   28 2E                  JR   Z,expectM_0_1960S29   
4401   CD 97 03               CALL   printStr   
4404   33 20 35 20 26 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "3 5 &","\r\nActual: "   
4414   CD BC 03               CALL   printdec   
4417   CD 97 03               CALL   printStr   
441A   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4427   21 01 00               LD   HL,1   
442A   CD BC 03               CALL   printdec   
442D   76                     HALT      
442E   00                     .CSTR      
442F                EXPECTM_0_1960S29:      
442F   E1                     POP   HL   
4430                          ;*Macro unroll:  test "3 5 |", 7
4430   CD 8E 03               CALL   enter   
4433   33 20 35 20 7C 00      .CSTR   "3 5 |"   
4439                          ;*Macro unroll:  expect "3 5 |",7
4439   E1                     POP   HL   
443A   E5                     PUSH   HL   
443B   11 07 00               LD   DE,7   
443E   B7                     OR   A   
443F   ED 52                  SBC   HL,DE   
4441   7D                     LD   A,L   
4442   B4                     OR   H   
4443   28 2E                  JR   Z,expectM_0_1961S29   
4445   CD 97 03               CALL   printStr   
4448   33 20 35 20 7C 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "3 5 |","\r\nActual: "   
4458   CD BC 03               CALL   printdec   
445B   CD 97 03               CALL   printStr   
445E   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
446B   21 07 00               LD   HL,7   
446E   CD BC 03               CALL   printdec   
4471   76                     HALT      
4472   00                     .CSTR      
4473                EXPECTM_0_1961S29:      
4473   E1                     POP   HL   
4474                          ;*Macro unroll:  test "2 3 *", 6
4474   CD 8E 03               CALL   enter   
4477   32 20 33 20 2A 00      .CSTR   "2 3 *"   
447D                          ;*Macro unroll:  expect "2 3 *",6
447D   E1                     POP   HL   
447E   E5                     PUSH   HL   
447F   11 06 00               LD   DE,6   
4482   B7                     OR   A   
4483   ED 52                  SBC   HL,DE   
4485   7D                     LD   A,L   
4486   B4                     OR   H   
4487   28 2E                  JR   Z,expectM_0_1962S29   
4489   CD 97 03               CALL   printStr   
448C   32 20 33 20 2A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "2 3 *","\r\nActual: "   
449C   CD BC 03               CALL   printdec   
449F   CD 97 03               CALL   printStr   
44A2   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
44AF   21 06 00               LD   HL,6   
44B2   CD BC 03               CALL   printdec   
44B5   76                     HALT      
44B6   00                     .CSTR      
44B7                EXPECTM_0_1962S29:      
44B7   E1                     POP   HL   
44B8                          ;*Macro unroll:  test "1 2 3 + *", 5
44B8   CD 8E 03               CALL   enter   
44BB   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
44C5                          ;*Macro unroll:  expect "1 2 3 + *",5
44C5   E1                     POP   HL   
44C6   E5                     PUSH   HL   
44C7   11 05 00               LD   DE,5   
44CA   B7                     OR   A   
44CB   ED 52                  SBC   HL,DE   
44CD   7D                     LD   A,L   
44CE   B4                     OR   H   
44CF   28 32                  JR   Z,expectM_0_1963S29   
44D1   CD 97 03               CALL   printStr   
44D4   31 20 32 20 33 20 2B 20 2A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1 2 3 + *","\r\nActual: "   
44E8   CD BC 03               CALL   printdec   
44EB   CD 97 03               CALL   printStr   
44EE   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
44FB   21 05 00               LD   HL,5   
44FE   CD BC 03               CALL   printdec   
4501   76                     HALT      
4502   00                     .CSTR      
4503                EXPECTM_0_1963S29:      
4503   E1                     POP   HL   
4504                             ; 
4504                             ; test "1 2 3 ' +", 3
4504                             ; test "1_ 2 +",1
4504                             ; test "1_ 1 +",0
4504                             ; call enter
4504                             ;     .cstr "1 3",$22,"+"
4504                             ; expect "1 3 DUP +", 6
4504                             ; 
4504                             ; test "5 2/'", 2
4504                             ; test "3 5$ -", 2
4504                             ; test "5 2/$ '", 1
4504                             ; test "2 3%++", 7
4504                             ; test "1 2 3~''", 2
4504                             ; test "1 2 3~+*", 8
4504                             ; test "2a!a@",2
4504                             ; test "3x! 1 x@+x! x@", 4
4504                             ; test "3x! 1_ x@+x! x@", 2
4504                             ; 
4504                             ; 
4504                             ; 
4504                             ; test "1{", 2
4504                             ; test "1}", 0
4504                             ; test "2}", 1
4504                             ; test "10 11 12\\#3$ '$ '$ '", 4
4504                             ; test "(2) \\^", 2
4504                             ; test ":X1; X", 1
4504                             ; test ":A100;A", 100
4504                             ; test ":Aa!; 3A a@", 3
4504                             ; test ":Aa!;:Ba@;4AB", 4
4504                             ; test "[]$ '", 0
4504                             ; test "[3]$ '", 1
4504                             ; test "[3]'@", 3
4504                             ; test "[1 2 3]'@", 1
4504                             ; test "[1 2 3]'2+@", 2
4504                             ; test "\\h@[1]''\\h@$-", 2
4504                             ; test "\\h@[1 2 3]''\\h@$-", 6
4504                             ; test "\\[]$ '", 0
4504                             ; test "\\[3]'\\@", 3
4504                             ; test "\\[3]$ '", 1
4504                             ; test "\\[1 2 3]'\\@", 1
4504                             ; test "\\[1 2 3]'1+\\@", 2
4504                             ; test "\\h@\\[1 2 3]''\\h@$-", 3
4504                             ; test "\\h@\\[1]''\\h@$-", 1
4504                             ; test "\\`A`\\@",65
4504                             ; test "0 0(1+)", 0
4504                             ; test "0 1(1+)", 1
4504                             ; test "0 2(1+)", 2
4504                             ; test "0 1(0(1+))", 0
4504                             ; test "0 1(1(1+))", 1
4504                             ; test "0 2(1(1+))", 2
4504                             ; test "0 2(2(1+))", 4
4504                             ; test "0 1(\\i@+)", 0
4504                             ; test "0 2(\\i@+)", 1
4504                             ; test "0 3(\\i@+)", 3
4504                             ; test "0 2(2(\\i@ \\i6+@ ++))", 4
4504                             ; test "0t! 10(1 t@+t!) t@",10
4504                             ; test "0(100)(200)",200
4504                             ; test "1(100)(200)",100
4504                             ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
4504                             ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
4504                             ; test ":X10;\\0X", 10
4504                             ; test "2 \\1x! \\1x@", 2
4504                             ; 
4504   CD 97 03               CALL   printStr   
4507   44 6F 6E 65 21 00      .CSTR   "Done!"   
450D   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 43 IN SCAN.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 432 IN SCAN.asm
                    > USED AT LINE 795 IN SCAN.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 462 IN SCAN.asm
                    > USED AT LINE 619 IN SCAN.asm
                    > USED AT LINE 644 IN SCAN.asm
                    > USED AT LINE 755 IN SCAN.asm
                    > USED AT LINE 1070 IN SCAN.asm
                    > USED AT LINE 1446 IN SCAN.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 15 IN SCAN.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 16 IN SCAN.asm
                    > USED AT LINE 5 IN ram.asm
LSIZE:              0080 DEFINED AT LINE 17 IN SCAN.asm
                    > USED AT LINE 11 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN SCAN.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               0001 DEFINED AT LINE 19 IN SCAN.asm
                    > USED AT LINE 912 IN SCAN.asm
FALSE:              0000 DEFINED AT LINE 20 IN SCAN.asm
                    > USED AT LINE 66 IN SCAN.asm
EMPTY:              0000 DEFINED AT LINE 21 IN SCAN.asm
MINTDATASIZE:       0068 DEFINED AT LINE 23 IN SCAN.asm
                    > USED AT LINE 532 IN SCAN.asm
                    > USED AT LINE 73 IN ram.asm
MACROS:             0180 DEFINED AT LINE 49 IN SCAN.asm
IALTVARS:           0180 DEFINED AT LINE 64 IN SCAN.asm
                    > USED AT LINE 523 IN SCAN.asm
IOPCODES:           0190 DEFINED AT LINE 76 IN SCAN.asm
                    > USED AT LINE 536 IN SCAN.asm
ETX:                02A6 DEFINED AT LINE 387 IN SCAN.asm
                    > USED AT LINE 773 IN SCAN.asm
ETX1:               02AF DEFINED AT LINE 392 IN SCAN.asm
                    > USED AT LINE 390 IN SCAN.asm
START:              02B1 DEFINED AT LINE 395 IN SCAN.asm
INTERPRET:          02C6 DEFINED AT LINE 401 IN SCAN.asm
                    > USED AT LINE 393 IN SCAN.asm
INTERPRET2:         02D0 DEFINED AT LINE 407 IN SCAN.asm
                    > USED AT LINE 455 IN SCAN.asm
INTERPRET3:         02D8 DEFINED AT LINE 414 IN SCAN.asm
                    > USED AT LINE 423 IN SCAN.asm
INTERPRET4:         02DE DEFINED AT LINE 420 IN SCAN.asm
                    > USED AT LINE 412 IN SCAN.asm
WAITCHAR:           02E3 DEFINED AT LINE 431 IN SCAN.asm
                    > USED AT LINE 464 IN SCAN.asm
                    > USED AT LINE 478 IN SCAN.asm
MACRO:              02F2 DEFINED AT LINE 440 IN SCAN.asm
MACRO1:             0309 DEFINED AT LINE 453 IN SCAN.asm
                    > USED AT LINE 448 IN SCAN.asm
WAITCHAR1:          030F DEFINED AT LINE 457 IN SCAN.asm
                    > USED AT LINE 434 IN SCAN.asm
WAITCHAR3:          031D DEFINED AT LINE 466 IN SCAN.asm
                    > USED AT LINE 438 IN SCAN.asm
WAITCHAR4:          0333 DEFINED AT LINE 482 IN SCAN.asm
                    > USED AT LINE 436 IN SCAN.asm
NEXT:               033B DEFINED AT LINE 509 IN SCAN.asm
                    > USED AT LINE 522 IN SCAN.asm
                    > USED AT LINE 804 IN SCAN.asm
INIT:               0344 DEFINED AT LINE 518 IN SCAN.asm
                    > USED AT LINE 9
                    > USED AT LINE 397 IN SCAN.asm
INITOPS:            036A DEFINED AT LINE 535 IN SCAN.asm
INITOPS1:           0373 DEFINED AT LINE 540 IN SCAN.asm
                    > USED AT LINE 550 IN SCAN.asm
                    > USED AT LINE 561 IN SCAN.asm
INITOPS2:           0383 DEFINED AT LINE 552 IN SCAN.asm
                    > USED AT LINE 545 IN SCAN.asm
INITOPS2A:          0388 DEFINED AT LINE 557 IN SCAN.asm
                    > USED AT LINE 560 IN SCAN.asm
ENTER:              038E DEFINED AT LINE 563 IN SCAN.asm
                    > USED AT LINE 451 IN SCAN.asm
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
PRINTSTR:           0397 DEFINED AT LINE 570 IN SCAN.asm
                    > USED AT LINE 398 IN SCAN.asm
                    > USED AT LINE 1441 IN SCAN.asm
                    > USED AT LINE 1470 IN SCAN.asm
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 104
LOOKUPREF:          039E DEFINED AT LINE 577 IN SCAN.asm
LOOKUPREF0:         03A0 DEFINED AT LINE 579 IN SCAN.asm
LOOKUPREF1:         03A4 DEFINED AT LINE 582 IN SCAN.asm
                    > USED AT LINE 743 IN SCAN.asm
LOOKUPREF2:         03AA DEFINED AT LINE 586 IN SCAN.asm
                    > USED AT LINE 581 IN SCAN.asm
                    > USED AT LINE 917 IN SCAN.asm
LOOKUPREF3:         03AE DEFINED AT LINE 589 IN SCAN.asm
                    > USED AT LINE 585 IN SCAN.asm
PRINTDEC:           03BC DEFINED AT LINE 602 IN SCAN.asm
                    > USED AT LINE 752 IN SCAN.asm
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
PRINTDEC1:          03D5 DEFINED AT LINE 612 IN SCAN.asm
                    > USED AT LINE 604 IN SCAN.asm
                    > USED AT LINE 606 IN SCAN.asm
                    > USED AT LINE 608 IN SCAN.asm
                    > USED AT LINE 610 IN SCAN.asm
PRINTDEC2:          03D7 DEFINED AT LINE 614 IN SCAN.asm
                    > USED AT LINE 617 IN SCAN.asm
PRINTHEX:           03E0 DEFINED AT LINE 621 IN SCAN.asm
                    > USED AT LINE 760 IN SCAN.asm
PRINTHEX2:          03EB DEFINED AT LINE 630 IN SCAN.asm
                    > USED AT LINE 625 IN SCAN.asm
                    > USED AT LINE 627 IN SCAN.asm
PRINTHEX3:          03F4 DEFINED AT LINE 638 IN SCAN.asm
                    > USED AT LINE 636 IN SCAN.asm
NESTING:            03FF DEFINED AT LINE 656 IN SCAN.asm
                    > USED AT LINE 418 IN SCAN.asm
                    > USED AT LINE 463 IN SCAN.asm
NESTING1A:          040A DEFINED AT LINE 663 IN SCAN.asm
                    > USED AT LINE 660 IN SCAN.asm
NESTING1:           040D DEFINED AT LINE 666 IN SCAN.asm
                    > USED AT LINE 658 IN SCAN.asm
NESTING2:           041C DEFINED AT LINE 675 IN SCAN.asm
                    > USED AT LINE 670 IN SCAN.asm
                    > USED AT LINE 672 IN SCAN.asm
NESTING3:           041E DEFINED AT LINE 678 IN SCAN.asm
                    > USED AT LINE 674 IN SCAN.asm
NESTING4:           0429 DEFINED AT LINE 685 IN SCAN.asm
                    > USED AT LINE 680 IN SCAN.asm
                    > USED AT LINE 682 IN SCAN.asm
PAGE4:              0500 DEFINED AT LINE 693 IN SCAN.asm
AND_:               0500 DEFINED AT LINE 695 IN SCAN.asm
                    > USED AT LINE 1154 IN SCAN.asm
AND1:               0507 DEFINED AT LINE 703 IN SCAN.asm
                    > USED AT LINE 717 IN SCAN.asm
                    > USED AT LINE 728 IN SCAN.asm
OR_:                050B DEFINED AT LINE 709 IN SCAN.asm
                    > USED AT LINE 1263 IN SCAN.asm
XOR_:               0514 DEFINED AT LINE 719 IN SCAN.asm
                    > USED AT LINE 1318 IN SCAN.asm
XOR1:               0515 DEFINED AT LINE 721 IN SCAN.asm
                    > USED AT LINE 732 IN SCAN.asm
INV_:               051D DEFINED AT LINE 730 IN SCAN.asm
                    > USED AT LINE 1216 IN SCAN.asm
ADD_:               0522 DEFINED AT LINE 734 IN SCAN.asm
                    > USED AT LINE 1152 IN SCAN.asm
CALL_:              0528 DEFINED AT LINE 741 IN SCAN.asm
DOT_:               0532 DEFINED AT LINE 750 IN SCAN.asm
DOT2:               0536 DEFINED AT LINE 753 IN SCAN.asm
                    > USED AT LINE 761 IN SCAN.asm
HDOT_:              053D DEFINED AT LINE 758 IN SCAN.asm
DROP_:              0543 DEFINED AT LINE 763 IN SCAN.asm
                    > USED AT LINE 1176 IN SCAN.asm
DUP_:               0546 DEFINED AT LINE 767 IN SCAN.asm
                    > USED AT LINE 1178 IN SCAN.asm
ETX_:               054B DEFINED AT LINE 772 IN SCAN.asm
EXIT_:              054E DEFINED AT LINE 775 IN SCAN.asm
FETCH_:             0558 DEFINED AT LINE 783 IN SCAN.asm
FETCH1:             0559 DEFINED AT LINE 785 IN SCAN.asm
HEX_:               055F DEFINED AT LINE 792 IN SCAN.asm
KEY_:               0562 DEFINED AT LINE 794 IN SCAN.asm
                    > USED AT LINE 1225 IN SCAN.asm
MUL_:               056B DEFINED AT LINE 801 IN SCAN.asm
                    > USED AT LINE 1245 IN SCAN.asm
NOP_:               056E DEFINED AT LINE 803 IN SCAN.asm
OVER_:              0571 DEFINED AT LINE 807 IN SCAN.asm
                    > USED AT LINE 1261 IN SCAN.asm
RET_:               0578 DEFINED AT LINE 815 IN SCAN.asm
ROT_:               057F DEFINED AT LINE 820 IN SCAN.asm
                    > USED AT LINE 1278 IN SCAN.asm
SHL_:               0586 DEFINED AT LINE 829 IN SCAN.asm
SHR_:               058B DEFINED AT LINE 836 IN SCAN.asm
SHR1:               058C DEFINED AT LINE 838 IN SCAN.asm
STORE_:             0593 DEFINED AT LINE 844 IN SCAN.asm
SWAP_:              059A DEFINED AT LINE 852 IN SCAN.asm
                    > USED AT LINE 1294 IN SCAN.asm
NEG_:               059F DEFINED AT LINE 858 IN SCAN.asm
                    > USED AT LINE 1253 IN SCAN.asm
SUB_:               05A5 DEFINED AT LINE 863 IN SCAN.asm
                    > USED AT LINE 1292 IN SCAN.asm
SUB2:               05A7 DEFINED AT LINE 866 IN SCAN.asm
                    > USED AT LINE 861 IN SCAN.asm
EQ_:                05AD DEFINED AT LINE 872 IN SCAN.asm
                    > USED AT LINE 1186 IN SCAN.asm
FALSE_:             05B4 DEFINED AT LINE 878 IN SCAN.asm
                    > USED AT LINE 894 IN SCAN.asm
                    > USED AT LINE 895 IN SCAN.asm
                    > USED AT LINE 911 IN SCAN.asm
GT_:                05BA DEFINED AT LINE 883 IN SCAN.asm
                    > USED AT LINE 1206 IN SCAN.asm
LT_:                05BE DEFINED AT LINE 888 IN SCAN.asm
                    > USED AT LINE 1235 IN SCAN.asm
LT1:                05C0 DEFINED AT LINE 891 IN SCAN.asm
                    > USED AT LINE 886 IN SCAN.asm
TRUE_:              05C8 DEFINED AT LINE 896 IN SCAN.asm
                    > USED AT LINE 877 IN SCAN.asm
GTE_:               05CE DEFINED AT LINE 901 IN SCAN.asm
LTE_:               05D2 DEFINED AT LINE 905 IN SCAN.asm
LTE1:               05D4 DEFINED AT LINE 908 IN SCAN.asm
                    > USED AT LINE 904 IN SCAN.asm
VAR_:               05DD DEFINED AT LINE 915 IN SCAN.asm
                    > USED AT LINE 1156 IN SCAN.asm
                    > USED AT LINE 1166 IN SCAN.asm
                    > USED AT LINE 1180 IN SCAN.asm
                    > USED AT LINE 1188 IN SCAN.asm
                    > USED AT LINE 1196 IN SCAN.asm
                    > USED AT LINE 1208 IN SCAN.asm
                    > USED AT LINE 1218 IN SCAN.asm
                    > USED AT LINE 1227 IN SCAN.asm
                    > USED AT LINE 1237 IN SCAN.asm
                    > USED AT LINE 1247 IN SCAN.asm
                    > USED AT LINE 1255 IN SCAN.asm
                    > USED AT LINE 1265 IN SCAN.asm
                    > USED AT LINE 1273 IN SCAN.asm
                    > USED AT LINE 1280 IN SCAN.asm
                    > USED AT LINE 1296 IN SCAN.asm
                    > USED AT LINE 1304 IN SCAN.asm
                    > USED AT LINE 1312 IN SCAN.asm
                    > USED AT LINE 1320 IN SCAN.asm
NUM_:               05E4 DEFINED AT LINE 921 IN SCAN.asm
LAMBDA_:            05E7 DEFINED AT LINE 922 IN SCAN.asm
A_:                 05E9 DEFINED AT LINE 925 IN SCAN.asm
C_:                 05EC DEFINED AT LINE 927 IN SCAN.asm
D_:                 05EF DEFINED AT LINE 929 IN SCAN.asm
E_:                 05F2 DEFINED AT LINE 931 IN SCAN.asm
F_:                 05F5 DEFINED AT LINE 933 IN SCAN.asm
G_:                 05F8 DEFINED AT LINE 935 IN SCAN.asm
I_:                 05FB DEFINED AT LINE 937 IN SCAN.asm
K_:                 05FE DEFINED AT LINE 939 IN SCAN.asm
L_:                 0601 DEFINED AT LINE 941 IN SCAN.asm
M_:                 0604 DEFINED AT LINE 943 IN SCAN.asm
N_:                 0607 DEFINED AT LINE 945 IN SCAN.asm
O_:                 060A DEFINED AT LINE 947 IN SCAN.asm
P_:                 060D DEFINED AT LINE 949 IN SCAN.asm
R_:                 0610 DEFINED AT LINE 951 IN SCAN.asm
S_:                 0613 DEFINED AT LINE 953 IN SCAN.asm
U_:                 0616 DEFINED AT LINE 955 IN SCAN.asm
W_:                 0619 DEFINED AT LINE 957 IN SCAN.asm
X_:                 061C DEFINED AT LINE 959 IN SCAN.asm
DIV_:               061F DEFINED AT LINE 962 IN SCAN.asm
                    > USED AT LINE 1174 IN SCAN.asm
LAMBDA:             0624 DEFINED AT LINE 973 IN SCAN.asm
                    > USED AT LINE 923 IN SCAN.asm
LAMBDA1:            062A DEFINED AT LINE 977 IN SCAN.asm
                    > USED AT LINE 983 IN SCAN.asm
LAMBDA2:            0632 DEFINED AT LINE 984 IN SCAN.asm
DIV:                0639 DEFINED AT LINE 1002 IN SCAN.asm
                    > USED AT LINE 962 IN SCAN.asm
DIV1:               0643 DEFINED AT LINE 1012 IN SCAN.asm
                    > USED AT LINE 1025 IN SCAN.asm
DIV2:               0650 DEFINED AT LINE 1021 IN SCAN.asm
                    > USED AT LINE 1018 IN SCAN.asm
DIV3:               0651 DEFINED AT LINE 1023 IN SCAN.asm
                    > USED AT LINE 1020 IN SCAN.asm
DIV4:               0656 DEFINED AT LINE 1028 IN SCAN.asm
PAGE6:              0700 DEFINED AT LINE 1041 IN SCAN.asm
                    > USED AT LINE 71 IN SCAN.asm
ANOP_:              0700 DEFINED AT LINE 1043 IN SCAN.asm
CFETCH_:            0702 DEFINED AT LINE 1046 IN SCAN.asm
COMMENT_:           0709 DEFINED AT LINE 1053 IN SCAN.asm
                    > USED AT LINE 1057 IN SCAN.asm
CSTORE_:            0712 DEFINED AT LINE 1061 IN SCAN.asm
EMIT_:              0717 DEFINED AT LINE 1067 IN SCAN.asm
EXEC_:              071E DEFINED AT LINE 1073 IN SCAN.asm
EXEC1:              0723 DEFINED AT LINE 1076 IN SCAN.asm
                    > USED AT LINE 1074 IN SCAN.asm
PROMPT_:            0726 DEFINED AT LINE 1081 IN SCAN.asm
GO_:                072B DEFINED AT LINE 1086 IN SCAN.asm
                    > USED AT LINE 1204 IN SCAN.asm
GO1:                072C DEFINED AT LINE 1088 IN SCAN.asm
                    > USED AT LINE 747 IN SCAN.asm
GO2:                073B DEFINED AT LINE 1098 IN SCAN.asm
                    > USED AT LINE 1096 IN SCAN.asm
GO3:                073E DEFINED AT LINE 1101 IN SCAN.asm
                    > USED AT LINE 1091 IN SCAN.asm
INPORT_:            0740 DEFINED AT LINE 1104 IN SCAN.asm
NEWLN_:             074B DEFINED AT LINE 1114 IN SCAN.asm
OUTPORT_:           0750 DEFINED AT LINE 1118 IN SCAN.asm
PRNSTR_:            0759 DEFINED AT LINE 1127 IN SCAN.asm
PRNSTR:             0759 DEFINED AT LINE 1128 IN SCAN.asm
RPUSH_:             075F DEFINED AT LINE 1134 IN SCAN.asm
RPOP_:              0765 DEFINED AT LINE 1139 IN SCAN.asm
A:                  076B DEFINED AT LINE 1148 IN SCAN.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
                    > USED AT LINE 415 IN SCAN.asm
                    > USED AT LINE 421 IN SCAN.asm
                    > USED AT LINE 443 IN SCAN.asm
                    > USED AT LINE 444 IN SCAN.asm
                    > USED AT LINE 446 IN SCAN.asm
                    > USED AT LINE 447 IN SCAN.asm
                    > USED AT LINE 460 IN SCAN.asm
                    > USED AT LINE 476 IN SCAN.asm
                    > USED AT LINE 477 IN SCAN.asm
                    > USED AT LINE 511 IN SCAN.asm
                    > USED AT LINE 512 IN SCAN.asm
                    > USED AT LINE 541 IN SCAN.asm
                    > USED AT LINE 543 IN SCAN.asm
                    > USED AT LINE 546 IN SCAN.asm
                    > USED AT LINE 547 IN SCAN.asm
                    > USED AT LINE 553 IN SCAN.asm
                    > USED AT LINE 554 IN SCAN.asm
                    > USED AT LINE 555 IN SCAN.asm
                    > USED AT LINE 558 IN SCAN.asm
                    > USED AT LINE 590 IN SCAN.asm
                    > USED AT LINE 590 IN SCAN.asm
                    > USED AT LINE 591 IN SCAN.asm
                    > USED AT LINE 593 IN SCAN.asm
                    > USED AT LINE 594 IN SCAN.asm
                    > USED AT LINE 595 IN SCAN.asm
                    > USED AT LINE 596 IN SCAN.asm
                    > USED AT LINE 597 IN SCAN.asm
                    > USED AT LINE 598 IN SCAN.asm
                    > USED AT LINE 613 IN SCAN.asm
                    > USED AT LINE 615 IN SCAN.asm
                    > USED AT LINE 624 IN SCAN.asm
                    > USED AT LINE 626 IN SCAN.asm
                    > USED AT LINE 631 IN SCAN.asm
                    > USED AT LINE 637 IN SCAN.asm
                    > USED AT LINE 640 IN SCAN.asm
                    > USED AT LINE 642 IN SCAN.asm
                    > USED AT LINE 698 IN SCAN.asm
                    > USED AT LINE 700 IN SCAN.asm
                    > USED AT LINE 701 IN SCAN.asm
                    > USED AT LINE 704 IN SCAN.asm
                    > USED AT LINE 712 IN SCAN.asm
                    > USED AT LINE 714 IN SCAN.asm
                    > USED AT LINE 715 IN SCAN.asm
                    > USED AT LINE 723 IN SCAN.asm
                    > USED AT LINE 725 IN SCAN.asm
                    > USED AT LINE 726 IN SCAN.asm
                    > USED AT LINE 742 IN SCAN.asm
                    > USED AT LINE 754 IN SCAN.asm
                    > USED AT LINE 797 IN SCAN.asm
                    > USED AT LINE 867 IN SCAN.asm
                    > USED AT LINE 875 IN SCAN.asm
                    > USED AT LINE 892 IN SCAN.asm
                    > USED AT LINE 909 IN SCAN.asm
                    > USED AT LINE 916 IN SCAN.asm
                    > USED AT LINE 926 IN SCAN.asm
                    > USED AT LINE 978 IN SCAN.asm
                    > USED AT LINE 980 IN SCAN.asm
                    > USED AT LINE 1010 IN SCAN.asm
                    > USED AT LINE 1024 IN SCAN.asm
                    > USED AT LINE 1055 IN SCAN.asm
                    > USED AT LINE 1069 IN SCAN.asm
                    > USED AT LINE 1089 IN SCAN.asm
                    > USED AT LINE 1094 IN SCAN.asm
                    > USED AT LINE 1106 IN SCAN.asm
                    > USED AT LINE 1110 IN SCAN.asm
                    > USED AT LINE 1150 IN SCAN.asm
                    > USED AT LINE 1160 IN SCAN.asm
                    > USED AT LINE 1170 IN SCAN.asm
                    > USED AT LINE 1184 IN SCAN.asm
                    > USED AT LINE 1192 IN SCAN.asm
                    > USED AT LINE 1200 IN SCAN.asm
                    > USED AT LINE 1212 IN SCAN.asm
                    > USED AT LINE 1223 IN SCAN.asm
                    > USED AT LINE 1231 IN SCAN.asm
                    > USED AT LINE 1241 IN SCAN.asm
                    > USED AT LINE 1251 IN SCAN.asm
                    > USED AT LINE 1259 IN SCAN.asm
                    > USED AT LINE 1269 IN SCAN.asm
                    > USED AT LINE 1276 IN SCAN.asm
                    > USED AT LINE 1284 IN SCAN.asm
                    > USED AT LINE 1300 IN SCAN.asm
                    > USED AT LINE 1308 IN SCAN.asm
                    > USED AT LINE 1316 IN SCAN.asm
                    > USED AT LINE 1353 IN SCAN.asm
                    > USED AT LINE 1362 IN SCAN.asm
                    > USED AT LINE 1382 IN SCAN.asm
                    > USED AT LINE 1387 IN SCAN.asm
                    > USED AT LINE 1388 IN SCAN.asm
                    > USED AT LINE 1389 IN SCAN.asm
                    > USED AT LINE 1390 IN SCAN.asm
                    > USED AT LINE 1391 IN SCAN.asm
                    > USED AT LINE 1394 IN SCAN.asm
                    > USED AT LINE 1419 IN SCAN.asm
                    > USED AT LINE 1420 IN SCAN.asm
                    > USED AT LINE 1432 IN SCAN.asm
                    > USED AT LINE 1433 IN SCAN.asm
                    > USED AT LINE 1449 IN SCAN.asm
                    > USED AT LINE 1450 IN SCAN.asm
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
                    > USED AT LINE 5
                    > USED AT LINE 7
C:                  077B DEFINED AT LINE 1158 IN SCAN.asm
                    > USED AT LINE 421 IN SCAN.asm
                    > USED AT LINE 545 IN SCAN.asm
                    > USED AT LINE 547 IN SCAN.asm
                    > USED AT LINE 617 IN SCAN.asm
                    > USED AT LINE 631 IN SCAN.asm
                    > USED AT LINE 637 IN SCAN.asm
                    > USED AT LINE 928 IN SCAN.asm
                    > USED AT LINE 1007 IN SCAN.asm
                    > USED AT LINE 1013 IN SCAN.asm
                    > USED AT LINE 1018 IN SCAN.asm
                    > USED AT LINE 1019 IN SCAN.asm
                    > USED AT LINE 1027 IN SCAN.asm
                    > USED AT LINE 1106 IN SCAN.asm
                    > USED AT LINE 1107 IN SCAN.asm
                    > USED AT LINE 1108 IN SCAN.asm
                    > USED AT LINE 1110 IN SCAN.asm
                    > USED AT LINE 1120 IN SCAN.asm
                    > USED AT LINE 1121 IN SCAN.asm
                    > USED AT LINE 1123 IN SCAN.asm
                    > USED AT LINE 1124 IN SCAN.asm
                    > USED AT LINE 1350 IN SCAN.asm
                    > USED AT LINE 1396 IN SCAN.asm
                    > USED AT LINE 1425 IN SCAN.asm
D:                  078B DEFINED AT LINE 1168 IN SCAN.asm
                    > USED AT LINE 449 IN SCAN.asm
                    > USED AT LINE 578 IN SCAN.asm
                    > USED AT LINE 701 IN SCAN.asm
                    > USED AT LINE 715 IN SCAN.asm
                    > USED AT LINE 726 IN SCAN.asm
                    > USED AT LINE 746 IN SCAN.asm
                    > USED AT LINE 788 IN SCAN.asm
                    > USED AT LINE 849 IN SCAN.asm
                    > USED AT LINE 930 IN SCAN.asm
                    > USED AT LINE 1026 IN SCAN.asm
                    > USED AT LINE 1048 IN SCAN.asm
                    > USED AT LINE 1089 IN SCAN.asm
                    > USED AT LINE 1357 IN SCAN.asm
                    > USED AT LINE 1402 IN SCAN.asm
E:                  07A5 DEFINED AT LINE 1182 IN SCAN.asm
                    > USED AT LINE 408 IN SCAN.asm
                    > USED AT LINE 445 IN SCAN.asm
                    > USED AT LINE 446 IN SCAN.asm
                    > USED AT LINE 476 IN SCAN.asm
                    > USED AT LINE 584 IN SCAN.asm
                    > USED AT LINE 588 IN SCAN.asm
                    > USED AT LINE 591 IN SCAN.asm
                    > USED AT LINE 599 IN SCAN.asm
                    > USED AT LINE 609 IN SCAN.asm
                    > USED AT LINE 611 IN SCAN.asm
                    > USED AT LINE 659 IN SCAN.asm
                    > USED AT LINE 661 IN SCAN.asm
                    > USED AT LINE 664 IN SCAN.asm
                    > USED AT LINE 667 IN SCAN.asm
                    > USED AT LINE 676 IN SCAN.asm
                    > USED AT LINE 686 IN SCAN.asm
                    > USED AT LINE 698 IN SCAN.asm
                    > USED AT LINE 712 IN SCAN.asm
                    > USED AT LINE 723 IN SCAN.asm
                    > USED AT LINE 744 IN SCAN.asm
                    > USED AT LINE 786 IN SCAN.asm
                    > USED AT LINE 847 IN SCAN.asm
                    > USED AT LINE 932 IN SCAN.asm
                    > USED AT LINE 1027 IN SCAN.asm
                    > USED AT LINE 1049 IN SCAN.asm
                    > USED AT LINE 1064 IN SCAN.asm
                    > USED AT LINE 1090 IN SCAN.asm
                    > USED AT LINE 1120 IN SCAN.asm
                    > USED AT LINE 1124 IN SCAN.asm
                    > USED AT LINE 1356 IN SCAN.asm
                    > USED AT LINE 1401 IN SCAN.asm
F:                  07B0 DEFINED AT LINE 1190 IN SCAN.asm
                    > USED AT LINE 934 IN SCAN.asm
G:                  07BB DEFINED AT LINE 1198 IN SCAN.asm
                    > USED AT LINE 936 IN SCAN.asm
I:                  07D0 DEFINED AT LINE 1210 IN SCAN.asm
                    > USED AT LINE 938 IN SCAN.asm
K:                  07E0 DEFINED AT LINE 1220 IN SCAN.asm
                    > USED AT LINE 940 IN SCAN.asm
L:                  07EE DEFINED AT LINE 1229 IN SCAN.asm
                    > USED AT LINE 443 IN SCAN.asm
                    > USED AT LINE 444 IN SCAN.asm
                    > USED AT LINE 512 IN SCAN.asm
                    > USED AT LINE 514 IN SCAN.asm
                    > USED AT LINE 593 IN SCAN.asm
                    > USED AT LINE 594 IN SCAN.asm
                    > USED AT LINE 626 IN SCAN.asm
                    > USED AT LINE 699 IN SCAN.asm
                    > USED AT LINE 700 IN SCAN.asm
                    > USED AT LINE 713 IN SCAN.asm
                    > USED AT LINE 714 IN SCAN.asm
                    > USED AT LINE 724 IN SCAN.asm
                    > USED AT LINE 725 IN SCAN.asm
                    > USED AT LINE 797 IN SCAN.asm
                    > USED AT LINE 840 IN SCAN.asm
                    > USED AT LINE 942 IN SCAN.asm
                    > USED AT LINE 1007 IN SCAN.asm
                    > USED AT LINE 1069 IN SCAN.asm
                    > USED AT LINE 1107 IN SCAN.asm
                    > USED AT LINE 1108 IN SCAN.asm
                    > USED AT LINE 1121 IN SCAN.asm
                    > USED AT LINE 1123 IN SCAN.asm
                    > USED AT LINE 1350 IN SCAN.asm
                    > USED AT LINE 1387 IN SCAN.asm
                    > USED AT LINE 1388 IN SCAN.asm
                    > USED AT LINE 1401 IN SCAN.asm
                    > USED AT LINE 1432 IN SCAN.asm
                    > USED AT LINE 1433 IN SCAN.asm
                    > USED AT LINE 1458 IN SCAN.asm
                    > USED AT LINE 1462 IN SCAN.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
M:                  07FE DEFINED AT LINE 1239 IN SCAN.asm
                    > USED AT LINE 895 IN SCAN.asm
                    > USED AT LINE 911 IN SCAN.asm
                    > USED AT LINE 944 IN SCAN.asm
N:                  080E DEFINED AT LINE 1249 IN SCAN.asm
                    > USED AT LINE 946 IN SCAN.asm
O:                  0819 DEFINED AT LINE 1257 IN SCAN.asm
                    > USED AT LINE 948 IN SCAN.asm
P:                  0829 DEFINED AT LINE 1267 IN SCAN.asm
                    > USED AT LINE 950 IN SCAN.asm
R:                  0834 DEFINED AT LINE 1274 IN SCAN.asm
                    > USED AT LINE 952 IN SCAN.asm
S:                  083F DEFINED AT LINE 1282 IN SCAN.asm
                    > USED AT LINE 954 IN SCAN.asm
U:                  085E DEFINED AT LINE 1298 IN SCAN.asm
                    > USED AT LINE 956 IN SCAN.asm
W:                  0869 DEFINED AT LINE 1306 IN SCAN.asm
                    > USED AT LINE 958 IN SCAN.asm
X:                  0874 DEFINED AT LINE 1314 IN SCAN.asm
                    > USED AT LINE 960 IN SCAN.asm
                    > USED AT LINE 1221 IN SCAN.asm
CASE_:              087F DEFINED AT LINE 1322 IN SCAN.asm
                    > USED AT LINE 1162 IN SCAN.asm
CLOSURE_:           087F DEFINED AT LINE 1323 IN SCAN.asm
                    > USED AT LINE 1164 IN SCAN.asm
DEF_:               087F DEFINED AT LINE 1324 IN SCAN.asm
                    > USED AT LINE 1172 IN SCAN.asm
FILTER_:            087F DEFINED AT LINE 1325 IN SCAN.asm
                    > USED AT LINE 1194 IN SCAN.asm
GET_:               087F DEFINED AT LINE 1326 IN SCAN.asm
                    > USED AT LINE 1202 IN SCAN.asm
IF_:                087F DEFINED AT LINE 1327 IN SCAN.asm
                    > USED AT LINE 1214 IN SCAN.asm
LET_:               087F DEFINED AT LINE 1328 IN SCAN.asm
                    > USED AT LINE 1233 IN SCAN.asm
MAP_:               087F DEFINED AT LINE 1329 IN SCAN.asm
                    > USED AT LINE 1243 IN SCAN.asm
PRINT_:             087F DEFINED AT LINE 1330 IN SCAN.asm
                    > USED AT LINE 1271 IN SCAN.asm
SCAN_:              087F DEFINED AT LINE 1331 IN SCAN.asm
                    > USED AT LINE 1286 IN SCAN.asm
SET_:               087F DEFINED AT LINE 1332 IN SCAN.asm
                    > USED AT LINE 1288 IN SCAN.asm
SHIFT_:             087F DEFINED AT LINE 1333 IN SCAN.asm
                    > USED AT LINE 1290 IN SCAN.asm
UNDROP_:            087F DEFINED AT LINE 1334 IN SCAN.asm
                    > USED AT LINE 1302 IN SCAN.asm
WHILE_:             087F DEFINED AT LINE 1335 IN SCAN.asm
                    > USED AT LINE 1310 IN SCAN.asm
MUL:                0881 DEFINED AT LINE 1345 IN SCAN.asm
                    > USED AT LINE 801 IN SCAN.asm
MUL2:               088B DEFINED AT LINE 1354 IN SCAN.asm
                    > USED AT LINE 1363 IN SCAN.asm
NUM:                089D DEFINED AT LINE 1380 IN SCAN.asm
                    > USED AT LINE 921 IN SCAN.asm
NUM1:               08A1 DEFINED AT LINE 1384 IN SCAN.asm
                    > USED AT LINE 1408 IN SCAN.asm
NUM2:               08BB DEFINED AT LINE 1410 IN SCAN.asm
                    > USED AT LINE 1396 IN SCAN.asm
                    > USED AT LINE 1398 IN SCAN.asm
                    > USED AT LINE 1425 IN SCAN.asm
                    > USED AT LINE 1427 IN SCAN.asm
HEX:                08BF DEFINED AT LINE 1415 IN SCAN.asm
                    > USED AT LINE 792 IN SCAN.asm
HEX1:               08C2 DEFINED AT LINE 1417 IN SCAN.asm
                    > USED AT LINE 1434 IN SCAN.asm
HEX2:               08CA DEFINED AT LINE 1423 IN SCAN.asm
                    > USED AT LINE 1421 IN SCAN.asm
PROMPT:             08DC DEFINED AT LINE 1440 IN SCAN.asm
                    > USED AT LINE 402 IN SCAN.asm
                    > USED AT LINE 1082 IN SCAN.asm
PUTSTR0:            08E5 DEFINED AT LINE 1445 IN SCAN.asm
                    > USED AT LINE 1451 IN SCAN.asm
PUTSTR:             08E9 DEFINED AT LINE 1448 IN SCAN.asm
                    > USED AT LINE 572 IN SCAN.asm
                    > USED AT LINE 1130 IN SCAN.asm
RPUSH:              08EE DEFINED AT LINE 1454 IN SCAN.asm
                    > USED AT LINE 565 IN SCAN.asm
                    > USED AT LINE 1097 IN SCAN.asm
                    > USED AT LINE 1136 IN SCAN.asm
RPOP:               08F9 DEFINED AT LINE 1461 IN SCAN.asm
                    > USED AT LINE 778 IN SCAN.asm
                    > USED AT LINE 816 IN SCAN.asm
                    > USED AT LINE 1140 IN SCAN.asm
RPOP2:              0903 DEFINED AT LINE 1466 IN SCAN.asm
CRLF:               0904 DEFINED AT LINE 1469 IN SCAN.asm
                    > USED AT LINE 475 IN SCAN.asm
                    > USED AT LINE 1115 IN SCAN.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 411 IN SCAN.asm
                    > USED AT LINE 458 IN SCAN.asm
                    > USED AT LINE 467 IN SCAN.asm
                    > USED AT LINE 484 IN SCAN.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 521 IN SCAN.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 65 IN SCAN.asm
                    > USED AT LINE 388 IN SCAN.asm
                    > USED AT LINE 391 IN SCAN.asm
                    > USED AT LINE 396 IN SCAN.asm
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
LSTACK:             1A80 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 519 IN SCAN.asm
OPCODES:            1B00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 537 IN SCAN.asm
CTRLCODES:          1B80 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 442 IN SCAN.asm
ALTCODES:           1B80 DEFINED AT LINE 17 IN ram.asm
MINTVARS:           1C00 DEFINED AT LINE 21 IN ram.asm
VLOOPSP:            1C30 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 520 IN SCAN.asm
VBYTEMODE:          1C32 DEFINED AT LINE 24 IN ram.asm
TBPTR:              1C34 DEFINED AT LINE 25 IN ram.asm
RST08:              1C36 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1C38 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1C3A DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1C3C DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1C3E DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1C40 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1C42 DEFINED AT LINE 33 IN ram.asm
INTVEC:             1C44 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1C46 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1C48 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1C4A DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            1C80 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 524 IN SCAN.asm
VS0:                1C80 DEFINED AT LINE 42 IN ram.asm
VBASE16:            1C82 DEFINED AT LINE 43 IN ram.asm
VTIBPTR:            1C84 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 405 IN SCAN.asm
                    > USED AT LINE 441 IN SCAN.asm
                    > USED AT LINE 454 IN SCAN.asm
                    > USED AT LINE 483 IN SCAN.asm
VNS:                1C86 DEFINED AT LINE 45 IN ram.asm
VLASTDEF:           1C88 DEFINED AT LINE 46 IN ram.asm
VALTPAGE:           1C8C DEFINED AT LINE 48 IN ram.asm
VHEAPPTR:           1C8E DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 975 IN SCAN.asm
                    > USED AT LINE 986 IN SCAN.asm
MINTDATA:           1CC0 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 528 IN SCAN.asm
                    > USED AT LINE 592 IN SCAN.asm
HEAP:               1D28 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 72 IN SCAN.asm
TESTSSTART:         4000 DEFINED AT LINE 17
                    > USED AT LINE 10
EXPECTM_0_1945S29:  403B DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1946S29:  4077 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1947S29:  40B5 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1948S29:  40F5 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1949S29:  4135 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1950S29:  4179 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1951S29:  41BD DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1952S29:  4201 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1953S29:  4245 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1954S29:  4289 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1955S29:  42CD DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1956S29:  4311 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1957S29:  435D DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1958S29:  43A7 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1959S29:  43EB DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1960S29:  442F DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1961S29:  4473 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1962S29:  44B7 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1963S29:  4503 DEFINED AT LINE 22
                    > USED AT LINE 9
