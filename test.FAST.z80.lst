0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 POP HL
0000                 PUSH HL
0000                 LD DE,val1
0000                 OR A
0000                 SBC HL,DE
0000                 LD A,L
0000                 OR H
0000                 JR Z,expect%%M
0000                 CALL printStr
0000                 .cstr msg1,"\r\nActual: "
0000                 CALL printdec
0000                 CALL printStr
0000                 .cstr "\r\nExpected: "
0000                 LD HL,val1
0000                 CALL printdec
0000                 HALT
0000                 .cstr
0000                expect%%M:
0000                 POP HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 CALL enter
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 1C               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 1C               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 1C               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 1C               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 1C               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 1C               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 1C               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 46 1C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 48 1C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4A 1C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 36 1C               LD   (RST08),HL   
0094   22 38 1C               LD   (RST10),HL   
0097   22 3A 1C               LD   (RST18),HL   
009A   22 3C 1C               LD   (RST20),HL   
009D   22 3E 1C               LD   (RST28),HL   
00A0   22 40 1C               LD   (RST30),HL   
00A3   22 44 1C               LD   (INTVEC),HL   
00A6   22 46 1C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 48 1C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4A 1C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 57 03               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;       SCAN Programming Language for the Z80
00CC                             ; 
00CC                             ;       by John Hardy 2022
00CC                             ; 
00CC                             ;       Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00CC                             ; 
00CC                             ;       see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                LSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   1   ; not FF, for SCAN
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; for an empty macro, ctrl-<something>=macro, ie ctrl-h = backspace macros (in SCAN)
00CC                MINTDATASIZE:   EQU   26*2*2   ; A..Z, a..z words
00CC                .macro LITDAT,len
00CC                             ; 
00CC                 DB len
00CC                .endm
00CC                 
00CC                .macro REPDAT,len,data
00CC                             ; 
00CC                 DB (len | $80)
00CC                 DB data
00CC                .endm
00CC                 
00CC                .macro ENDDAT,
00CC                             ; 
00CC                 DB 0
00CC                .endm
00CC                 
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put SCAN code from here	
0180                             ; **************************************************************************
0180                             ; Macros must be written in SCAN and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; backsp_:
0180                             ;         DB "\\c@0=0=(\\c@1-\\c!`\b \b`);"	;ctr-h  , \ needed inside control code, escape it with anothe \
0180                             ;                                             	; \c tib add of tib, not visible
0180                             ;                                          	;@ fetch val
0180                             ;                                           	;1- reduce
0180                             ;                                           	;c! store
0180                             ;                                           	;`\b move cursor back, terminal command
0180                             ;                                           	;the space between the \b is to over write
0180                             ;                                             	;
0180                             ; 
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                IALTVARS:      ; value copied into tables
0180   00 1A                  DW   dStack   ; a vS0 start of datastack			
0182   00 00                  DW   FALSE   ; b vBase16
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   41 00                  DW   65   ; e vLastDef "A" last command u defined
018A   00 00                  DW   0   ; f
018C   00 08                  DW   page6   ; g 256 bytes limits
018E   28 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                IOPCODES:      
0190                          ;*Macro unroll:  LITDAT 4		; macros for compression
0190   04                     DB   4   ; macros for compression
0191   97                     DB   lsb(exit_)   ;   NUL get least signif byte of address exit_
0192   B7                     DB   lsb(nop_)   ;   SOH
0193   B7                     DB   lsb(nop_)   ;   STX
0194   94                     DB   lsb(etx_)   ;   ETX
0195                          ;*Macro unroll:  LITDAT 29
0195   1D                     DB   29   
0196                             ; REPDAT 29, lsb(nop_)
0196   B7                     DB   lsb(nop_)   ; 
0197   B7                     DB   lsb(nop_)   ; 
0198   B7                     DB   lsb(nop_)   ; 
0199   B7                     DB   lsb(nop_)   ; 
019A   B7                     DB   lsb(nop_)   ; 
019B   B7                     DB   lsb(nop_)   ; 
019C   B7                     DB   lsb(nop_)   ; 
019D   B7                     DB   lsb(nop_)   ; 
019E   B7                     DB   lsb(nop_)   ; 
019F   B7                     DB   lsb(nop_)   ; 
01A0   B7                     DB   lsb(nop_)   ; 
01A1   B7                     DB   lsb(nop_)   ; 
01A2   B7                     DB   lsb(nop_)   ; 
01A3   B7                     DB   lsb(nop_)   ; 
01A4   B7                     DB   lsb(nop_)   ; 
01A5   B7                     DB   lsb(nop_)   ; 
01A6   B7                     DB   lsb(nop_)   ; 
01A7   B7                     DB   lsb(nop_)   ; 
01A8   B7                     DB   lsb(nop_)   ; 
01A9   B7                     DB   lsb(nop_)   ; 
01AA   B7                     DB   lsb(nop_)   ; 
01AB   B7                     DB   lsb(nop_)   ; 
01AC   B7                     DB   lsb(nop_)   ; 
01AD   B7                     DB   lsb(nop_)   ; 
01AE   B7                     DB   lsb(nop_)   ; 
01AF   B7                     DB   lsb(nop_)   ; 
01B0   B7                     DB   lsb(nop_)   ; 
01B1   B7                     DB   lsb(nop_)   ; 
01B2   B7                     DB   lsb(nop_)   ; 
01B3                          ;*Macro unroll:  LITDAT 15
01B3   0F                     DB   15   
01B4   B7                     DB   lsb(nop_)   ;       !
01B5   B7                     DB   lsb(nop_)   ;       "
01B6   B7                     DB   lsb(nop_)   ;       #
01B7   B7                     DB   lsb(nop_)   ;       $
01B8   B7                     DB   lsb(nop_)   ;       %
01B9   B7                     DB   lsb(nop_)   ;       &
01BA   B7                     DB   lsb(nop_)   ;       '
01BB   B7                     DB   lsb(nop_)   ;       (
01BC   B7                     DB   lsb(nop_)   ;       )
01BD   B7                     DB   lsb(nop_)   ;       *
01BE   B7                     DB   lsb(nop_)   ;       +
01BF   B7                     DB   lsb(nop_)   ;       ,
01C0   B7                     DB   lsb(nop_)   ;       -
01C1   B7                     DB   lsb(nop_)   ;       .
01C2   B7                     DB   lsb(nop_)   ;       /	;/MOD
01C3                             ; REPDAT 10, lsb(num_)		; 10 x repeat lsb of add to the num routine
01C3                          ;*Macro unroll:  LITDAT 10
01C3   0A                     DB   10   
01C4   1E                     DB   lsb(num_)   ; 
01C5   1E                     DB   lsb(num_)   ; 
01C6   1E                     DB   lsb(num_)   ; 
01C7   1E                     DB   lsb(num_)   ; 
01C8   1E                     DB   lsb(num_)   ; 
01C9   1E                     DB   lsb(num_)   ; 
01CA   1E                     DB   lsb(num_)   ; 
01CB   1E                     DB   lsb(num_)   ; 
01CC   1E                     DB   lsb(num_)   ; 
01CD   1E                     DB   lsb(num_)   ; 
01CE                          ;*Macro unroll:  LITDAT 7
01CE   07                     DB   7   
01CF   B7                     DB   lsb(nop_)   ;    :
01D0   B7                     DB   lsb(nop_)   ;    ;
01D1   B7                     DB   lsb(nop_)   ;    <
01D2   B7                     DB   lsb(nop_)   ;    =
01D3   B7                     DB   lsb(nop_)   ;    >
01D4   B7                     DB   lsb(nop_)   ;    ?   ( -- val )  read a char from input
01D5   B7                     DB   lsb(nop_)   ;    @
01D6                             ; REPDAT 26, lsb(call_)		; call a command A, B ....Z
01D6                          ;*Macro unroll:  LITDAT 26
01D6   1A                     DB   26   
01D7   71                     DB   lsb(call_)   ;  A
01D8   71                     DB   lsb(call_)   ;  B
01D9   71                     DB   lsb(call_)   ;  C
01DA   71                     DB   lsb(call_)   ;  D
01DB   71                     DB   lsb(call_)   ;  E
01DC   71                     DB   lsb(call_)   ;  F
01DD   71                     DB   lsb(call_)   ;  G
01DE   71                     DB   lsb(call_)   ;  H
01DF   71                     DB   lsb(call_)   ;  I
01E0   71                     DB   lsb(call_)   ;  J
01E1   71                     DB   lsb(call_)   ;  K
01E2   71                     DB   lsb(call_)   ;  L
01E3   71                     DB   lsb(call_)   ;  M
01E4   71                     DB   lsb(call_)   ;  N
01E5   71                     DB   lsb(call_)   ;  O
01E6   71                     DB   lsb(call_)   ;  P
01E7   71                     DB   lsb(call_)   ;  Q
01E8   71                     DB   lsb(call_)   ;  R
01E9   71                     DB   lsb(call_)   ;  S
01EA   71                     DB   lsb(call_)   ;  T
01EB   71                     DB   lsb(call_)   ;  U
01EC   71                     DB   lsb(call_)   ;  V
01ED   71                     DB   lsb(call_)   ;  W
01EE   71                     DB   lsb(call_)   ;  X
01EF   71                     DB   lsb(call_)   ;  Y
01F0   71                     DB   lsb(call_)   ;  Z
01F1                          ;*Macro unroll:  LITDAT 6
01F1   06                     DB   6   
01F2   B7                     DB   lsb(nop_)   ;    [
01F3   B7                     DB   lsb(nop_)   ;    \
01F4   B7                     DB   lsb(nop_)   ;    ]
01F5   B7                     DB   lsb(nop_)   ;    ^
01F6   B7                     DB   lsb(nop_)   ;    _
01F7   B7                     DB   lsb(nop_)   ;    `    	; for printing `hello`
01F8                             ; REPDAT 26, lsb(var_)		; a b c .....z
01F8                          ;*Macro unroll:  LITDAT 26
01F8   1A                     DB   26   
01F9   B7                     DB   lsb(nop_)   ;    _
01FA   B7                     DB   lsb(nop_)   ;    _
01FB   B7                     DB   lsb(nop_)   ;    _
01FC   B7                     DB   lsb(nop_)   ;    _
01FD   B7                     DB   lsb(nop_)   ;    _
01FE   B7                     DB   lsb(nop_)   ;    _
01FF   B7                     DB   lsb(nop_)   ;    _
0200   B7                     DB   lsb(nop_)   ;    _
0201   B7                     DB   lsb(nop_)   ;    _
0202   B7                     DB   lsb(nop_)   ;    _
0203   B7                     DB   lsb(nop_)   ;    _
0204   B7                     DB   lsb(nop_)   ;    _
0205   B7                     DB   lsb(nop_)   ;    _
0206   B7                     DB   lsb(nop_)   ;    _
0207   B7                     DB   lsb(nop_)   ;    _
0208   B7                     DB   lsb(nop_)   ;    _
0209   B7                     DB   lsb(nop_)   ;    _
020A   B7                     DB   lsb(nop_)   ;    _
020B   B7                     DB   lsb(nop_)   ;    _
020C   B7                     DB   lsb(nop_)   ;    _
020D   B7                     DB   lsb(nop_)   ;    _
020E   B7                     DB   lsb(nop_)   ;    _
020F   B7                     DB   lsb(nop_)   ;    _
0210   B7                     DB   lsb(nop_)   ;    _
0211   B7                     DB   lsb(nop_)   ;    _
0212   B7                     DB   lsb(nop_)   ;    _
0213                             ; DB lsb(a_)      ;   a
0213                             ; DB lsb(var_)    ;   b
0213                             ; DB lsb(c_)      ;   c
0213                             ; DB lsb(d_)      ;   d
0213                             ; DB lsb(e_)      ;   e
0213                             ; DB lsb(f_)      ;   f
0213                             ; DB lsb(g_)      ;   g
0213                             ; DB lsb(var_)    ;   h
0213                             ; DB lsb(i_)      ;   i
0213                             ; DB lsb(var_)    ;   j
0213                             ; DB lsb(k_)      ;   k
0213                             ; DB lsb(l_)      ;   l
0213                             ; DB lsb(m_)      ;   m
0213                             ; DB lsb(m_)      ;   n
0213                             ; DB lsb(o_)      ;   o
0213                             ; DB lsb(p_)      ;   p
0213                             ; DB lsb(var_)    ;   q
0213                             ; DB lsb(r_)      ;   r
0213                             ; DB lsb(s_)      ;   s
0213                             ; DB lsb(var_)    ;   t
0213                             ; DB lsb(u_)      ;   u
0213                             ; DB lsb(var_)    ;   v
0213                             ; DB lsb(w_)      ;   w
0213                             ; DB lsb(x_)      ;   x
0213                             ; DB lsb(var_)    ;   y
0213                             ; DB lsb(var_)    ;   z
0213                          ;*Macro unroll:  LITDAT 5
0213   05                     DB   5   
0214   B7                     DB   lsb(nop_)   ;    {
0215   B7                     DB   lsb(nop_)   ;    |
0216   B7                     DB   lsb(nop_)   ;    }
0217   B7                     DB   lsb(nop_)   ;    ~ ( a b c -- b c a ) rotate
0218   B7                     DB   lsb(nop_)   ;    DEL	; eg 10000()
0219                          ;*Macro unroll:  LITDAT 32
0219   20                     DB   32   
021A   00                     DB   lsb(EMPTY)   ; NUL ^@
021B   00                     DB   lsb(EMPTY)   ; SOH ^A  1
021C   00                     DB   lsb(EMPTY)   ; STX ^B  2
021D   00                     DB   lsb(EMPTY)   ; ETX ^C  3
021E   00                     DB   lsb(EMPTY)   ; EOT ^D  4
021F   00                     DB   lsb(EMPTY)   ; ENQ ^E  5
0220   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0221   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0222   00                     DB   lsb(EMPTY)   ; BS  ^H  8
0223   00                     DB   lsb(EMPTY)   ; TAB ^I  9
0224   00                     DB   lsb(EMPTY)   ; LF  ^J 10
0225   00                     DB   lsb(EMPTY)   ; VT  ^K 11
0226   00                     DB   lsb(EMPTY)   ; FF  ^L 12
0227   00                     DB   lsb(EMPTY)   ; CR  ^M 13
0228   00                     DB   lsb(EMPTY)   ; SO  ^N 14
0229   00                     DB   lsb(EMPTY)   ; SI  ^O 15
022A   00                     DB   lsb(EMPTY)   ; DLE ^P 16
022B   00                     DB   lsb(EMPTY)   ; ^Q
022C   00                     DB   lsb(EMPTY)   ; ^R
022D   00                     DB   lsb(EMPTY)   ; ^S
022E   00                     DB   lsb(EMPTY)   ; ^T
022F   00                     DB   lsb(EMPTY)   ; ^U
0230   00                     DB   lsb(EMPTY)   ; ^V
0231   00                     DB   lsb(EMPTY)   ; ^W
0232   00                     DB   lsb(EMPTY)   ; ^X
0233   00                     DB   lsb(EMPTY)   ; ^Y
0234   00                     DB   lsb(EMPTY)   ; ^Z
0235   00                     DB   lsb(EMPTY)   ; ^[
0236   00                     DB   lsb(EMPTY)   ; ^\
0237   00                     DB   lsb(EMPTY)   ; ^]
0238   00                     DB   lsb(EMPTY)   ; ^^
0239   00                     DB   lsb(EMPTY)   ; ^_
023A                          ;*Macro unroll:  LITDAT 5
023A   05                     DB   5   
023B   00                     DB   lsb(aNop_)   ;a0    SP  				;space
023C   00                     DB   lsb(aNop_)   ;a1    \!       			; this is a bug shud be lsb(cstore_)
023D   00                     DB   lsb(aNop_)   ;a2    \"  				
023E   00                     DB   lsb(aNop_)   ;a3    \#  utility command		; table of special routines ie #5 etc				
023F   00                     DB   lsb(aNop_)   ;a4    \$  prints a newline to output	
0240                             ; REPDAT 3, lsb(aNop_)
0240                          ;*Macro unroll:  LITDAT 3
0240   03                     DB   3   
0241   00                     DB   lsb(aNop_)   ; 
0242   00                     DB   lsb(aNop_)   ; 
0243   00                     DB   lsb(aNop_)   ; 
0244                          ;*Macro unroll:  LITDAT 8
0244   08                     DB   8   
0245   00                     DB   lsb(aNop_)   ;a8    \(  ( b -- )
0246   00                     DB   lsb(aNop_)   ;a9    \)
0247   00                     DB   lsb(aNop_)   ;aa    \*
0248   00                     DB   lsb(aNop_)   ;ab    \+
0249   00                     DB   lsb(aNop_)   ;ac    \,  ( b -- ) prints a char
024A   00                     DB   lsb(aNop_)   ;ad    \-
024B   00                     DB   lsb(aNop_)   ;ae    \.  ( b -- ) prints a string from add term by null char
024C   00                     DB   lsb(aNop_)   ;af    \/
024D                             ; REPDAT 10, lsb(aNop_)
024D                          ;*Macro unroll:  LITDAT 10
024D   0A                     DB   10   
024E   00                     DB   lsb(aNop_)   ; 
024F   00                     DB   lsb(aNop_)   ; 
0250   00                     DB   lsb(aNop_)   ; 
0251   00                     DB   lsb(aNop_)   ; 
0252   00                     DB   lsb(aNop_)   ; 
0253   00                     DB   lsb(aNop_)   ; 
0254   00                     DB   lsb(aNop_)   ; 
0255   00                     DB   lsb(aNop_)   ; 
0256   00                     DB   lsb(aNop_)   ; 
0257   00                     DB   lsb(aNop_)   ; 
0258                          ;*Macro unroll:  LITDAT 7
0258   07                     DB   7   
0259   00                     DB   lsb(aNop_)   ;ba    \:	return add of a anon def, \: 1 2 3;    \\ ret add of this
025A   00                     DB   lsb(aNop_)   ;bb    \;
025B   00                     DB   lsb(aNop_)   ;bc    \<  ( port -- val )
025C   00                     DB   lsb(aNop_)   ;bd    \=
025D   00                     DB   lsb(aNop_)   ;be    \>  ( val port -- )
025E   00                     DB   lsb(aNop_)   ;bf    \?
025F   00                     DB   lsb(aNop_)   ;c0    \@      byte fetch
0260                             ; REPDAT 26, lsb(aNop_)
0260                          ;*Macro unroll:  LITDAT 26
0260   1A                     DB   26   
0261   00                     DB   lsb(aNop_)   ; 
0262   00                     DB   lsb(aNop_)   ; 
0263   00                     DB   lsb(aNop_)   ; 
0264   00                     DB   lsb(aNop_)   ; 
0265   00                     DB   lsb(aNop_)   ; 
0266   00                     DB   lsb(aNop_)   ; 
0267   00                     DB   lsb(aNop_)   ; 
0268   00                     DB   lsb(aNop_)   ; 
0269   00                     DB   lsb(aNop_)   ; 
026A   00                     DB   lsb(aNop_)   ; 
026B   00                     DB   lsb(aNop_)   ; 
026C   00                     DB   lsb(aNop_)   ; 
026D   00                     DB   lsb(aNop_)   ; 
026E   00                     DB   lsb(aNop_)   ; 
026F   00                     DB   lsb(aNop_)   ; 
0270   00                     DB   lsb(aNop_)   ; 
0271   00                     DB   lsb(aNop_)   ; 
0272   00                     DB   lsb(aNop_)   ; 
0273   00                     DB   lsb(aNop_)   ; 
0274   00                     DB   lsb(aNop_)   ; 
0275   00                     DB   lsb(aNop_)   ; 
0276   00                     DB   lsb(aNop_)   ; 
0277   00                     DB   lsb(aNop_)   ; 
0278   00                     DB   lsb(aNop_)   ; 
0279   00                     DB   lsb(aNop_)   ; 
027A   00                     DB   lsb(aNop_)   ; 
027B                          ;*Macro unroll:  LITDAT 6
027B   06                     DB   6   
027C   00                     DB   lsb(aNop_)   ;     \[
027D   00                     DB   lsb(aNop_)   ;     \\  comment text, skips reading until end of line
027E   00                     DB   lsb(aNop_)   ;     \]
027F   00                     DB   lsb(aNop_)   ;     \^  ( -- ? ) execute SCAN definition a is address of SCAN code
0280   00                     DB   lsb(aNop_)   ;       \_  ( b -- ) conditional early return - stop everything
0281   00                     DB   lsb(aNop_)   ;     \`  ( -- adr ) defines a string \` string ` then use \. to prt
0282                             ; REPDAT 8, lsb(altVar_)  ;e1	\a...\h
0282                          ;*Macro unroll:  LITDAT 8
0282   08                     DB   8   
0283   00                     DB   lsb(aNop_)   
0284   00                     DB   lsb(aNop_)   
0285   00                     DB   lsb(aNop_)   
0286   00                     DB   lsb(aNop_)   
0287   00                     DB   lsb(aNop_)   
0288   00                     DB   lsb(aNop_)   
0289   00                     DB   lsb(aNop_)   
028A   00                     DB   lsb(aNop_)   
028B                          ;*Macro unroll:  LITDAT 2
028B   02                     DB   2   
028C   00                     DB   lsb(aNop_)   ; returns index variable of current loop
028D   00                     DB   lsb(aNop_)   ; returns index variable of outer loop     \i+6
028E                             ; REPDAT 16, lsb(altVar_)		; \k...\z
028E                          ;*Macro unroll:  LITDAT 16
028E   10                     DB   16   
028F   00                     DB   lsb(aNop_)   
0290   00                     DB   lsb(aNop_)   
0291   00                     DB   lsb(aNop_)   
0292   00                     DB   lsb(aNop_)   
0293   00                     DB   lsb(aNop_)   
0294   00                     DB   lsb(aNop_)   
0295   00                     DB   lsb(aNop_)   
0296   00                     DB   lsb(aNop_)   
0297   00                     DB   lsb(aNop_)   
0298   00                     DB   lsb(aNop_)   
0299   00                     DB   lsb(aNop_)   
029A   00                     DB   lsb(aNop_)   
029B   00                     DB   lsb(aNop_)   
029C   00                     DB   lsb(aNop_)   
029D   00                     DB   lsb(aNop_)   
029E   00                     DB   lsb(aNop_)   
029F                          ;*Macro unroll:  LITDAT 5
029F   05                     DB   5   
02A0   00                     DB   lsb(aNop_)   ;       { ( -- n ) pop from SCAN return stack
02A1   00                     DB   lsb(aNop_)   ; 
02A2   00                     DB   lsb(aNop_)   ;       } ( n -- ) push to return stack
02A3   00                     DB   lsb(aNop_)   ;       ~ ( b -- ) conditional break from loop
02A4   00                     DB   lsb(aNop_)   ;       DEL
02A5                          ;*Macro unroll:  ENDDAT
02A5   00                     DB   0   
02A6                ETX:         ;=12
02A6   21 00 E6               LD   HL,-DSTACK   
02A9   39                     ADD   HL,SP   
02AA   30 03                  JR   NC,etx1   
02AC   31 00 1A               LD   SP,DSTACK   
02AF                ETX1:        
02AF   18 15                  JR   interpret   
02B1                START:       
02B1   31 00 1A               LD   SP,DSTACK   ; start of SCAN
02B4   CD 57 03               CALL   init   ; setups
02B7   CD AA 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
02BA   53 43 41 4E 20 56 30 2E 30 0D 0A 00 .CSTR   "SCAN V0.0\r\n"   
02C6                INTERPRET:      
02C6   CD C6 08               CALL   prompt   
02C9   01 00 00               LD   BC,0   ; load BC with offset into TIB, decide char into tib or execute or control
02CC   ED 43 84 1C            LD   (vTIBPtr),BC   
02D0                INTERPRET2:      ; calc nesting (a macro might have changed it)
02D0   1E 00                  LD   E,0   ; initilize nesting value
02D2   C5                     PUSH   BC   ; save offset into TIB,
02D3                             ; BC is also the count of chars in TIB
02D3   21 00 18               LD   HL,TIB   ; HL is start of TIB
02D6   18 06                  JR   interpret4   
02D8                INTERPRET3:      
02D8   7E                     LD   A,(HL)   ; A = char in TIB
02D9   23                     INC   HL   ; inc pointer into TIB
02DA   0B                     DEC   BC   ; dec count of chars in TIB
02DB   CD 12 04               CALL   nesting   ; update nesting value
02DE                INTERPRET4:      
02DE   79                     LD   A,C   ; is count zero?
02DF   B0                     OR   B   
02E0   20 F6                  JR   NZ,interpret3   ; if not loop
02E2   C1                     POP   BC   ; restore offset into TIB
02E3                             ; *******************************************************************
02E3                             ; Wait for a character from the serial input (keyboard)
02E3                             ; and store it in the text buffer. Keep accepting characters,
02E3                             ; increasing the instruction pointer BC - until a newline received.
02E3                             ; *******************************************************************
02E3                WAITCHAR:      
02E3   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
02E6   FE 20                  CP   $20   ; compare to space
02E8   30 25                  JR   NC,waitchar1   ; if >= space, if below 20 set cary flag
02EA   FE 00                  CP   $0   ; is it end of string? null end of string
02EC   28 45                  JR   Z,waitchar4   
02EE   FE 0D                  CP   "\r"   ; carriage return? ascii 13
02F0   28 2B                  JR   Z,waitchar3   ; if anything else its macro/control
02F2                             ; LD D,0
02F2                MACRO:       ;=25
02F2   ED 43 84 1C            LD   (vTIBPtr),BC   
02F6   21 80 1B               LD   HL,ctrlCodes   
02F9   85                     ADD   A,L   ;look up key of macros
02FA   6F                     LD   L,A   
02FB   5E                     LD   E,(HL)   
02FC   7B                     LD   A,E   
02FD   B7                     OR   A   
02FE   28 09                  JR   Z,macro1   
0300   16 01                  LD   D,msb(macros)   
0302   D5                     PUSH   DE   
0303   CD A1 03               CALL   ENTER   ;SCAN go operation and jump to it
0306   5C 5E 00               .CSTR   "\\^"   
0309                MACRO1:      
0309   ED 4B 84 1C            LD   BC,(vTIBPtr)   
030D   18 C1                  JR   interpret2   
030F                WAITCHAR1:      
030F   21 00 18               LD   HL,TIB   
0312   09                     ADD   HL,BC   
0313   77                     LD   (HL),A   ; store the character in textbuf
0314   03                     INC   BC   
0315   CD 85 00               CALL   putchar   ; echo character to screen
0318   CD 12 04               CALL   nesting   
031B   18 C6                  JR   waitchar   ; wait for next character
031D                WAITCHAR3:      
031D   21 00 18               LD   HL,TIB   
0320   09                     ADD   HL,BC   
0321   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0323   23                     INC   HL   
0324   36 0A                  LD   (HL),"\n"   
0326   23                     INC   HL   ; ????
0327   03                     INC   BC   
0328   03                     INC   BC   
0329   CD EE 08               CALL   crlf   ; echo character to screen
032C   7B                     LD   A,E   ; if zero nesting append and ETX after \r
032D   B7                     OR   A   
032E   20 B3                  JR   NZ,waitchar   
0330   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
0332   03                     INC   BC   
0333                WAITCHAR4:      
0333   ED 43 84 1C            LD   (vTIBPtr),BC   
0337   01 00 18               LD   BC,TIB   ; Instructions stored on heap at address HERE, we pressed enter
033A   0B                     DEC   BC   
033B                             ; ********************************************************************************
033B                             ; 
033B                             ; Dispatch Routine.
033B                             ; 
033B                             ; Get the next character and form a 1 byte jump address
033B                             ; 
033B                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
033B                             ; jump to the selected function.
033B                             ; 
033B                             ; Individual handler routines will deal with each category:
033B                             ; 
033B                             ; 1. Detect characters A-Z and jump to the User Command handler routine
033B                             ; 
033B                             ; 2. Detect characters a-z and jump to the variable handler routine
033B                             ; 
033B                             ; 3. All other characters are punctuation and cause a jump to the associated
033B                             ; primitive code.
033B                             ; 
033B                             ; Instruction Pointer IP BC is incremented
033B                             ; 
033B                             ; *********************************************************************************
033B                NEXT:        ;=9
033B   03                     INC   BC   ;       Increment the IP
033C   0A                     LD   A,(BC)   ;       Get the next character and dispatch
033D   6F                     LD   L,A   ;       Index into table
033E   26 1B                  LD   H,msb(opcodes)   ;       Start address of jump table
0340   6E                     LD   L,(HL)   ;       get low jump address
0341   26 05                  LD   H,msb(page4)   ;       Load H with the 1st page address
0343   E9                     JP   (HL)   ;       Jump to routine
0344                             ; ARRAY compilation routine
0344                COMPNEXT:      ;=20
0344   D1                     POP   DE   ; DE = return address
0345   2A 8E 1C               LD   HL,(vHeapPtr)   ; load heap ptr
0348   73                     LD   (HL),E   ; store lsb
0349   3A 32 1C               LD   A,(vByteMode)   
034C   23                     INC   HL   
034D   B7                     OR   A   
034E   20 02                  JR   NZ,compNext1   
0350   72                     LD   (HL),D   
0351   23                     INC   HL   
0352                COMPNEXT1:      
0352   22 8E 1C               LD   (vHeapPtr),HL   ; save heap ptr
0355   18 E4                  JR   NEXT   
0357                INIT:        ;=68
0357   21 80 1A               LD   HL,LSTACK   
035A   22 30 1C               LD   (vLoopSP),HL   ; Loop stack pointer stored in memory
035D   DD 21 80 19            LD   IX,RSTACK   
0361   FD 21 3B 03            LD   IY,NEXT   ; IY provides a faster jump to NEXT
0365   21 80 01               LD   HL,ialtVars   
0368   11 80 1C               LD   DE,altVars   
036B   01 10 00               LD   BC,8 * 2   
036E   ED B0                  LDIR      
0370   21 C0 1C               LD   HL,mintData   ; init namespaces to 0 using LDIR
0373   54 5D                  LD   DE,HL   
0375   13                     INC   DE   
0376   36 00                  LD   (HL),0   
0378   01 68 00               LD   BC,mintDataSize   
037B   ED B0                  LDIR      
037D                INITOPS:      
037D   21 90 01               LD   HL,iOpcodes   
0380   11 00 1B               LD   DE,opcodes   
0383   01 00 01               LD   BC,256   
0386                INITOPS1:      
0386   7E                     LD   A,(HL)   
0387   23                     INC   HL   
0388   CB 27                  SLA   A   
038A   C8                     RET   Z   
038B   38 09                  JR   C,initOps2   
038D   CB 3F                  SRL   A   
038F   4F                     LD   C,A   
0390   06 00                  LD   B,0   
0392   ED B0                  LDIR      
0394   18 F0                  JR   initOps1   
0396                INITOPS2:      
0396   CB 3F                  SRL   A   
0398   47                     LD   B,A   
0399   7E                     LD   A,(HL)   
039A   23                     INC   HL   
039B                INITOPS2A:      
039B   12                     LD   (DE),A   
039C   13                     INC   DE   
039D   10 FC                  DJNZ   initOps2a   
039F   18 E5                  JR   initOps1   
03A1                ENTER:       ;=9
03A1   60 69                  LD   HL,BC   
03A3   CD D8 08               CALL   rpush   ; save Instruction Pointer
03A6   C1                     POP   BC   
03A7   0B                     DEC   BC   
03A8   FD E9                  JP   (IY)   
03AA                PRINTSTR:      ;=14
03AA   E3                     EX   (SP),HL   ; swap			
03AB   CD D3 08               CALL   putStr   
03AE   23                     INC   HL   ; inc past null
03AF   E3                     EX   (SP),HL   ; put it back	
03B0   C9                     RET      
03B1                LOOKUPREF:      
03B1   16 00                  LD   D,0   
03B3                LOOKUPREF0:      
03B3   FE 61                  CP   "a"   
03B5   30 06                  JR   NC,lookupRef2   
03B7                LOOKUPREF1:      
03B7   D6 41                  SUB   "A"   
03B9   1E 00                  LD   E,0   
03BB   18 04                  JR   lookupRef3   
03BD                LOOKUPREF2:      
03BD   D6 61                  SUB   "a"   
03BF   1E 34                  LD   E,26*2   
03C1                LOOKUPREF3:      
03C1   87                     ADD   A,A   
03C2   83                     ADD   A,E   
03C3   21 C0 1C               LD   HL,mintData   
03C6   85                     ADD   A,L   
03C7   6F                     LD   L,A   
03C8   3E 00                  LD   A,0   
03CA   8C                     ADC   A,H   
03CB   67                     LD   H,A   
03CC   AF                     XOR   A   
03CD   B3                     OR   E   ; sets Z flag if A-Z
03CE   C9                     RET      
03CF                PRINTDEC:      ;=36
03CF   11 F0 D8               LD   DE,-10000   ; SCAN ., 5th location of a dev number
03D2   CD E8 03               CALL   printdec1   ; text book method look it up
03D5   11 18 FC               LD   DE,-1000   
03D8   CD E8 03               CALL   printdec1   
03DB   11 9C FF               LD   DE,-100   
03DE   CD E8 03               CALL   printdec1   
03E1   1E F6                  LD   E,-10   
03E3   CD E8 03               CALL   printdec1   
03E6   1E FF                  LD   E,-1   
03E8                PRINTDEC1:      
03E8   3E 2F                  LD   A,"0"-1   
03EA                PRINTDEC2:      
03EA   3C                     INC   A   
03EB   19                     ADD   HL,DE   
03EC   38 FC                  JR   C,printdec2   
03EE   ED 52                  SBC   HL,DE   
03F0   C3 85 00               JP   putchar   
03F3                PRINTHEX:      ;=31
03F3                             ; Display HL as a 16-bit number in hex.
03F3   C5                     PUSH   BC   ; preserve the IP
03F4   7C                     LD   A,H   
03F5   CD FE 03               CALL   printhex2   
03F8   7D                     LD   A,L   
03F9   CD FE 03               CALL   printhex2   
03FC   C1                     POP   BC   
03FD   C9                     RET      
03FE                PRINTHEX2:      
03FE   4F                     LD   C,A   
03FF   1F                     RRA      
0400   1F                     RRA      
0401   1F                     RRA      
0402   1F                     RRA      
0403   CD 07 04               CALL   printhex3   
0406   79                     LD   A,C   
0407                PRINTHEX3:      
0407   E6 0F                  AND   0x0F   
0409   C6 90                  ADD   A,0x90   
040B   27                     DAA      
040C   CE 40                  ADC   A,0x40   
040E   27                     DAA      
040F   C3 85 00               JP   putchar   
0412                             ; **************************************************************************
0412                             ; calculate nesting value
0412                             ; A is char to be tested,
0412                             ; E is the nesting value (initially 0)
0412                             ; E is increased by ( and [
0412                             ; E is decreased by ) and ]
0412                             ; E has its bit 7 toggled by `
0412                             ; limited to 127 levels
0412                             ; **************************************************************************
0412                NESTING:      ;=44
0412   FE 60                  CP   "`"   
0414   20 0A                  JR   NZ,nesting1   
0416   CB 7B                  BIT   7,E   
0418   28 03                  JR   Z,nesting1a   
041A   CB BB                  RES   7,E   
041C   C9                     RET      
041D                NESTING1A:      
041D   CB FB                  SET   7,E   
041F   C9                     RET      
0420                NESTING1:      
0420   CB 7B                  BIT   7,E   
0422   C0                     RET   NZ   
0423   FE 3A                  CP   ":"   
0425   28 08                  JR   Z,nesting2   
0427   FE 5B                  CP   "["   
0429   28 04                  JR   Z,nesting2   
042B   FE 28                  CP   "("   
042D   20 02                  JR   NZ,nesting3   
042F                NESTING2:      
042F   1C                     INC   E   
0430   C9                     RET      
0431                NESTING3:      
0431   FE 3B                  CP   ";"   
0433   28 07                  JR   Z,nesting4   
0435   FE 5D                  CP   "]"   
0437   28 03                  JR   Z,nesting4   
0439   FE 29                  CP   ")"   
043B   C0                     RET   NZ   
043C                NESTING4:      
043C   1D                     DEC   E   
043D   C9                     RET      
043E                             ; **********************************************************************			
043E                             ; Page 4 primitive routines
043E                             ; **********************************************************************
043E                          ALIGN   $100   
0500                PAGE4:       
0500                A_:          
0500   C3 33 05               JP   a   
0503                C_:          
0503   C3 43 05               JP   c   
0506                D_:          
0506   C3 53 05               JP   d   
0509                E_:          
0509   C3 6D 05               JP   e   
050C                F_:          
050C   C3 78 05               JP   f   
050F                G_:          
050F   C3 83 05               JP   g   
0512                I_:          
0512   C3 98 05               JP   i   
0515                K_:          
0515   C3 A8 05               JP   k   
0518                L_:          
0518   C3 B6 05               JP   l   
051B                M_:          
051B   C3 C6 05               JP   m   
051E                N_:          
051E   C3 D6 05               JP   n   
0521                O_:          
0521   C3 E1 05               JP   o   
0524                P_:          
0524   C3 F1 05               JP   p   
0527                S_:          
0527   C3 07 06               JP   s   
052A                U_:          
052A   C3 26 06               JP   u   
052D                W_:          
052D   C3 31 06               JP   w   
0530                X_:          
0530   C3 3C 06               JP   x   
0533                A:           
0533   03                     INC   BC   
0534   0A                     LD   A,(BC)   
0535   FE 64                  CP   "d"   
0537   CA 6B 06               JP   Z,add_   
053A   FE 6E                  CP   "n"   
053C   CA 49 06               JP   Z,and_   
053F   0B                     DEC   BC   
0540   C3 17 07               JP   var_   
0543                C:           
0543   03                     INC   BC   
0544   0A                     LD   A,(BC)   
0545   FE 61                  CP   "a"   
0547   CA 47 06               JP   Z,case_   
054A   FE 6C                  CP   "l"   
054C   CA 47 06               JP   Z,closure_   
054F   0B                     DEC   BC   
0550   C3 17 07               JP   var_   
0553                D:           
0553   03                     INC   BC   
0554   0A                     LD   A,(BC)   
0555   FE 65                  CP   "e"   
0557   CA 47 06               JP   Z,def_   
055A   FE 69                  CP   "i"   
055C   CA 23 07               JP   Z,div_   
055F   FE 72                  CP   "r"   
0561   CA 8C 06               JP   Z,drop_   
0564   FE 75                  CP   "u"   
0566   CA 8F 06               JP   Z,dup_   
0569   0B                     DEC   BC   
056A   C3 17 07               JP   var_   
056D                E:           
056D   03                     INC   BC   
056E   0A                     LD   A,(BC)   
056F   FE 71                  CP   "q"   
0571   CA F6 06               JP   Z,eq_   
0574   0B                     DEC   BC   
0575   C3 17 07               JP   var_   
0578                F:           
0578   03                     INC   BC   
0579   0A                     LD   A,(BC)   
057A   FE 69                  CP   "i"   
057C   CA 47 06               JP   Z,filter_   
057F   0B                     DEC   BC   
0580   C3 17 07               JP   var_   
0583                G:           
0583   03                     INC   BC   
0584   0A                     LD   A,(BC)   
0585   FE 65                  CP   "e"   
0587   CA 47 06               JP   Z,get_   
058A   FE 6F                  CP   "o"   
058C   CA 2B 08               JP   Z,go_   
058F   FE 74                  CP   "t"   
0591   CA 02 07               JP   Z,gt_   
0594   0B                     DEC   BC   
0595   C3 17 07               JP   var_   
0598                I:           
0598   03                     INC   BC   
0599   0A                     LD   A,(BC)   
059A   FE 66                  CP   "f"   
059C   CA 47 06               JP   Z,if_   
059F   FE 6E                  CP   "n"   
05A1   CA 66 06               JP   Z,inv_   
05A4   0B                     DEC   BC   
05A5   C3 17 07               JP   var_   
05A8                K:           
05A8   C3 3C 06               JP   x   
05AB   03                     INC   BC   
05AC   0A                     LD   A,(BC)   
05AD   FE 65                  CP   "e"   
05AF   CA AB 06               JP   Z,key_   
05B2   0B                     DEC   BC   
05B3   C3 17 07               JP   var_   
05B6                L:           
05B6   03                     INC   BC   
05B7   0A                     LD   A,(BC)   
05B8   FE 65                  CP   "e"   
05BA   CA 47 06               JP   Z,let_   
05BD   FE 74                  CP   "t"   
05BF   CA 06 07               JP   Z,lt_   
05C2   0B                     DEC   BC   
05C3   C3 17 07               JP   var_   
05C6                M:           
05C6   03                     INC   BC   
05C7   0A                     LD   A,(BC)   
05C8   FE 61                  CP   "a"   
05CA   CA 47 06               JP   Z,map_   
05CD   FE 75                  CP   "u"   
05CF   CA B4 06               JP   Z,mul_   
05D2   0B                     DEC   BC   
05D3   C3 17 07               JP   var_   
05D6                N:           
05D6   03                     INC   BC   
05D7   0A                     LD   A,(BC)   
05D8   FE 65                  CP   "e"   
05DA   CA F0 06               JP   Z,neg_   
05DD   0B                     DEC   BC   
05DE   C3 17 07               JP   var_   
05E1                O:           
05E1   03                     INC   BC   
05E2   0A                     LD   A,(BC)   
05E3   FE 76                  CP   "v"   
05E5   CA BA 06               JP   Z,over_   
05E8   FE 72                  CP   "r"   
05EA   CA 54 06               JP   Z,or_   
05ED   0B                     DEC   BC   
05EE   C3 17 07               JP   var_   
05F1                P:           
05F1   03                     INC   BC   
05F2   0A                     LD   A,(BC)   
05F3   FE 72                  CP   "r"   
05F5   CA 47 06               JP   Z,print_   
05F8   0B                     DEC   BC   
05F9   C3 17 07               JP   var_   
05FC                R:           
05FC   03                     INC   BC   
05FD   0A                     LD   A,(BC)   
05FE   FE 6F                  CP   "o"   
0600   CA C8 06               JP   Z,rot_   
0603   0B                     DEC   BC   
0604   C3 17 07               JP   var_   
0607                S:           
0607   03                     INC   BC   
0608   0A                     LD   A,(BC)   
0609   FE 63                  CP   "c"   
060B   CA 47 06               JP   Z,scan_   
060E   FE 65                  CP   "e"   
0610   CA 47 06               JP   Z,set_   
0613   FE 68                  CP   "h"   
0615   CA 47 06               JP   Z,shift_   
0618   FE 75                  CP   "u"   
061A   CA E8 06               JP   Z,sub_   
061D   FE 77                  CP   "w"   
061F   CA E3 06               JP   Z,swap_   
0622   0B                     DEC   BC   
0623   C3 17 07               JP   var_   
0626                U:           
0626   03                     INC   BC   
0627   0A                     LD   A,(BC)   
0628   FE 6E                  CP   "n"   
062A   CA 47 06               JP   Z,undrop_   
062D   0B                     DEC   BC   
062E   C3 17 07               JP   var_   
0631                W:           
0631   03                     INC   BC   
0632   0A                     LD   A,(BC)   
0633   FE 68                  CP   "h"   
0635   CA 47 06               JP   Z,while_   
0638   0B                     DEC   BC   
0639   C3 17 07               JP   var_   
063C                X:           
063C   03                     INC   BC   
063D   0A                     LD   A,(BC)   
063E   FE 78                  CP   "x"   
0640   CA 5D 06               JP   Z,xor_   
0643   0B                     DEC   BC   
0644   C3 17 07               JP   var_   
0647                CASE_:       
0647                CLOSURE_:      
0647                DEF_:        
0647                FILTER_:      
0647                GET_:        
0647                IF_:         
0647                LET_:        
0647                MAP_:        
0647                PRINT_:      
0647                SCAN_:       
0647                SET_:        
0647                SHIFT_:      
0647                UNDROP_:      
0647                WHILE_:      
0647   FD E9                  JP   (IY)   
0649                AND_:        
0649   D1                     POP   DE   ;     Bitwise AND the top 2 elements of the stack
064A   E1                     POP   HL   ; 
064B   7B                     LD   A,E   ; 
064C   A5                     AND   L   ; 
064D   6F                     LD   L,A   ; 
064E   7A                     LD   A,D   ; 
064F   A4                     AND   H   ; 
0650                AND1:        
0650   67                     LD   H,A   ; 
0651   E5                     PUSH   HL   ; 
0652   FD E9                  JP   (IY)   ; 
0654                             ; 
0654                OR_:         
0654   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
0655   E1                     POP   HL   
0656   7B                     LD   A,E   
0657   B5                     OR   L   
0658   6F                     LD   L,A   
0659   7A                     LD   A,D   
065A   B4                     OR   H   
065B   18 F3                  JR   and1   
065D                XOR_:        
065D   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
065E                XOR1:        
065E   E1                     POP   HL   
065F   7B                     LD   A,E   
0660   AD                     XOR   L   
0661   6F                     LD   L,A   
0662   7A                     LD   A,D   
0663   AC                     XOR   H   
0664   18 EA                  JR   and1   
0666                INV_:        ; Bitwise INVert the top member of the stack
0666   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0669   18 F3                  JR   xor1   
066B                ADD_:        ; Add the top 2 members of the stack
066B   D1                     POP   DE   
066C   E1                     POP   HL   
066D   19                     ADD   HL,DE   
066E   E5                     PUSH   HL   
066F   FD E9                  JP   (IY)   
0671                CALL_:       
0671   0A                     LD   A,(BC)   
0672   CD B7 03               CALL   lookupRef1   
0675   5E                     LD   E,(HL)   
0676   23                     INC   HL   
0677   56                     LD   D,(HL)   
0678   C3 2C 08               JP   go1   
067B                DOT_:        
067B   E1                     POP   HL   
067C   CD CF 03               CALL   printdec   
067F                DOT2:        
067F   3E 20                  LD   A," "   
0681   CD 85 00               CALL   putChar   
0684   FD E9                  JP   (IY)   
0686                HDOT_:       ; print hexadecimal
0686   E1                     POP   HL   
0687   CD F3 03               CALL   printhex   
068A   18 F3                  JR   dot2   
068C                DROP_:       ; Discard the top member of the stack
068C   E1                     POP   HL   
068D   FD E9                  JP   (IY)   
068F                DUP_:        
068F   E1                     POP   HL   ; Duplicate the top member of the stack
0690   E5                     PUSH   HL   
0691   E5                     PUSH   HL   
0692   FD E9                  JP   (IY)   
0694                ETX_:        
0694   C3 A6 02               JP   ETX   
0697                EXIT_:       
0697   03                     INC   BC   ; store offests into a table of bytes, smaller
0698   50 59                  LD   DE,BC   
069A   CD E3 08               CALL   rpop   ; Restore Instruction pointer
069D   44 4D                  LD   BC,HL   
069F   EB                     EX   DE,HL   
06A0   E9                     JP   (HL)   
06A1                FETCH_:      ; Fetch the value from the address placed on the top of the stack
06A1   E1                     POP   HL   
06A2                FETCH1:      
06A2   5E                     LD   E,(HL)   
06A3   23                     INC   HL   
06A4   56                     LD   D,(HL)   
06A5   D5                     PUSH   DE   
06A6   FD E9                  JP   (IY)   
06A8   C3 A9 08     HEX_:     JP   hex   
06AB                KEY_:        
06AB   CD 81 00               CALL   getchar   
06AE   26 00                  LD   H,0   
06B0   6F                     LD   L,A   
06B1   E5                     PUSH   HL   
06B2   FD E9                  JP   (IY)   
06B4   C3 6B 08     MUL_:     JP   mul   
06B7                NOP_:        
06B7   C3 3B 03               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
06BA                OVER_:       
06BA   E1                     POP   HL   ; Duplicate 2nd element of the stack
06BB   D1                     POP   DE   
06BC   D5                     PUSH   DE   
06BD   E5                     PUSH   HL   
06BE   D5                     PUSH   DE   ; And push it to top of stack
06BF   FD E9                  JP   (IY)   
06C1                RET_:        
06C1   CD E3 08               CALL   rpop   ; Restore Instruction pointer
06C4   44 4D                  LD   BC,HL   
06C6   FD E9                  JP   (IY)   
06C8                ROT_:        ; a b c -- b c a
06C8   D1                     POP   DE   ; a b                   de = c
06C9   E1                     POP   HL   ; a                     hl = b
06CA   E3                     EX   (SP),HL   ; b                     hl = a
06CB   D5                     PUSH   DE   ; b c
06CC   E5                     PUSH   HL   ; b c a
06CD   FD E9                  JP   (IY)   
06CF                             ;  Left shift { is multiply by 2		
06CF                SHL_:        
06CF   E1                     POP   HL   ; Duplicate the top member of the stack
06D0   29                     ADD   HL,HL   
06D1   E5                     PUSH   HL   ; shift left fallthrough into add_
06D2   FD E9                  JP   (IY)   ; 
06D4                             ;  Right shift } is a divide by 2		
06D4                SHR_:        
06D4   E1                     POP   HL   ; Get the top member of the stack
06D5                SHR1:        
06D5   CB 3C                  SRL   H   
06D7   CB 1D                  RR   L   
06D9   E5                     PUSH   HL   
06DA   FD E9                  JP   (IY)   ; 
06DC                STORE_:      ; Store the value at the address placed on the top of the stack
06DC   E1                     POP   HL   
06DD   D1                     POP   DE   
06DE   73                     LD   (HL),E   
06DF   23                     INC   HL   
06E0   72                     LD   (HL),D   
06E1   FD E9                  JP   (IY)   
06E3                SWAP_:       ; a b -- b a Swap the top 2 elements of the stack
06E3   E1                     POP   HL   
06E4   E3                     EX   (SP),HL   
06E5   E5                     PUSH   HL   
06E6   FD E9                  JP   (IY)   
06E8                SUB_:        ; Subtract the value 2nd on stack from top of stack
06E8   D1                     POP   DE   ; 
06E9   E1                     POP   HL   ;      Entry point for INVert
06EA                SUB2:        
06EA   A7                     AND   A   ;      Entry point for NEGate
06EB   ED 52                  SBC   HL,DE   ; 15t
06ED   E5                     PUSH   HL   ; 
06EE   FD E9                  JP   (IY)   ; 
06F0                             ; 5
06F0                NEG_:        
06F0   21 00 00               LD   HL,0   ; NEGate the value on top of stack (2's complement)
06F3   D1                     POP   DE   ; 
06F4   18 F4                  JR   sub2   ; use the SUBtract routine
06F6                EQ_:         
06F6   E1                     POP   HL   
06F7   D1                     POP   DE   
06F8   A7                     AND   A   ; reset the carry flag
06F9   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
06FB   28 16                  JR   Z,equal   
06FD   21 00 00               LD   HL,0   
0700   18 12                  JR   less   ; HL = 1
0702                GT_:         
0702   D1                     POP   DE   
0703   E1                     POP   HL   
0704   18 02                  JR   cmp_   
0706                LT_:         
0706   E1                     POP   HL   
0707   D1                     POP   DE   
0708                CMP_:        
0708   A7                     AND   A   ; reset the carry flag
0709   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
070B   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
070D   21 00 00               LD   HL,0   
0710   FA 14 07               JP   M,less   
0713                EQUAL:       
0713   2C                     INC   L   ; HL = 1
0714                LESS:        
0714   E5                     PUSH   HL   
0715   FD E9                  JP   (IY)   
0717                VAR_:        
0717   0A                     LD   A,(BC)   
0718   CD BD 03               CALL   lookupRef2   
071B   E5                     PUSH   HL   
071C   FD E9                  JP   (IY)   
071E   C3 87 08     NUM_:     JP   num   
0721                LAMBDA_:      
0721   18 05                  JR   lambda   
0723   18 18        DIV_:     JR   div   
0725                             ;*******************************************************************
0725                             ; Page 5 primitive routines
0725                             ;*******************************************************************
0725                             ;falls through
0725   E5                     PUSH   HL   
0726   FD E9                  JP   (IY)   
0728                LAMBDA:      ;=
0728   03                     INC   BC   
0729   ED 5B 8E 1C            LD   DE,(vHeapPtr)   ; start of defintion
072D   D5                     PUSH   DE   
072E                LAMBDA1:      ; Skip to end of definition
072E   0A                     LD   A,(BC)   ; Get the next character
072F   03                     INC   BC   ; Point to next character
0730   12                     LD   (DE),A   
0731   13                     INC   DE   
0732   FE 29                  CP   ")"   ; Is it a semicolon
0734   20 F8                  JR   NZ,lambda1   ; get the next element
0736                LAMBDA2:      
0736   0B                     DEC   BC   
0737   ED 53 8E 1C            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
073B   FD E9                  JP   (IY)   
073D                             ; ********************************************************************
073D                             ; 16-bit division subroutine.
073D                             ; 
073D                             ; BC: divisor, DE: dividend, HL: remainder
073D                             ; *********************************************************************
073D                             ; This divides DE by BC, storing the result in DE, remainder in HL
073D                             ; *********************************************************************
073D                             ; 1382 cycles
073D                             ; 35 bytes (reduced from 48)
073D                             ; 
073D                DIV:         ;=34
073D   D1                     POP   DE   ; get first value
073E   E1                     POP   HL   ; get 2nd value
073F   C5                     PUSH   BC   ; Preserve the IP
0740   44                     LD   B,H   ; BC = 2nd value
0741   4D                     LD   C,L   
0742                             ; 
0742   21 00 00               LD   HL,0   ; Zero the remainder
0745   3E 10                  LD   A,16   ; Loop counter
0747                DIV1:        ;shift the bits from BC (numerator) into HL (accumulator)
0747   CB 21                  SLA   C   
0749   CB 10                  RL   B   
074B   ED 6A                  ADC   HL,HL   
074D   ED 52                  SBC   HL,DE   ;Check if remainder >= denominator (HL>=DE)
074F   38 03                  JR   C,div2   
0751   0C                     INC   C   
0752   18 01                  JR   div3   
0754                DIV2:        ; remainder is not >= denominator, so we have to add DE back to HL
0754   19                     ADD   hl,de   
0755                DIV3:        
0755   3D                     DEC   A   
0756   20 EF                  JR   NZ,div1   
0758   50                     LD   D,B   ; Result from BC to DE
0759   59                     LD   E,C   
075A                DIV4:        
075A   C1                     POP   BC   ; Restore the IP
075B   D5                     PUSH   DE   ; Push Result
075C   E5                     PUSH   HL   ; Push remainder
075D   FD E9                  JP   (IY)   
075F                             ;=57
075F                             ; **************************************************************************
075F                             ; Page 6 Alt primitives
075F                             ; **************************************************************************
075F                          ALIGN   $100   
0800                PAGE6:       
0800                ANOP_:       
0800   FD E9                  JP   (IY)   
0802                CFETCH_:      
0802   E1                     POP   HL   
0803   16 00                  LD   D,0   
0805   5E                     LD   E,(HL)   
0806   D5                     PUSH   DE   
0807   FD E9                  JP   (IY)   
0809                COMMENT_:      
0809   03                     INC   BC   ; point to next char
080A   0A                     LD   A,(BC)   
080B   FE 0D                  CP   "\r"   ; terminate at cr
080D   20 FA                  JR   NZ,comment_   
080F   0B                     DEC   BC   
0810   FD E9                  JP   (IY)   
0812                CSTORE_:      
0812   E1                     POP   HL   
0813   D1                     POP   DE   
0814   73                     LD   (HL),E   
0815   FD E9                  JP   (IY)   
0817                EMIT_:       
0817   E1                     POP   HL   
0818   7D                     LD   A,L   
0819   CD 85 00               CALL   putchar   
081C   FD E9                  JP   (IY)   
081E                EXEC_:       
081E   CD 23 08               CALL   exec1   
0821   FD E9                  JP   (IY)   
0823                EXEC1:       
0823   E1                     POP   HL   
0824   E3                     EX   (SP),HL   
0825   E9                     JP   (HL)   
0826                PROMPT_:      
0826   CD C6 08               CALL   prompt   
0829   FD E9                  JP   (IY)   
082B                GO_:         ;\^
082B   D1                     POP   DE   
082C                GO1:         
082C   7A                     LD   A,D   ; skip if destination address is null
082D   B3                     OR   E   
082E   28 0E                  JR   Z,go3   
0830   60 69                  LD   HL,BC   
0832   03                     INC   BC   ; read next char from source
0833   0A                     LD   A,(BC)   ; if ; to tail call optimise
0834   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
0836   28 03                  JR   Z,go2   
0838   CD D8 08               CALL   rpush   ; save Instruction Pointer
083B                GO2:         
083B   42 4B                  LD   BC,DE   
083D   0B                     DEC   BC   
083E                GO3:         
083E   FD E9                  JP   (IY)   
0840                INPORT_:      ; \<
0840   E1                     POP   HL   
0841   79                     LD   A,C   
0842   4D                     LD   C,L   
0843   ED 68                  IN   L,(C)   
0845   26 00                  LD   H,0   
0847   4F                     LD   C,A   
0848   E5                     PUSH   HL   
0849   FD E9                  JP   (IY)   
084B                NEWLN_:      
084B   CD EE 08               CALL   crlf   
084E   FD E9                  JP   (IY)   
0850                OUTPORT_:      
0850   E1                     POP   HL   
0851   59                     LD   E,C   
0852   4D                     LD   C,L   
0853   E1                     POP   HL   
0854   ED 69                  OUT   (C),L   
0856   4B                     LD   C,E   
0857   FD E9                  JP   (IY)   
0859                PRNSTR_:      
0859                PRNSTR:      
0859   E1                     POP   HL   
085A   CD D3 08               CALL   putStr   
085D   FD E9                  JP   (IY)   
085F                RPUSH_:      
085F   E1                     POP   HL   
0860   CD D8 08               CALL   rpush   
0863   FD E9                  JP   (IY)   
0865                RPOP_:       
0865   CD E3 08               CALL   rpop   
0868   E5                     PUSH   HL   
0869   FD E9                  JP   (IY)   
086B                             ; **************************************************************************
086B                             ; Page 6 primitive routines continued  (page 7)
086B                             ; **************************************************************************
086B                             ; falls through to following page
086B                             ;*******************************************************************
086B                             ; Page 5 primitive routines continued
086B                             ;*******************************************************************
086B                             ; ********************************************************************
086B                             ; 16-bit multiply
086B                MUL:         ;=19
086B   D1                     POP   DE   ; get first value
086C   E1                     POP   HL   
086D   C5                     PUSH   BC   ; Preserve the IP
086E   44                     LD   B,H   ; BC = 2nd value
086F   4D                     LD   C,L   
0870   21 00 00               LD   HL,0   
0873   3E 10                  LD   A,16   
0875                MUL2:        
0875   29                     ADD   HL,HL   
0876   CB 13                  RL   E   
0878   CB 12                  RL   D   
087A   30 04                  JR   NC,$+6   
087C   09                     ADD   HL,BC   
087D   30 01                  JR   NC,$+3   
087F   13                     INC   DE   
0880   3D                     DEC   A   
0881   20 F2                  JR   NZ,mul2   
0883   C1                     POP   BC   ; Restore the IP
0884   E5                     PUSH   HL   ; Put the product on the stack - stack bug fixed 2/12/21
0885   FD E9                  JP   (IY)   
0887                             ; ********************************************************************************
0887                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
0887                             ; Read the first character.
0887                             ;			
0887                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
0887                             ; and then added into the L register. (HL forms a 16-bit accumulator)
0887                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
0887                             ; and then add in the next digit. Repeat this until a non-number character is
0887                             ; detected. Add in the final digit so that HL contains the converted number.
0887                             ; Push HL onto the stack and proceed to the dispatch routine.
0887                             ; ********************************************************************************
0887                NUM:         ;=23
0887   21 00 00               LD   HL,$0000   ;     Clear HL to accept the number
088A   0A                     LD   A,(BC)   ;     Get the character which is a numeral
088B                NUM1:        ; corrected KB 24/11/21
088B   D6 30                  SUB   $30   ;       Form decimal digit
088D   85                     ADD   A,L   ;       Add into bottom of HL
088E   6F                     LD   L,A   ; 
088F   3E 00                  LD   A,00   ;       Clear A
0891   8C                     ADC   A,H   ; Add with carry H-reg
0892   67                     LD   H,A   ; Put result in H-reg
0893   03                     INC   BC   ;       Increment IP
0894   0A                     LD   A,(BC)   ;       and get the next character
0895   FE 30                  CP   $30   ;       Less than $30
0897   38 0C                  JR   C,num2   ;       Not a number / end of number
0899   FE 3A                  CP   $3A   ;       Greater or equal to $3A
089B   30 08                  JR   NC,num2   ;       Not a number / end of number
089D                             ; Multiply digit(s) in HL by 10
089D   29                     ADD   HL,HL   ;        2X
089E   5D                     LD   E,L   ;        LD DE,HL
089F   54                     LD   D,H   ; 
08A0   29                     ADD   HL,HL   ;        4X
08A1   29                     ADD   HL,HL   ;        8X
08A2   19                     ADD   HL,DE   ;        2X  + 8X  = 10X
08A3                             ; 52t cycles
08A3   18 E6                  JR   num1   
08A5                NUM2:        
08A5   0B                     DEC   BC   
08A6   E5                     PUSH   HL   ; Put the number on the stack
08A7   FD E9                  JP   (IY)   ; and process the next character
08A9                HEX:         ;=26
08A9   21 00 00               LD   HL,0   ; Clear HL to accept the number
08AC                HEX1:        
08AC   03                     INC   BC   
08AD   0A                     LD   A,(BC)   ; Get the character which is a numeral
08AE   CB 77                  BIT   6,A   ; is it uppercase alpha?
08B0   28 02                  JR   Z,hex2   ; no a decimal
08B2   D6 07                  SUB   7   ; sub 7  to make $A - $F
08B4                HEX2:        
08B4   D6 30                  SUB   $30   ; Form decimal digit
08B6   DA A5 08               JP   C,num2   
08B9   FE 10                  CP   $0F+1   
08BB   D2 A5 08               JP   NC,num2   
08BE   29                     ADD   HL,HL   ; 2X ; Multiply digit(s) in HL by 16
08BF   29                     ADD   HL,HL   ; 4X
08C0   29                     ADD   HL,HL   ; 8X
08C1   29                     ADD   HL,HL   ; 16X
08C2   85                     ADD   A,L   ; Add into bottom of HL
08C3   6F                     LD   L,A   ; 
08C4   18 E6                  JR   hex1   
08C6                             ;*******************************************************************
08C6                             ; Subroutines
08C6                             ;*******************************************************************
08C6                PROMPT:      ;=9
08C6   CD AA 03               CALL   printStr   
08C9   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08CE   C9                     RET      
08CF                PUTSTR0:      
08CF   CD 85 00               CALL   putchar   
08D2   23                     INC   HL   
08D3                PUTSTR:      
08D3   7E                     LD   A,(HL)   
08D4   B7                     OR   A   
08D5   20 F8                  JR   NZ,putStr0   
08D7   C9                     RET      
08D8                RPUSH:       ;=11
08D8   DD 2B                  DEC   IX   
08DA   DD 74 00               LD   (IX+0),H   
08DD   DD 2B                  DEC   IX   
08DF   DD 75 00               LD   (IX+0),L   
08E2   C9                     RET      
08E3                RPOP:        ;=11
08E3   DD 6E 00               LD   L,(IX+0)   
08E6   DD 23                  INC   IX   
08E8   DD 66 00               LD   H,(IX+0)   
08EB   DD 23                  INC   IX   
08ED                RPOP2:       
08ED   C9                     RET      
08EE                CRLF:        ;=7
08EE   CD AA 03               CALL   printStr   
08F1   0D 0A 00               .CSTR   "\r\n"   
08F4   C9                     RET      
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          DS   LSIZE   
1A80                LSTACK:      
1A80                          ALIGN   $100   
1B00                OPCODES:      
1B00                          DS   $80   
1B80                CTRLCODES:      
1B80                ALTCODES:      
1B80                          DS   $80   
1C00                          ALIGN   $100   
1C00                MINTVARS:      
1C00                          DS   $30   
1C30                VLOOPSP:   DS   2   ; 
1C32                VBYTEMODE:   DS   2   ; 
1C34                TBPTR:    DS   2   ; reserved for tests
1C36                RST08:    DS   2   
1C38                RST10:    DS   2   
1C3A                RST18:    DS   2   
1C3C                RST20:    DS   2   
1C3E                RST28:    DS   2   
1C40                RST30:    DS   2   ; 
1C42                BAUD:     DS   2   ; 
1C44                INTVEC:   DS   2   ; 
1C46                NMIVEC:   DS   2   ; 
1C48                GETCVEC:   DS   2   ; 
1C4A                PUTCVEC:   DS   2   ; 
1C4C                          DS   26*2   
1C80                ALTVARS:      
1C80                VS0:      DS   2   ; a
1C82                VBASE16:   DS   2   ; b
1C84                VTIBPTR:   DS   2   ; c
1C86                VNS:      DS   2   ; d
1C88                VLASTDEF:   DS   2   ; e
1C8A                          DS   2   ; f
1C8C                VALTPAGE:   DS   2   ; g
1C8E                VHEAPPTR:   DS   2   ; h
1C90                          DS   2   ; i
1C92                          DS   2   ; j
1C94                          DS   2   ; k
1C96                          DS   2   ; l
1C98                          DS   2   ; m
1C9A                          DS   2   ; n
1C9C                          DS   2   ; o
1C9E                          DS   2   ; p
1CA0                          DS   2   ; q
1CA2                          DS   2   ; r
1CA4                          DS   2   ; s
1CA6                          DS   2   ; t
1CA8                          DS   2   ; u
1CAA                          DS   2   ; v
1CAC                          DS   2   ; w
1CAE                          DS   2   ; x
1CB0                          DS   2   ; y
1CB2                          DS   2   ; z
1CB4                             ; ****************************************************************
1CB4                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1CB4                             ; ****************************************************************
1CB4                          ALIGN   $40   
1CC0                MINTDATA:   DS   mintDataSize   
1D28                HEAP:        
1D28                             ; 
4000                          .ORG   $4000   
4000                             ; 
4000                TESTSSTART:      
4000                             ; 
4000                             ; CALL printStr
4000                             ; .cstr "Done!!\r\n"
4000                             ; HALT
4000                             ; 
4000                             ; test "1", 1
4000                             ; test "1", 1
4000                             ; test "0", 0
4000                             ; test "10", 10
4000                             ; test "#10", $10
4000                             ; test "#FF", $FF
4000                             ; test "2 3 =", 0
4000                             ; test "3 3 =", 1
4000                             ; test "2 3 <", 1
4000                             ; test "3 3 <", 0
4000                             ; test "3 3 >", 0
4000                             ; test "4 3 >", 1
4000                             ; test "1 2 +", 3
4000                             ; test "123 456 +", 123+456
4000                             ; test "64 128 +", 64+128
4000                             ; test "5 3 -", 2
4000                             ; test "3 5 &", 1
4000                             ; test "3 5 |", 7
4000                             ; test "1 2 3 ' +", 3
4000                             ; test "2 3 *", 6
4000                             ; test "1 2 3 + *", 5
4000                             ; 
4000                             ; test "1_ 2 +",1
4000                             ; test "1_ 1 +",0
4000                             ; call enter
4000                             ;     .cstr "1 3",$22,"+"
4000                             ; expect "1 3 DUP +", 6
4000                             ; 
4000                             ; test "5 2/'", 2
4000                             ; test "3 5$ -", 2
4000                             ; test "5 2/$ '", 1
4000                             ; test "2 3%++", 7
4000                             ; test "1 2 3~''", 2
4000                             ; test "1 2 3~+*", 8
4000                             ; test "2a!a@",2
4000                             ; test "3x! 1 x@+x! x@", 4
4000                             ; test "3x! 1_ x@+x! x@", 2
4000                             ; 
4000                             ; 
4000                             ; 
4000                             ; test "1{", 2
4000                             ; test "1}", 0
4000                             ; test "2}", 1
4000                             ; test "10 11 12\\#3$ '$ '$ '", 4
4000                             ; test "(2) \\^", 2
4000                             ; test ":X1; X", 1
4000                             ; test ":A100;A", 100
4000                             ; test ":Aa!; 3A a@", 3
4000                             ; test ":Aa!;:Ba@;4AB", 4
4000                             ; test "[]$ '", 0
4000                             ; test "[3]$ '", 1
4000                             ; test "[3]'@", 3
4000                             ; test "[1 2 3]'@", 1
4000                             ; test "[1 2 3]'2+@", 2
4000                             ; test "\\h@[1]''\\h@$-", 2
4000                             ; test "\\h@[1 2 3]''\\h@$-", 6
4000                             ; test "\\[]$ '", 0
4000                             ; test "\\[3]'\\@", 3
4000                             ; test "\\[3]$ '", 1
4000                             ; test "\\[1 2 3]'\\@", 1
4000                             ; test "\\[1 2 3]'1+\\@", 2
4000                             ; test "\\h@\\[1 2 3]''\\h@$-", 3
4000                             ; test "\\h@\\[1]''\\h@$-", 1
4000                             ; test "\\`A`\\@",65
4000                             ; test "0 0(1+)", 0
4000                             ; test "0 1(1+)", 1
4000                             ; test "0 2(1+)", 2
4000                             ; test "0 1(0(1+))", 0
4000                             ; test "0 1(1(1+))", 1
4000                             ; test "0 2(1(1+))", 2
4000                             ; test "0 2(2(1+))", 4
4000                             ; test "0 1(\\i@+)", 0
4000                             ; test "0 2(\\i@+)", 1
4000                             ; test "0 3(\\i@+)", 3
4000                             ; test "0 2(2(\\i@ \\i6+@ ++))", 4
4000                             ; test "0t! 10(1 t@+t!) t@",10
4000                             ; test "0(100)(200)",200
4000                             ; test "1(100)(200)",100
4000                             ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
4000                             ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
4000                             ; test ":X10;\\0X", 10
4000                             ; test "2 \\1x! \\1x@", 2
4000                             ; 
4000   CD AA 03               CALL   printStr   
4003   44 6F 6E 65 21 00      .CSTR   "Done!"   
4009   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 43 IN SCAN.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 458 IN SCAN.asm
                    > USED AT LINE 1062 IN SCAN.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 488 IN SCAN.asm
                    > USED AT LINE 660 IN SCAN.asm
                    > USED AT LINE 685 IN SCAN.asm
                    > USED AT LINE 1022 IN SCAN.asm
                    > USED AT LINE 1287 IN SCAN.asm
                    > USED AT LINE 1474 IN SCAN.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 15 IN SCAN.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 16 IN SCAN.asm
                    > USED AT LINE 5 IN ram.asm
LSIZE:              0080 DEFINED AT LINE 17 IN SCAN.asm
                    > USED AT LINE 11 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN SCAN.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               0001 DEFINED AT LINE 19 IN SCAN.asm
FALSE:              0000 DEFINED AT LINE 20 IN SCAN.asm
                    > USED AT LINE 66 IN SCAN.asm
EMPTY:              0000 DEFINED AT LINE 21 IN SCAN.asm
MINTDATASIZE:       0068 DEFINED AT LINE 23 IN SCAN.asm
                    > USED AT LINE 573 IN SCAN.asm
                    > USED AT LINE 73 IN ram.asm
MACROS:             0180 DEFINED AT LINE 49 IN SCAN.asm
IALTVARS:           0180 DEFINED AT LINE 64 IN SCAN.asm
                    > USED AT LINE 564 IN SCAN.asm
IOPCODES:           0190 DEFINED AT LINE 76 IN SCAN.asm
                    > USED AT LINE 577 IN SCAN.asm
ETX:                02A6 DEFINED AT LINE 413 IN SCAN.asm
                    > USED AT LINE 1040 IN SCAN.asm
ETX1:               02AF DEFINED AT LINE 418 IN SCAN.asm
                    > USED AT LINE 416 IN SCAN.asm
START:              02B1 DEFINED AT LINE 421 IN SCAN.asm
INTERPRET:          02C6 DEFINED AT LINE 427 IN SCAN.asm
                    > USED AT LINE 419 IN SCAN.asm
INTERPRET2:         02D0 DEFINED AT LINE 433 IN SCAN.asm
                    > USED AT LINE 481 IN SCAN.asm
INTERPRET3:         02D8 DEFINED AT LINE 440 IN SCAN.asm
                    > USED AT LINE 449 IN SCAN.asm
INTERPRET4:         02DE DEFINED AT LINE 446 IN SCAN.asm
                    > USED AT LINE 438 IN SCAN.asm
WAITCHAR:           02E3 DEFINED AT LINE 457 IN SCAN.asm
                    > USED AT LINE 490 IN SCAN.asm
                    > USED AT LINE 504 IN SCAN.asm
MACRO:              02F2 DEFINED AT LINE 466 IN SCAN.asm
MACRO1:             0309 DEFINED AT LINE 479 IN SCAN.asm
                    > USED AT LINE 474 IN SCAN.asm
WAITCHAR1:          030F DEFINED AT LINE 483 IN SCAN.asm
                    > USED AT LINE 460 IN SCAN.asm
WAITCHAR3:          031D DEFINED AT LINE 492 IN SCAN.asm
                    > USED AT LINE 464 IN SCAN.asm
WAITCHAR4:          0333 DEFINED AT LINE 508 IN SCAN.asm
                    > USED AT LINE 462 IN SCAN.asm
NEXT:               033B DEFINED AT LINE 535 IN SCAN.asm
                    > USED AT LINE 557 IN SCAN.asm
                    > USED AT LINE 563 IN SCAN.asm
                    > USED AT LINE 1071 IN SCAN.asm
COMPNEXT:           0344 DEFINED AT LINE 545 IN SCAN.asm
COMPNEXT1:          0352 DEFINED AT LINE 555 IN SCAN.asm
                    > USED AT LINE 552 IN SCAN.asm
INIT:               0357 DEFINED AT LINE 559 IN SCAN.asm
                    > USED AT LINE 9
                    > USED AT LINE 423 IN SCAN.asm
INITOPS:            037D DEFINED AT LINE 576 IN SCAN.asm
INITOPS1:           0386 DEFINED AT LINE 581 IN SCAN.asm
                    > USED AT LINE 591 IN SCAN.asm
                    > USED AT LINE 602 IN SCAN.asm
INITOPS2:           0396 DEFINED AT LINE 593 IN SCAN.asm
                    > USED AT LINE 586 IN SCAN.asm
INITOPS2A:          039B DEFINED AT LINE 598 IN SCAN.asm
                    > USED AT LINE 601 IN SCAN.asm
ENTER:              03A1 DEFINED AT LINE 604 IN SCAN.asm
                    > USED AT LINE 477 IN SCAN.asm
PRINTSTR:           03AA DEFINED AT LINE 611 IN SCAN.asm
                    > USED AT LINE 424 IN SCAN.asm
                    > USED AT LINE 1469 IN SCAN.asm
                    > USED AT LINE 1498 IN SCAN.asm
                    > USED AT LINE 106
LOOKUPREF:          03B1 DEFINED AT LINE 618 IN SCAN.asm
LOOKUPREF0:         03B3 DEFINED AT LINE 620 IN SCAN.asm
LOOKUPREF1:         03B7 DEFINED AT LINE 623 IN SCAN.asm
                    > USED AT LINE 1010 IN SCAN.asm
LOOKUPREF2:         03BD DEFINED AT LINE 627 IN SCAN.asm
                    > USED AT LINE 622 IN SCAN.asm
                    > USED AT LINE 1172 IN SCAN.asm
LOOKUPREF3:         03C1 DEFINED AT LINE 630 IN SCAN.asm
                    > USED AT LINE 626 IN SCAN.asm
PRINTDEC:           03CF DEFINED AT LINE 643 IN SCAN.asm
                    > USED AT LINE 1019 IN SCAN.asm
PRINTDEC1:          03E8 DEFINED AT LINE 653 IN SCAN.asm
                    > USED AT LINE 645 IN SCAN.asm
                    > USED AT LINE 647 IN SCAN.asm
                    > USED AT LINE 649 IN SCAN.asm
                    > USED AT LINE 651 IN SCAN.asm
PRINTDEC2:          03EA DEFINED AT LINE 655 IN SCAN.asm
                    > USED AT LINE 658 IN SCAN.asm
PRINTHEX:           03F3 DEFINED AT LINE 662 IN SCAN.asm
                    > USED AT LINE 1027 IN SCAN.asm
PRINTHEX2:          03FE DEFINED AT LINE 671 IN SCAN.asm
                    > USED AT LINE 666 IN SCAN.asm
                    > USED AT LINE 668 IN SCAN.asm
PRINTHEX3:          0407 DEFINED AT LINE 679 IN SCAN.asm
                    > USED AT LINE 677 IN SCAN.asm
NESTING:            0412 DEFINED AT LINE 697 IN SCAN.asm
                    > USED AT LINE 444 IN SCAN.asm
                    > USED AT LINE 489 IN SCAN.asm
NESTING1A:          041D DEFINED AT LINE 704 IN SCAN.asm
                    > USED AT LINE 701 IN SCAN.asm
NESTING1:           0420 DEFINED AT LINE 707 IN SCAN.asm
                    > USED AT LINE 699 IN SCAN.asm
NESTING2:           042F DEFINED AT LINE 716 IN SCAN.asm
                    > USED AT LINE 711 IN SCAN.asm
                    > USED AT LINE 713 IN SCAN.asm
NESTING3:           0431 DEFINED AT LINE 719 IN SCAN.asm
                    > USED AT LINE 715 IN SCAN.asm
NESTING4:           043C DEFINED AT LINE 726 IN SCAN.asm
                    > USED AT LINE 721 IN SCAN.asm
                    > USED AT LINE 723 IN SCAN.asm
PAGE4:              0500 DEFINED AT LINE 734 IN SCAN.asm
A_:                 0500 DEFINED AT LINE 736 IN SCAN.asm
C_:                 0503 DEFINED AT LINE 738 IN SCAN.asm
D_:                 0506 DEFINED AT LINE 740 IN SCAN.asm
E_:                 0509 DEFINED AT LINE 742 IN SCAN.asm
F_:                 050C DEFINED AT LINE 744 IN SCAN.asm
G_:                 050F DEFINED AT LINE 746 IN SCAN.asm
I_:                 0512 DEFINED AT LINE 748 IN SCAN.asm
K_:                 0515 DEFINED AT LINE 750 IN SCAN.asm
L_:                 0518 DEFINED AT LINE 752 IN SCAN.asm
M_:                 051B DEFINED AT LINE 754 IN SCAN.asm
N_:                 051E DEFINED AT LINE 756 IN SCAN.asm
O_:                 0521 DEFINED AT LINE 758 IN SCAN.asm
P_:                 0524 DEFINED AT LINE 760 IN SCAN.asm
S_:                 0527 DEFINED AT LINE 762 IN SCAN.asm
U_:                 052A DEFINED AT LINE 764 IN SCAN.asm
W_:                 052D DEFINED AT LINE 766 IN SCAN.asm
X_:                 0530 DEFINED AT LINE 768 IN SCAN.asm
A:                  0533 DEFINED AT LINE 771 IN SCAN.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
                    > USED AT LINE 441 IN SCAN.asm
                    > USED AT LINE 447 IN SCAN.asm
                    > USED AT LINE 469 IN SCAN.asm
                    > USED AT LINE 470 IN SCAN.asm
                    > USED AT LINE 472 IN SCAN.asm
                    > USED AT LINE 473 IN SCAN.asm
                    > USED AT LINE 486 IN SCAN.asm
                    > USED AT LINE 502 IN SCAN.asm
                    > USED AT LINE 503 IN SCAN.asm
                    > USED AT LINE 537 IN SCAN.asm
                    > USED AT LINE 538 IN SCAN.asm
                    > USED AT LINE 549 IN SCAN.asm
                    > USED AT LINE 551 IN SCAN.asm
                    > USED AT LINE 582 IN SCAN.asm
                    > USED AT LINE 584 IN SCAN.asm
                    > USED AT LINE 587 IN SCAN.asm
                    > USED AT LINE 588 IN SCAN.asm
                    > USED AT LINE 594 IN SCAN.asm
                    > USED AT LINE 595 IN SCAN.asm
                    > USED AT LINE 596 IN SCAN.asm
                    > USED AT LINE 599 IN SCAN.asm
                    > USED AT LINE 631 IN SCAN.asm
                    > USED AT LINE 631 IN SCAN.asm
                    > USED AT LINE 632 IN SCAN.asm
                    > USED AT LINE 634 IN SCAN.asm
                    > USED AT LINE 635 IN SCAN.asm
                    > USED AT LINE 636 IN SCAN.asm
                    > USED AT LINE 637 IN SCAN.asm
                    > USED AT LINE 638 IN SCAN.asm
                    > USED AT LINE 639 IN SCAN.asm
                    > USED AT LINE 654 IN SCAN.asm
                    > USED AT LINE 656 IN SCAN.asm
                    > USED AT LINE 665 IN SCAN.asm
                    > USED AT LINE 667 IN SCAN.asm
                    > USED AT LINE 672 IN SCAN.asm
                    > USED AT LINE 678 IN SCAN.asm
                    > USED AT LINE 681 IN SCAN.asm
                    > USED AT LINE 683 IN SCAN.asm
                    > USED AT LINE 737 IN SCAN.asm
                    > USED AT LINE 773 IN SCAN.asm
                    > USED AT LINE 783 IN SCAN.asm
                    > USED AT LINE 793 IN SCAN.asm
                    > USED AT LINE 807 IN SCAN.asm
                    > USED AT LINE 815 IN SCAN.asm
                    > USED AT LINE 823 IN SCAN.asm
                    > USED AT LINE 835 IN SCAN.asm
                    > USED AT LINE 846 IN SCAN.asm
                    > USED AT LINE 854 IN SCAN.asm
                    > USED AT LINE 864 IN SCAN.asm
                    > USED AT LINE 874 IN SCAN.asm
                    > USED AT LINE 882 IN SCAN.asm
                    > USED AT LINE 892 IN SCAN.asm
                    > USED AT LINE 899 IN SCAN.asm
                    > USED AT LINE 907 IN SCAN.asm
                    > USED AT LINE 923 IN SCAN.asm
                    > USED AT LINE 931 IN SCAN.asm
                    > USED AT LINE 939 IN SCAN.asm
                    > USED AT LINE 965 IN SCAN.asm
                    > USED AT LINE 967 IN SCAN.asm
                    > USED AT LINE 968 IN SCAN.asm
                    > USED AT LINE 971 IN SCAN.asm
                    > USED AT LINE 979 IN SCAN.asm
                    > USED AT LINE 981 IN SCAN.asm
                    > USED AT LINE 982 IN SCAN.asm
                    > USED AT LINE 990 IN SCAN.asm
                    > USED AT LINE 992 IN SCAN.asm
                    > USED AT LINE 993 IN SCAN.asm
                    > USED AT LINE 1009 IN SCAN.asm
                    > USED AT LINE 1021 IN SCAN.asm
                    > USED AT LINE 1064 IN SCAN.asm
                    > USED AT LINE 1130 IN SCAN.asm
                    > USED AT LINE 1143 IN SCAN.asm
                    > USED AT LINE 1159 IN SCAN.asm
                    > USED AT LINE 1171 IN SCAN.asm
                    > USED AT LINE 1195 IN SCAN.asm
                    > USED AT LINE 1197 IN SCAN.asm
                    > USED AT LINE 1227 IN SCAN.asm
                    > USED AT LINE 1241 IN SCAN.asm
                    > USED AT LINE 1272 IN SCAN.asm
                    > USED AT LINE 1286 IN SCAN.asm
                    > USED AT LINE 1306 IN SCAN.asm
                    > USED AT LINE 1311 IN SCAN.asm
                    > USED AT LINE 1323 IN SCAN.asm
                    > USED AT LINE 1327 IN SCAN.asm
                    > USED AT LINE 1381 IN SCAN.asm
                    > USED AT LINE 1390 IN SCAN.asm
                    > USED AT LINE 1410 IN SCAN.asm
                    > USED AT LINE 1415 IN SCAN.asm
                    > USED AT LINE 1416 IN SCAN.asm
                    > USED AT LINE 1417 IN SCAN.asm
                    > USED AT LINE 1418 IN SCAN.asm
                    > USED AT LINE 1419 IN SCAN.asm
                    > USED AT LINE 1422 IN SCAN.asm
                    > USED AT LINE 1447 IN SCAN.asm
                    > USED AT LINE 1448 IN SCAN.asm
                    > USED AT LINE 1460 IN SCAN.asm
                    > USED AT LINE 1461 IN SCAN.asm
                    > USED AT LINE 1477 IN SCAN.asm
                    > USED AT LINE 1478 IN SCAN.asm
C:                  0543 DEFINED AT LINE 781 IN SCAN.asm
                    > USED AT LINE 447 IN SCAN.asm
                    > USED AT LINE 586 IN SCAN.asm
                    > USED AT LINE 588 IN SCAN.asm
                    > USED AT LINE 658 IN SCAN.asm
                    > USED AT LINE 672 IN SCAN.asm
                    > USED AT LINE 678 IN SCAN.asm
                    > USED AT LINE 739 IN SCAN.asm
                    > USED AT LINE 1224 IN SCAN.asm
                    > USED AT LINE 1230 IN SCAN.asm
                    > USED AT LINE 1235 IN SCAN.asm
                    > USED AT LINE 1236 IN SCAN.asm
                    > USED AT LINE 1244 IN SCAN.asm
                    > USED AT LINE 1323 IN SCAN.asm
                    > USED AT LINE 1324 IN SCAN.asm
                    > USED AT LINE 1325 IN SCAN.asm
                    > USED AT LINE 1327 IN SCAN.asm
                    > USED AT LINE 1337 IN SCAN.asm
                    > USED AT LINE 1338 IN SCAN.asm
                    > USED AT LINE 1340 IN SCAN.asm
                    > USED AT LINE 1341 IN SCAN.asm
                    > USED AT LINE 1378 IN SCAN.asm
                    > USED AT LINE 1424 IN SCAN.asm
                    > USED AT LINE 1453 IN SCAN.asm
D:                  0553 DEFINED AT LINE 791 IN SCAN.asm
                    > USED AT LINE 475 IN SCAN.asm
                    > USED AT LINE 553 IN SCAN.asm
                    > USED AT LINE 619 IN SCAN.asm
                    > USED AT LINE 741 IN SCAN.asm
                    > USED AT LINE 968 IN SCAN.asm
                    > USED AT LINE 982 IN SCAN.asm
                    > USED AT LINE 993 IN SCAN.asm
                    > USED AT LINE 1013 IN SCAN.asm
                    > USED AT LINE 1055 IN SCAN.asm
                    > USED AT LINE 1116 IN SCAN.asm
                    > USED AT LINE 1243 IN SCAN.asm
                    > USED AT LINE 1265 IN SCAN.asm
                    > USED AT LINE 1306 IN SCAN.asm
                    > USED AT LINE 1385 IN SCAN.asm
                    > USED AT LINE 1430 IN SCAN.asm
E:                  056D DEFINED AT LINE 805 IN SCAN.asm
                    > USED AT LINE 434 IN SCAN.asm
                    > USED AT LINE 471 IN SCAN.asm
                    > USED AT LINE 472 IN SCAN.asm
                    > USED AT LINE 502 IN SCAN.asm
                    > USED AT LINE 548 IN SCAN.asm
                    > USED AT LINE 625 IN SCAN.asm
                    > USED AT LINE 629 IN SCAN.asm
                    > USED AT LINE 632 IN SCAN.asm
                    > USED AT LINE 640 IN SCAN.asm
                    > USED AT LINE 650 IN SCAN.asm
                    > USED AT LINE 652 IN SCAN.asm
                    > USED AT LINE 700 IN SCAN.asm
                    > USED AT LINE 702 IN SCAN.asm
                    > USED AT LINE 705 IN SCAN.asm
                    > USED AT LINE 708 IN SCAN.asm
                    > USED AT LINE 717 IN SCAN.asm
                    > USED AT LINE 727 IN SCAN.asm
                    > USED AT LINE 743 IN SCAN.asm
                    > USED AT LINE 965 IN SCAN.asm
                    > USED AT LINE 979 IN SCAN.asm
                    > USED AT LINE 990 IN SCAN.asm
                    > USED AT LINE 1011 IN SCAN.asm
                    > USED AT LINE 1053 IN SCAN.asm
                    > USED AT LINE 1114 IN SCAN.asm
                    > USED AT LINE 1244 IN SCAN.asm
                    > USED AT LINE 1266 IN SCAN.asm
                    > USED AT LINE 1281 IN SCAN.asm
                    > USED AT LINE 1307 IN SCAN.asm
                    > USED AT LINE 1337 IN SCAN.asm
                    > USED AT LINE 1341 IN SCAN.asm
                    > USED AT LINE 1384 IN SCAN.asm
                    > USED AT LINE 1429 IN SCAN.asm
F:                  0578 DEFINED AT LINE 813 IN SCAN.asm
                    > USED AT LINE 745 IN SCAN.asm
G:                  0583 DEFINED AT LINE 821 IN SCAN.asm
                    > USED AT LINE 747 IN SCAN.asm
I:                  0598 DEFINED AT LINE 833 IN SCAN.asm
                    > USED AT LINE 749 IN SCAN.asm
K:                  05A8 DEFINED AT LINE 843 IN SCAN.asm
                    > USED AT LINE 751 IN SCAN.asm
L:                  05B6 DEFINED AT LINE 852 IN SCAN.asm
                    > USED AT LINE 469 IN SCAN.asm
                    > USED AT LINE 470 IN SCAN.asm
                    > USED AT LINE 538 IN SCAN.asm
                    > USED AT LINE 540 IN SCAN.asm
                    > USED AT LINE 634 IN SCAN.asm
                    > USED AT LINE 635 IN SCAN.asm
                    > USED AT LINE 667 IN SCAN.asm
                    > USED AT LINE 753 IN SCAN.asm
                    > USED AT LINE 966 IN SCAN.asm
                    > USED AT LINE 967 IN SCAN.asm
                    > USED AT LINE 980 IN SCAN.asm
                    > USED AT LINE 981 IN SCAN.asm
                    > USED AT LINE 991 IN SCAN.asm
                    > USED AT LINE 992 IN SCAN.asm
                    > USED AT LINE 1064 IN SCAN.asm
                    > USED AT LINE 1107 IN SCAN.asm
                    > USED AT LINE 1165 IN SCAN.asm
                    > USED AT LINE 1224 IN SCAN.asm
                    > USED AT LINE 1286 IN SCAN.asm
                    > USED AT LINE 1324 IN SCAN.asm
                    > USED AT LINE 1325 IN SCAN.asm
                    > USED AT LINE 1338 IN SCAN.asm
                    > USED AT LINE 1340 IN SCAN.asm
                    > USED AT LINE 1378 IN SCAN.asm
                    > USED AT LINE 1415 IN SCAN.asm
                    > USED AT LINE 1416 IN SCAN.asm
                    > USED AT LINE 1429 IN SCAN.asm
                    > USED AT LINE 1460 IN SCAN.asm
                    > USED AT LINE 1461 IN SCAN.asm
                    > USED AT LINE 1486 IN SCAN.asm
                    > USED AT LINE 1490 IN SCAN.asm
M:                  05C6 DEFINED AT LINE 862 IN SCAN.asm
                    > USED AT LINE 755 IN SCAN.asm
                    > USED AT LINE 1163 IN SCAN.asm
N:                  05D6 DEFINED AT LINE 872 IN SCAN.asm
                    > USED AT LINE 757 IN SCAN.asm
O:                  05E1 DEFINED AT LINE 880 IN SCAN.asm
                    > USED AT LINE 759 IN SCAN.asm
P:                  05F1 DEFINED AT LINE 890 IN SCAN.asm
                    > USED AT LINE 761 IN SCAN.asm
R:                  05FC DEFINED AT LINE 897 IN SCAN.asm
S:                  0607 DEFINED AT LINE 905 IN SCAN.asm
                    > USED AT LINE 763 IN SCAN.asm
U:                  0626 DEFINED AT LINE 921 IN SCAN.asm
                    > USED AT LINE 765 IN SCAN.asm
W:                  0631 DEFINED AT LINE 929 IN SCAN.asm
                    > USED AT LINE 767 IN SCAN.asm
X:                  063C DEFINED AT LINE 937 IN SCAN.asm
                    > USED AT LINE 769 IN SCAN.asm
                    > USED AT LINE 844 IN SCAN.asm
CASE_:              0647 DEFINED AT LINE 945 IN SCAN.asm
                    > USED AT LINE 785 IN SCAN.asm
CLOSURE_:           0647 DEFINED AT LINE 946 IN SCAN.asm
                    > USED AT LINE 787 IN SCAN.asm
DEF_:               0647 DEFINED AT LINE 947 IN SCAN.asm
                    > USED AT LINE 795 IN SCAN.asm
FILTER_:            0647 DEFINED AT LINE 948 IN SCAN.asm
                    > USED AT LINE 817 IN SCAN.asm
GET_:               0647 DEFINED AT LINE 949 IN SCAN.asm
                    > USED AT LINE 825 IN SCAN.asm
IF_:                0647 DEFINED AT LINE 950 IN SCAN.asm
                    > USED AT LINE 837 IN SCAN.asm
LET_:               0647 DEFINED AT LINE 951 IN SCAN.asm
                    > USED AT LINE 856 IN SCAN.asm
MAP_:               0647 DEFINED AT LINE 952 IN SCAN.asm
                    > USED AT LINE 866 IN SCAN.asm
PRINT_:             0647 DEFINED AT LINE 953 IN SCAN.asm
                    > USED AT LINE 894 IN SCAN.asm
SCAN_:              0647 DEFINED AT LINE 954 IN SCAN.asm
                    > USED AT LINE 909 IN SCAN.asm
SET_:               0647 DEFINED AT LINE 955 IN SCAN.asm
                    > USED AT LINE 911 IN SCAN.asm
SHIFT_:             0647 DEFINED AT LINE 956 IN SCAN.asm
                    > USED AT LINE 913 IN SCAN.asm
UNDROP_:            0647 DEFINED AT LINE 957 IN SCAN.asm
                    > USED AT LINE 925 IN SCAN.asm
WHILE_:             0647 DEFINED AT LINE 958 IN SCAN.asm
                    > USED AT LINE 933 IN SCAN.asm
AND_:               0649 DEFINED AT LINE 962 IN SCAN.asm
                    > USED AT LINE 777 IN SCAN.asm
AND1:               0650 DEFINED AT LINE 970 IN SCAN.asm
                    > USED AT LINE 984 IN SCAN.asm
                    > USED AT LINE 995 IN SCAN.asm
OR_:                0654 DEFINED AT LINE 976 IN SCAN.asm
                    > USED AT LINE 886 IN SCAN.asm
XOR_:               065D DEFINED AT LINE 986 IN SCAN.asm
                    > USED AT LINE 941 IN SCAN.asm
XOR1:               065E DEFINED AT LINE 988 IN SCAN.asm
                    > USED AT LINE 999 IN SCAN.asm
INV_:               0666 DEFINED AT LINE 997 IN SCAN.asm
                    > USED AT LINE 839 IN SCAN.asm
ADD_:               066B DEFINED AT LINE 1001 IN SCAN.asm
                    > USED AT LINE 775 IN SCAN.asm
CALL_:              0671 DEFINED AT LINE 1008 IN SCAN.asm
DOT_:               067B DEFINED AT LINE 1017 IN SCAN.asm
DOT2:               067F DEFINED AT LINE 1020 IN SCAN.asm
                    > USED AT LINE 1028 IN SCAN.asm
HDOT_:              0686 DEFINED AT LINE 1025 IN SCAN.asm
DROP_:              068C DEFINED AT LINE 1030 IN SCAN.asm
                    > USED AT LINE 799 IN SCAN.asm
DUP_:               068F DEFINED AT LINE 1034 IN SCAN.asm
                    > USED AT LINE 801 IN SCAN.asm
ETX_:               0694 DEFINED AT LINE 1039 IN SCAN.asm
EXIT_:              0697 DEFINED AT LINE 1042 IN SCAN.asm
FETCH_:             06A1 DEFINED AT LINE 1050 IN SCAN.asm
FETCH1:             06A2 DEFINED AT LINE 1052 IN SCAN.asm
HEX_:               06A8 DEFINED AT LINE 1059 IN SCAN.asm
KEY_:               06AB DEFINED AT LINE 1061 IN SCAN.asm
                    > USED AT LINE 848 IN SCAN.asm
MUL_:               06B4 DEFINED AT LINE 1068 IN SCAN.asm
                    > USED AT LINE 868 IN SCAN.asm
NOP_:               06B7 DEFINED AT LINE 1070 IN SCAN.asm
OVER_:              06BA DEFINED AT LINE 1074 IN SCAN.asm
                    > USED AT LINE 884 IN SCAN.asm
RET_:               06C1 DEFINED AT LINE 1082 IN SCAN.asm
ROT_:               06C8 DEFINED AT LINE 1087 IN SCAN.asm
                    > USED AT LINE 901 IN SCAN.asm
SHL_:               06CF DEFINED AT LINE 1096 IN SCAN.asm
SHR_:               06D4 DEFINED AT LINE 1103 IN SCAN.asm
SHR1:               06D5 DEFINED AT LINE 1105 IN SCAN.asm
STORE_:             06DC DEFINED AT LINE 1111 IN SCAN.asm
SWAP_:              06E3 DEFINED AT LINE 1119 IN SCAN.asm
                    > USED AT LINE 917 IN SCAN.asm
SUB_:               06E8 DEFINED AT LINE 1125 IN SCAN.asm
                    > USED AT LINE 915 IN SCAN.asm
SUB2:               06EA DEFINED AT LINE 1129 IN SCAN.asm
                    > USED AT LINE 1138 IN SCAN.asm
NEG_:               06F0 DEFINED AT LINE 1135 IN SCAN.asm
                    > USED AT LINE 876 IN SCAN.asm
EQ_:                06F6 DEFINED AT LINE 1140 IN SCAN.asm
                    > USED AT LINE 809 IN SCAN.asm
GT_:                0702 DEFINED AT LINE 1149 IN SCAN.asm
                    > USED AT LINE 829 IN SCAN.asm
LT_:                0706 DEFINED AT LINE 1154 IN SCAN.asm
                    > USED AT LINE 858 IN SCAN.asm
CMP_:               0708 DEFINED AT LINE 1158 IN SCAN.asm
                    > USED AT LINE 1152 IN SCAN.asm
EQUAL:              0713 DEFINED AT LINE 1164 IN SCAN.asm
                    > USED AT LINE 1145 IN SCAN.asm
LESS:               0714 DEFINED AT LINE 1166 IN SCAN.asm
                    > USED AT LINE 1147 IN SCAN.asm
                    > USED AT LINE 1161 IN SCAN.asm
                    > USED AT LINE 1163 IN SCAN.asm
VAR_:               0717 DEFINED AT LINE 1170 IN SCAN.asm
                    > USED AT LINE 779 IN SCAN.asm
                    > USED AT LINE 789 IN SCAN.asm
                    > USED AT LINE 803 IN SCAN.asm
                    > USED AT LINE 811 IN SCAN.asm
                    > USED AT LINE 819 IN SCAN.asm
                    > USED AT LINE 831 IN SCAN.asm
                    > USED AT LINE 841 IN SCAN.asm
                    > USED AT LINE 850 IN SCAN.asm
                    > USED AT LINE 860 IN SCAN.asm
                    > USED AT LINE 870 IN SCAN.asm
                    > USED AT LINE 878 IN SCAN.asm
                    > USED AT LINE 888 IN SCAN.asm
                    > USED AT LINE 896 IN SCAN.asm
                    > USED AT LINE 903 IN SCAN.asm
                    > USED AT LINE 919 IN SCAN.asm
                    > USED AT LINE 927 IN SCAN.asm
                    > USED AT LINE 935 IN SCAN.asm
                    > USED AT LINE 943 IN SCAN.asm
NUM_:               071E DEFINED AT LINE 1176 IN SCAN.asm
LAMBDA_:            0721 DEFINED AT LINE 1177 IN SCAN.asm
DIV_:               0723 DEFINED AT LINE 1179 IN SCAN.asm
                    > USED AT LINE 797 IN SCAN.asm
LAMBDA:             0728 DEFINED AT LINE 1190 IN SCAN.asm
                    > USED AT LINE 1178 IN SCAN.asm
LAMBDA1:            072E DEFINED AT LINE 1194 IN SCAN.asm
                    > USED AT LINE 1200 IN SCAN.asm
LAMBDA2:            0736 DEFINED AT LINE 1201 IN SCAN.asm
DIV:                073D DEFINED AT LINE 1219 IN SCAN.asm
                    > USED AT LINE 1179 IN SCAN.asm
DIV1:               0747 DEFINED AT LINE 1229 IN SCAN.asm
                    > USED AT LINE 1242 IN SCAN.asm
DIV2:               0754 DEFINED AT LINE 1238 IN SCAN.asm
                    > USED AT LINE 1235 IN SCAN.asm
DIV3:               0755 DEFINED AT LINE 1240 IN SCAN.asm
                    > USED AT LINE 1237 IN SCAN.asm
DIV4:               075A DEFINED AT LINE 1245 IN SCAN.asm
PAGE6:              0800 DEFINED AT LINE 1258 IN SCAN.asm
                    > USED AT LINE 71 IN SCAN.asm
ANOP_:              0800 DEFINED AT LINE 1260 IN SCAN.asm
CFETCH_:            0802 DEFINED AT LINE 1263 IN SCAN.asm
COMMENT_:           0809 DEFINED AT LINE 1270 IN SCAN.asm
                    > USED AT LINE 1274 IN SCAN.asm
CSTORE_:            0812 DEFINED AT LINE 1278 IN SCAN.asm
EMIT_:              0817 DEFINED AT LINE 1284 IN SCAN.asm
EXEC_:              081E DEFINED AT LINE 1290 IN SCAN.asm
EXEC1:              0823 DEFINED AT LINE 1293 IN SCAN.asm
                    > USED AT LINE 1291 IN SCAN.asm
PROMPT_:            0826 DEFINED AT LINE 1298 IN SCAN.asm
GO_:                082B DEFINED AT LINE 1303 IN SCAN.asm
                    > USED AT LINE 827 IN SCAN.asm
GO1:                082C DEFINED AT LINE 1305 IN SCAN.asm
                    > USED AT LINE 1014 IN SCAN.asm
GO2:                083B DEFINED AT LINE 1315 IN SCAN.asm
                    > USED AT LINE 1313 IN SCAN.asm
GO3:                083E DEFINED AT LINE 1318 IN SCAN.asm
                    > USED AT LINE 1308 IN SCAN.asm
INPORT_:            0840 DEFINED AT LINE 1321 IN SCAN.asm
NEWLN_:             084B DEFINED AT LINE 1331 IN SCAN.asm
OUTPORT_:           0850 DEFINED AT LINE 1335 IN SCAN.asm
PRNSTR_:            0859 DEFINED AT LINE 1344 IN SCAN.asm
PRNSTR:             0859 DEFINED AT LINE 1345 IN SCAN.asm
RPUSH_:             085F DEFINED AT LINE 1351 IN SCAN.asm
RPOP_:              0865 DEFINED AT LINE 1356 IN SCAN.asm
MUL:                086B DEFINED AT LINE 1373 IN SCAN.asm
                    > USED AT LINE 1068 IN SCAN.asm
MUL2:               0875 DEFINED AT LINE 1382 IN SCAN.asm
                    > USED AT LINE 1391 IN SCAN.asm
NUM:                0887 DEFINED AT LINE 1408 IN SCAN.asm
                    > USED AT LINE 1176 IN SCAN.asm
NUM1:               088B DEFINED AT LINE 1412 IN SCAN.asm
                    > USED AT LINE 1436 IN SCAN.asm
NUM2:               08A5 DEFINED AT LINE 1438 IN SCAN.asm
                    > USED AT LINE 1424 IN SCAN.asm
                    > USED AT LINE 1426 IN SCAN.asm
                    > USED AT LINE 1453 IN SCAN.asm
                    > USED AT LINE 1455 IN SCAN.asm
HEX:                08A9 DEFINED AT LINE 1443 IN SCAN.asm
                    > USED AT LINE 1059 IN SCAN.asm
HEX1:               08AC DEFINED AT LINE 1445 IN SCAN.asm
                    > USED AT LINE 1462 IN SCAN.asm
HEX2:               08B4 DEFINED AT LINE 1451 IN SCAN.asm
                    > USED AT LINE 1449 IN SCAN.asm
PROMPT:             08C6 DEFINED AT LINE 1468 IN SCAN.asm
                    > USED AT LINE 428 IN SCAN.asm
                    > USED AT LINE 1299 IN SCAN.asm
PUTSTR0:            08CF DEFINED AT LINE 1473 IN SCAN.asm
                    > USED AT LINE 1479 IN SCAN.asm
PUTSTR:             08D3 DEFINED AT LINE 1476 IN SCAN.asm
                    > USED AT LINE 613 IN SCAN.asm
                    > USED AT LINE 1347 IN SCAN.asm
RPUSH:              08D8 DEFINED AT LINE 1482 IN SCAN.asm
                    > USED AT LINE 606 IN SCAN.asm
                    > USED AT LINE 1314 IN SCAN.asm
                    > USED AT LINE 1353 IN SCAN.asm
RPOP:               08E3 DEFINED AT LINE 1489 IN SCAN.asm
                    > USED AT LINE 1045 IN SCAN.asm
                    > USED AT LINE 1083 IN SCAN.asm
                    > USED AT LINE 1357 IN SCAN.asm
RPOP2:              08ED DEFINED AT LINE 1494 IN SCAN.asm
CRLF:               08EE DEFINED AT LINE 1497 IN SCAN.asm
                    > USED AT LINE 501 IN SCAN.asm
                    > USED AT LINE 1332 IN SCAN.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 437 IN SCAN.asm
                    > USED AT LINE 484 IN SCAN.asm
                    > USED AT LINE 493 IN SCAN.asm
                    > USED AT LINE 510 IN SCAN.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 562 IN SCAN.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 65 IN SCAN.asm
                    > USED AT LINE 414 IN SCAN.asm
                    > USED AT LINE 417 IN SCAN.asm
                    > USED AT LINE 422 IN SCAN.asm
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
LSTACK:             1A80 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 560 IN SCAN.asm
OPCODES:            1B00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 578 IN SCAN.asm
CTRLCODES:          1B80 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 468 IN SCAN.asm
ALTCODES:           1B80 DEFINED AT LINE 17 IN ram.asm
MINTVARS:           1C00 DEFINED AT LINE 21 IN ram.asm
VLOOPSP:            1C30 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 561 IN SCAN.asm
VBYTEMODE:          1C32 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 549 IN SCAN.asm
TBPTR:              1C34 DEFINED AT LINE 25 IN ram.asm
RST08:              1C36 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1C38 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1C3A DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1C3C DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1C3E DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1C40 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1C42 DEFINED AT LINE 33 IN ram.asm
INTVEC:             1C44 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1C46 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1C48 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1C4A DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            1C80 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 565 IN SCAN.asm
VS0:                1C80 DEFINED AT LINE 42 IN ram.asm
VBASE16:            1C82 DEFINED AT LINE 43 IN ram.asm
VTIBPTR:            1C84 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 431 IN SCAN.asm
                    > USED AT LINE 467 IN SCAN.asm
                    > USED AT LINE 480 IN SCAN.asm
                    > USED AT LINE 509 IN SCAN.asm
VNS:                1C86 DEFINED AT LINE 45 IN ram.asm
VLASTDEF:           1C88 DEFINED AT LINE 46 IN ram.asm
VALTPAGE:           1C8C DEFINED AT LINE 48 IN ram.asm
VHEAPPTR:           1C8E DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 547 IN SCAN.asm
                    > USED AT LINE 556 IN SCAN.asm
                    > USED AT LINE 1192 IN SCAN.asm
                    > USED AT LINE 1203 IN SCAN.asm
MINTDATA:           1CC0 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 569 IN SCAN.asm
                    > USED AT LINE 633 IN SCAN.asm
HEAP:               1D28 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 72 IN SCAN.asm
TESTSSTART:         4000 DEFINED AT LINE 17
                    > USED AT LINE 10
