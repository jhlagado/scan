0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 1C               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 1C               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 1C               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 1C               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 1C               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 1C               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 1C               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 46 1C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 48 1C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4A 1C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 36 1C               LD   (RST08),HL   
0094   22 38 1C               LD   (RST10),HL   
0097   22 3A 1C               LD   (RST18),HL   
009A   22 3C 1C               LD   (RST20),HL   
009D   22 3E 1C               LD   (RST28),HL   
00A0   22 40 1C               LD   (RST30),HL   
00A3   22 44 1C               LD   (INTVEC),HL   
00A6   22 46 1C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 48 1C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4A 1C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 B1 02               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       Siena Programming Language for the Z80
00C6                             ; 
00C6                             ;       by John Hardy 2022
00C6                             ; 
00C6                             ;       Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                LSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00C6                TRUE:     EQU   1   ; not FF, for Siena
00C6                FALSE:    EQU   0   
00C6                EMPTY:    EQU   0   ; for an empty macro, ctrl-<something>=macro, ie ctrl-h = backspace macros (in Siena)
00C6                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00C6                .macro LITDAT,len
00C6                             ; 
00C6                 DB len
00C6                .endm
00C6                 
00C6                .macro REPDAT,len,data
00C6                             ; 
00C6                 DB (len | $80)
00C6                 DB data
00C6                .endm
00C6                 
00C6                .macro ENDDAT,
00C6                             ; 
00C6                 DB 0
00C6                .endm
00C6                 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                IALTVARS:      ; value copied into tables
0180   00 1A                  DW   dStack   ; a vS0 start of datastack			
0182   00 00                  DW   FALSE   ; b vBase16
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   41 00                  DW   65   ; e vLastDef "a" last command u defined
018A   00 00                  DW   0   ; f
018C   00 06                  DW   page6   ; g 256 bytes limits
018E   28 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                IOPCODES:      
0190                          ;*Macro unroll:  LITDAT 4		        ; macros for compression
0190   04                     DB   4   ; macros for compression
0191   4E                     DB   lsb(exit_)   ; NUL
0192   6E                     DB   lsb(nop_)   ; SOH
0193   6E                     DB   lsb(nop_)   ; STX
0194   4B                     DB   lsb(etx_)   ; ETX
0195                          ;*Macro unroll:  LITDAT 29
0195   1D                     DB   29   
0196                             ; REPDAT 29, lsb(nop_)
0196   6E                     DB   lsb(nop_)   ; 
0197   6E                     DB   lsb(nop_)   ; 
0198   6E                     DB   lsb(nop_)   ; 
0199   6E                     DB   lsb(nop_)   ; 
019A   6E                     DB   lsb(nop_)   ; 
019B   6E                     DB   lsb(nop_)   ; 
019C   6E                     DB   lsb(nop_)   ; 
019D   6E                     DB   lsb(nop_)   ; 
019E   6E                     DB   lsb(nop_)   ; 
019F   6E                     DB   lsb(nop_)   ; 
01A0   6E                     DB   lsb(nop_)   ; 
01A1   6E                     DB   lsb(nop_)   ; 
01A2   6E                     DB   lsb(nop_)   ; 
01A3   6E                     DB   lsb(nop_)   ; 
01A4   6E                     DB   lsb(nop_)   ; 
01A5   6E                     DB   lsb(nop_)   ; 
01A6   6E                     DB   lsb(nop_)   ; 
01A7   6E                     DB   lsb(nop_)   ; 
01A8   6E                     DB   lsb(nop_)   ; 
01A9   6E                     DB   lsb(nop_)   ; 
01AA   6E                     DB   lsb(nop_)   ; 
01AB   6E                     DB   lsb(nop_)   ; 
01AC   6E                     DB   lsb(nop_)   ; 
01AD   6E                     DB   lsb(nop_)   ; 
01AE   6E                     DB   lsb(nop_)   ; 
01AF   6E                     DB   lsb(nop_)   ; 
01B0   6E                     DB   lsb(nop_)   ; 
01B1   6E                     DB   lsb(nop_)   ; 
01B2   6E                     DB   lsb(nop_)   ; 
01B3                          ;*Macro unroll:  LITDAT 15
01B3   0F                     DB   15   
01B4   6E                     DB   lsb(nop_)   ;   !
01B5   6E                     DB   lsb(nop_)   ;   "
01B6   5F                     DB   lsb(hexnum_)   ;   #
01B7   6E                     DB   lsb(nop_)   ;   $
01B8   6E                     DB   lsb(nop_)   ;   %
01B9   6E                     DB   lsb(nop_)   ;   &
01BA   6E                     DB   lsb(nop_)   ;   '
01BB   6E                     DB   lsb(nop_)   ;   (
01BC   6E                     DB   lsb(nop_)   ;   )
01BD   6E                     DB   lsb(nop_)   ;   *
01BE   22                     DB   lsb(add_)   ;   +
01BF   6E                     DB   lsb(nop_)   ;   ,
01C0   E4                     DB   lsb(num_)   ;   -
01C1   32                     DB   lsb(dot_)   ;   .
01C2   6E                     DB   lsb(nop_)   ;   /	
01C3                             ; REPDAT 10, lsb(num_)		; 10 x repeat lsb of add to the num routine
01C3                          ;*Macro unroll:  LITDAT 10
01C3   0A                     DB   10   
01C4   E4                     DB   lsb(num_)   ;   0
01C5   E4                     DB   lsb(num_)   ;   1
01C6   E4                     DB   lsb(num_)   ;   2
01C7   E4                     DB   lsb(num_)   ;   3
01C8   E4                     DB   lsb(num_)   ;   4
01C9   E4                     DB   lsb(num_)   ;   5
01CA   E4                     DB   lsb(num_)   ;   6
01CB   E4                     DB   lsb(num_)   ;   7
01CC   E4                     DB   lsb(num_)   ;   8
01CD   E4                     DB   lsb(num_)   ;   9
01CE                          ;*Macro unroll:  LITDAT 7
01CE   07                     DB   7   
01CF   6E                     DB   lsb(nop_)   ;   :
01D0   6E                     DB   lsb(nop_)   ;   ;
01D1   6E                     DB   lsb(nop_)   ;   <
01D2   6E                     DB   lsb(nop_)   ;   =
01D3   6E                     DB   lsb(nop_)   ;   >
01D4   6E                     DB   lsb(nop_)   ;   ?   ( -- val )  read a char from input
01D5   6E                     DB   lsb(nop_)   ;   @
01D6                             ; REPDAT 26, lsb(call_)		; call a command a, b ....z
01D6                          ;*Macro unroll:  LITDAT 26
01D6   1A                     DB   26   
01D7   28                     DB   lsb(call_)   ;   a
01D8   28                     DB   lsb(call_)   ;   b
01D9   28                     DB   lsb(call_)   ;   c
01DA   28                     DB   lsb(call_)   ;   d
01DB   28                     DB   lsb(call_)   ;   e
01DC   28                     DB   lsb(call_)   ;   F
01DD   28                     DB   lsb(call_)   ;   G
01DE   28                     DB   lsb(call_)   ;   h
01DF   28                     DB   lsb(call_)   ;   I
01E0   28                     DB   lsb(call_)   ;   J
01E1   28                     DB   lsb(call_)   ;   K
01E2   28                     DB   lsb(call_)   ;   l
01E3   28                     DB   lsb(call_)   ;   m
01E4   28                     DB   lsb(call_)   ;   N
01E5   28                     DB   lsb(call_)   ;   O
01E6   28                     DB   lsb(call_)   ;   p
01E7   28                     DB   lsb(call_)   ;   Q
01E8   28                     DB   lsb(call_)   ;   R
01E9   28                     DB   lsb(call_)   ;   S
01EA   28                     DB   lsb(call_)   ;   T
01EB   28                     DB   lsb(call_)   ;   U
01EC   28                     DB   lsb(call_)   ;   V
01ED   28                     DB   lsb(call_)   ;   W
01EE   28                     DB   lsb(call_)   ;   X
01EF   28                     DB   lsb(call_)   ;   Y
01F0   28                     DB   lsb(call_)   ;   z
01F1                          ;*Macro unroll:  LITDAT 6
01F1   06                     DB   6   
01F2   6E                     DB   lsb(nop_)   ;   [
01F3   6E                     DB   lsb(nop_)   ;   \
01F4   6E                     DB   lsb(nop_)   ;   ]
01F5   6E                     DB   lsb(nop_)   ;   ^
01F6   6E                     DB   lsb(nop_)   ;   _
01F7   6E                     DB   lsb(nop_)   ;   `    	
01F8                             ; REPDAT 26, lsb(var_)		
01F8                          ;*Macro unroll:  LITDAT 26
01F8   1A                     DB   26   
01F9   E9                     DB   lsb(a_)   ;   a
01FA   DD                     DB   lsb(var_)   ;   b
01FB   EC                     DB   lsb(c_)   ;   c
01FC   EF                     DB   lsb(d_)   ;   d
01FD   F2                     DB   lsb(e_)   ;   e
01FE   F5                     DB   lsb(f_)   ;   f
01FF   F8                     DB   lsb(g_)   ;   g
0200   DD                     DB   lsb(var_)   ;   h
0201   FB                     DB   lsb(i_)   ;   i
0202   DD                     DB   lsb(var_)   ;   j
0203   FE                     DB   lsb(k_)   ;   k
0204   01                     DB   lsb(l_)   ;   l
0205   04                     DB   lsb(m_)   ;   m
0206   04                     DB   lsb(m_)   ;   n
0207   0A                     DB   lsb(o_)   ;   o
0208   0D                     DB   lsb(p_)   ;   p
0209   DD                     DB   lsb(var_)   ;   q
020A   10                     DB   lsb(r_)   ;   r
020B   13                     DB   lsb(s_)   ;   s
020C   DD                     DB   lsb(var_)   ;   t
020D   16                     DB   lsb(u_)   ;   u
020E   DD                     DB   lsb(var_)   ;   v
020F   19                     DB   lsb(w_)   ;   w
0210   1C                     DB   lsb(x_)   ;   x
0211   DD                     DB   lsb(var_)   ;   y
0212   DD                     DB   lsb(var_)   ;   z
0213                          ;*Macro unroll:  LITDAT 5
0213   05                     DB   5   
0214   6E                     DB   lsb(nop_)   ;   {
0215   0B                     DB   lsb(or_)   ;   |
0216   6E                     DB   lsb(nop_)   ;   }
0217   6E                     DB   lsb(nop_)   ;   ~
0218   6E                     DB   lsb(nop_)   ;   DEL	
0219                          ;*Macro unroll:  LITDAT 32
0219   20                     DB   32   
021A   00                     DB   lsb(EMPTY)   ; NUL ^@
021B   00                     DB   lsb(EMPTY)   ; SOH ^a  1
021C   00                     DB   lsb(EMPTY)   ; STX ^b  2
021D   00                     DB   lsb(EMPTY)   ; ETX ^c  3
021E   00                     DB   lsb(EMPTY)   ; EOT ^d  4
021F   00                     DB   lsb(EMPTY)   ; ENQ ^e  5
0220   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0221   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0222   00                     DB   lsb(EMPTY)   ; BS  ^h  8
0223   00                     DB   lsb(EMPTY)   ; TAB ^I  9
0224   00                     DB   lsb(EMPTY)   ; LF  ^J 10
0225   00                     DB   lsb(EMPTY)   ; VT  ^K 11
0226   00                     DB   lsb(EMPTY)   ; FF  ^l 12
0227   00                     DB   lsb(EMPTY)   ; CR  ^m 13
0228   00                     DB   lsb(EMPTY)   ; SO  ^N 14
0229   00                     DB   lsb(EMPTY)   ; SI  ^O 15
022A   00                     DB   lsb(EMPTY)   ; DLE ^p 16
022B   00                     DB   lsb(EMPTY)   ; ^Q
022C   00                     DB   lsb(EMPTY)   ; ^R
022D   00                     DB   lsb(EMPTY)   ; ^S
022E   00                     DB   lsb(EMPTY)   ; ^T
022F   00                     DB   lsb(EMPTY)   ; ^U
0230   00                     DB   lsb(EMPTY)   ; ^V
0231   00                     DB   lsb(EMPTY)   ; ^W
0232   00                     DB   lsb(EMPTY)   ; ^X
0233   00                     DB   lsb(EMPTY)   ; ^Y
0234   00                     DB   lsb(EMPTY)   ; ^z
0235   00                     DB   lsb(EMPTY)   ; ^[
0236   00                     DB   lsb(EMPTY)   ; ^\
0237   00                     DB   lsb(EMPTY)   ; ^]
0238   00                     DB   lsb(EMPTY)   ; ^^
0239   00                     DB   lsb(EMPTY)   ; ^_
023A                          ;*Macro unroll:  LITDAT 5
023A   05                     DB   5   
023B   00                     DB   lsb(aNop_)   ;a0    SP  				;space
023C   00                     DB   lsb(aNop_)   ;a1    \!       			; this is a bug shud be lsb(cstore_)
023D   00                     DB   lsb(aNop_)   ;a2    \"  				
023E   00                     DB   lsb(aNop_)   ;a3    \#  utility command		; table of special routines ie #5 etc				
023F   00                     DB   lsb(aNop_)   ;a4    \$  prints a newline to output	
0240                             ; REPDAT 3, lsb(aNop_)
0240                          ;*Macro unroll:  LITDAT 3
0240   03                     DB   3   
0241   00                     DB   lsb(aNop_)   ; 
0242   00                     DB   lsb(aNop_)   ; 
0243   00                     DB   lsb(aNop_)   ; 
0244                          ;*Macro unroll:  LITDAT 8
0244   08                     DB   8   
0245   00                     DB   lsb(aNop_)   ;a8    \(  ( b -- )
0246   00                     DB   lsb(aNop_)   ;a9    \)
0247   00                     DB   lsb(aNop_)   ;aa    \*
0248   00                     DB   lsb(aNop_)   ;ab    \+
0249   00                     DB   lsb(aNop_)   ;ac    \,  ( b -- ) prints a char
024A   00                     DB   lsb(aNop_)   ;ad    \-
024B   00                     DB   lsb(aNop_)   ;ae    \.  ( b -- ) prints a string from add term by null char
024C   00                     DB   lsb(aNop_)   ;af    \/
024D                             ; REPDAT 10, lsb(aNop_)
024D                          ;*Macro unroll:  LITDAT 10
024D   0A                     DB   10   
024E   00                     DB   lsb(aNop_)   ; 
024F   00                     DB   lsb(aNop_)   ; 
0250   00                     DB   lsb(aNop_)   ; 
0251   00                     DB   lsb(aNop_)   ; 
0252   00                     DB   lsb(aNop_)   ; 
0253   00                     DB   lsb(aNop_)   ; 
0254   00                     DB   lsb(aNop_)   ; 
0255   00                     DB   lsb(aNop_)   ; 
0256   00                     DB   lsb(aNop_)   ; 
0257   00                     DB   lsb(aNop_)   ; 
0258                          ;*Macro unroll:  LITDAT 7
0258   07                     DB   7   
0259   00                     DB   lsb(aNop_)   ;ba    \:	return add of a anon def, \: 1 2 3;    \\ ret add of this
025A   00                     DB   lsb(aNop_)   ;bb    \;
025B   00                     DB   lsb(aNop_)   ;bc    \<  ( port -- val )
025C   00                     DB   lsb(aNop_)   ;bd    \=
025D   00                     DB   lsb(aNop_)   ;be    \>  ( val port -- )
025E   00                     DB   lsb(aNop_)   ;bf    \?
025F   00                     DB   lsb(aNop_)   ;c0    \@      byte fetch
0260                             ; REPDAT 26, lsb(aNop_)
0260                          ;*Macro unroll:  LITDAT 26
0260   1A                     DB   26   
0261   00                     DB   lsb(aNop_)   ; 
0262   00                     DB   lsb(aNop_)   ; 
0263   00                     DB   lsb(aNop_)   ; 
0264   00                     DB   lsb(aNop_)   ; 
0265   00                     DB   lsb(aNop_)   ; 
0266   00                     DB   lsb(aNop_)   ; 
0267   00                     DB   lsb(aNop_)   ; 
0268   00                     DB   lsb(aNop_)   ; 
0269   00                     DB   lsb(aNop_)   ; 
026A   00                     DB   lsb(aNop_)   ; 
026B   00                     DB   lsb(aNop_)   ; 
026C   00                     DB   lsb(aNop_)   ; 
026D   00                     DB   lsb(aNop_)   ; 
026E   00                     DB   lsb(aNop_)   ; 
026F   00                     DB   lsb(aNop_)   ; 
0270   00                     DB   lsb(aNop_)   ; 
0271   00                     DB   lsb(aNop_)   ; 
0272   00                     DB   lsb(aNop_)   ; 
0273   00                     DB   lsb(aNop_)   ; 
0274   00                     DB   lsb(aNop_)   ; 
0275   00                     DB   lsb(aNop_)   ; 
0276   00                     DB   lsb(aNop_)   ; 
0277   00                     DB   lsb(aNop_)   ; 
0278   00                     DB   lsb(aNop_)   ; 
0279   00                     DB   lsb(aNop_)   ; 
027A   00                     DB   lsb(aNop_)   ; 
027B                          ;*Macro unroll:  LITDAT 6
027B   06                     DB   6   
027C   00                     DB   lsb(aNop_)   ;     \[
027D   00                     DB   lsb(aNop_)   ;     \\  comment text, skips reading until end of line
027E   00                     DB   lsb(aNop_)   ;     \]
027F   00                     DB   lsb(aNop_)   ;     \^  ( -- ? ) execute Siena definition a is address of Siena code
0280   00                     DB   lsb(aNop_)   ;       \_  ( b -- ) conditional early return - stop everything
0281   00                     DB   lsb(aNop_)   ;     \`  ( -- adr ) defines a string \` string ` then use \. to prt
0282                             ; REPDAT 8, lsb(altVar_)  ;e1	\a...\h
0282                          ;*Macro unroll:  LITDAT 8
0282   08                     DB   8   
0283   00                     DB   lsb(aNop_)   
0284   00                     DB   lsb(aNop_)   
0285   00                     DB   lsb(aNop_)   
0286   00                     DB   lsb(aNop_)   
0287   00                     DB   lsb(aNop_)   
0288   00                     DB   lsb(aNop_)   
0289   00                     DB   lsb(aNop_)   
028A   00                     DB   lsb(aNop_)   
028B                          ;*Macro unroll:  LITDAT 2
028B   02                     DB   2   
028C   00                     DB   lsb(aNop_)   ; returns index variable of current loop
028D   00                     DB   lsb(aNop_)   ; returns index variable of outer loop     \i+6
028E                             ; REPDAT 16, lsb(altVar_)		; \k...\z
028E                          ;*Macro unroll:  LITDAT 16
028E   10                     DB   16   
028F   00                     DB   lsb(aNop_)   
0290   00                     DB   lsb(aNop_)   
0291   00                     DB   lsb(aNop_)   
0292   00                     DB   lsb(aNop_)   
0293   00                     DB   lsb(aNop_)   
0294   00                     DB   lsb(aNop_)   
0295   00                     DB   lsb(aNop_)   
0296   00                     DB   lsb(aNop_)   
0297   00                     DB   lsb(aNop_)   
0298   00                     DB   lsb(aNop_)   
0299   00                     DB   lsb(aNop_)   
029A   00                     DB   lsb(aNop_)   
029B   00                     DB   lsb(aNop_)   
029C   00                     DB   lsb(aNop_)   
029D   00                     DB   lsb(aNop_)   
029E   00                     DB   lsb(aNop_)   
029F                          ;*Macro unroll:  LITDAT 5
029F   05                     DB   5   
02A0   00                     DB   lsb(aNop_)   ;       { ( -- n ) pop from Siena return stack
02A1   00                     DB   lsb(aNop_)   ; 
02A2   00                     DB   lsb(aNop_)   ;       } ( n -- ) push to return stack
02A3   00                     DB   lsb(aNop_)   ;       ~ ( b -- ) conditional break from loop
02A4   00                     DB   lsb(aNop_)   ;       DEL
02A5                          ;*Macro unroll:  ENDDAT
02A5   00                     DB   0   
02A6                ETX:         ;=12
02A6   21 00 E6               LD   hl,-DSTACK   
02A9   39                     ADD   hl,SP   
02AA   30 03                  JR   nc,etx1   
02AC   31 00 1A               LD   SP,DSTACK   
02AF                ETX1:        
02AF   18 16                  JR   interpret   
02B1                START:       
02B1   31 00 1A               LD   SP,DSTACK   ; start of Siena
02B4   CD 45 03               CALL   init   ; setups
02B7   CD 98 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
02BA   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
02C7                INTERPRET:      
02C7   CD 84 08               CALL   prompt   
02CA   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
02CD   ED 43 84 1C            LD   (vTIBPtr),bc   
02D1                INTERPRET2:      ; calc nesting (a macro might have changed it)
02D1   1E 00                  LD   e,0   ; initilize nesting value
02D3   C5                     PUSH   bc   ; save offset into TIB,
02D4                             ; bc is also the count of chars in TIB
02D4   21 00 18               LD   hl,TIB   ; hl is start of TIB
02D7   18 06                  JR   interpret4   
02D9                INTERPRET3:      
02D9   7E                     LD   a,(hl)   ; a = char in TIB
02DA   23                     INC   hl   ; inc pointer into TIB
02DB   0B                     DEC   bc   ; dec count of chars in TIB
02DC   CD BD 03               CALL   nesting   ; update nesting value
02DF                INTERPRET4:      
02DF   79                     LD   a,c   ; is count zero?
02E0   B0                     OR   b   
02E1   20 F6                  JR   nz,interpret3   ; if not loop
02E3   C1                     POP   bc   ; restore offset into TIB
02E4                             ; *******************************************************************
02E4                             ; Wait for a character from the serial input (keyboard)
02E4                             ; and store it in the text buffer. Keep accepting characters,
02E4                             ; increasing the instruction pointer bc - until a newline received.
02E4                             ; *******************************************************************
02E4                WAITCHAR:      
02E4   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
02E7   FE 20                  CP   $20   ; compare to space
02E9   30 25                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
02EB   FE 00                  CP   $0   ; is it end of string? null end of string
02ED   28 45                  JR   z,waitchar4   
02EF   FE 0D                  CP   "\r"   ; carriage return? ascii 13
02F1   28 2B                  JR   z,waitchar3   ; if anything else its macro/control
02F3                             ; ld d,0
02F3                MACRO:       ;=25
02F3   ED 43 84 1C            LD   (vTIBPtr),bc   
02F7   21 80 1B               LD   hl,ctrlCodes   
02FA   85                     ADD   a,l   ;look up key of macros
02FB   6F                     LD   l,a   
02FC   5E                     LD   e,(hl)   
02FD   7B                     LD   a,e   
02FE   B7                     OR   a   
02FF   28 09                  JR   z,macro1   
0301   16 01                  LD   d,msb(macros)   
0303   D5                     PUSH   de   
0304   CD 8F 03               CALL   ENTER   ;Siena go operation and jump to it
0307   5C 5E 00               .CSTR   "\\^"   
030A                MACRO1:      
030A   ED 4B 84 1C            LD   bc,(vTIBPtr)   
030E   18 C1                  JR   interpret2   
0310                WAITCHAR1:      
0310   21 00 18               LD   hl,TIB   
0313   09                     ADD   hl,bc   
0314   77                     LD   (hl),a   ; store the character in textbuf
0315   03                     INC   bc   
0316   CD 85 00               CALL   putchar   ; echo character to screen
0319   CD BD 03               CALL   nesting   
031C   18 C6                  JR   waitchar   ; wait for next character
031E                WAITCHAR3:      
031E   21 00 18               LD   hl,TIB   
0321   09                     ADD   hl,bc   
0322   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0324   23                     INC   hl   
0325   36 0A                  LD   (hl),"\n"   
0327   23                     INC   hl   ; ????
0328   03                     INC   bc   
0329   03                     INC   bc   
032A   CD AC 08               CALL   crlf   ; echo character to screen
032D   7B                     LD   a,e   ; if zero nesting append and ETX after \r
032E   B7                     OR   a   
032F   20 B3                  JR   nz,waitchar   
0331   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
0333   03                     INC   bc   
0334                WAITCHAR4:      
0334   ED 43 84 1C            LD   (vTIBPtr),bc   
0338   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
033B   0B                     DEC   bc   
033C                             ; ********************************************************************************
033C                             ; 
033C                             ; Dispatch Routine.
033C                             ; 
033C                             ; Get the next character and form a 1 byte jump address
033C                             ; 
033C                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
033C                             ; jump to the selected function.
033C                             ; 
033C                             ; Individual handler routines will deal with each category:
033C                             ; 
033C                             ; 1. Detect characters a-z and jump to the User Command handler routine
033C                             ; 
033C                             ; 2. Detect characters a-z and jump to the variable handler routine
033C                             ; 
033C                             ; 3. All other characters are punctuation and cause a jump to the associated
033C                             ; primitive code.
033C                             ; 
033C                             ; Instruction Pointer IP bc is incremented
033C                             ; 
033C                             ; *********************************************************************************
033C                NEXT:        ;=9
033C   03                     INC   bc   ;       Increment the IP
033D   0A                     LD   a,(bc)   ;       Get the next character and dispatch
033E   6F                     LD   l,a   ;       Index into table
033F   26 1B                  LD   h,msb(opcodes)   ;       Start address of jump table
0341   6E                     LD   l,(hl)   ;       get low jump address
0342   26 04                  LD   h,msb(page4)   ;       Load h with the 1st page address
0344   E9                     JP   (hl)   ;       Jump to routine
0345                INIT:        
0345   21 80 1A               LD   hl,LSTACK   
0348   22 30 1C               LD   (vLoopSP),hl   ; Loop stack pointer stored in memory
034B   DD 21 80 19            LD   ix,RSTACK   
034F   FD 21 3C 03            LD   iy,next   ; iy provides a faster jump to next
0353   21 80 01               LD   hl,ialtVars   
0356   11 80 1C               LD   de,altVars   
0359   01 10 00               LD   bc,8 * 2   
035C   ED B0                  LDIR      
035E   21 C0 1C               LD   hl,data   ; init namespaces to 0 using ldir
0361   54 5D                  LD   de,hl   
0363   13                     INC   de   
0364   36 00                  LD   (hl),0   
0366   01 68 00               LD   bc,DATASIZE   
0369   ED B0                  LDIR      
036B                INITOPS:      
036B   21 90 01               LD   hl,iOpcodes   
036E   11 00 1B               LD   de,opcodes   
0371   01 00 01               LD   bc,256   
0374                INITOPS1:      
0374   7E                     LD   a,(hl)   
0375   23                     INC   hl   
0376   CB 27                  SLA   a   
0378   C8                     RET   z   
0379   38 09                  JR   c,initOps2   
037B   CB 3F                  SRL   a   
037D   4F                     LD   c,a   
037E   06 00                  LD   b,0   
0380   ED B0                  LDIR      
0382   18 F0                  JR   initOps1   
0384                INITOPS2:      
0384   CB 3F                  SRL   a   
0386   47                     LD   b,a   
0387   7E                     LD   a,(hl)   
0388   23                     INC   hl   
0389                INITOPS2A:      
0389   12                     LD   (de),a   
038A   13                     INC   de   
038B   10 FC                  DJNZ   initOps2a   
038D   18 E5                  JR   initOps1   
038F                ENTER:       ;=9
038F   60 69                  LD   hl,bc   
0391   CD 96 08               CALL   rpush   ; save Instruction Pointer
0394   C1                     POP   bc   
0395   0B                     DEC   bc   
0396   FD E9                  JP   (iy)   
0398                PRINTSTR:      ;=14
0398   E3                     EX   (SP),hl   ; swap			
0399   CD 91 08               CALL   putStr   
039C   23                     INC   hl   ; inc past null
039D   E3                     EX   (SP),hl   ; put it back	
039E   C9                     RET      
039F                LOOKUPREF:      
039F   16 00                  LD   d,0   
03A1                LOOKUPREF0:      
03A1   FE 61                  CP   "a"   
03A3   30 06                  JR   nc,lookupRef2   
03A5                LOOKUPREF1:      
03A5   D6 61                  SUB   "a"   
03A7   1E 00                  LD   e,0   
03A9   18 04                  JR   lookupRef3   
03AB                LOOKUPREF2:      
03AB   D6 61                  SUB   "a"   
03AD   1E 34                  LD   e,26*2   
03AF                LOOKUPREF3:      
03AF   87                     ADD   a,a   
03B0   83                     ADD   a,e   
03B1   21 C0 1C               LD   hl,DATA   
03B4   85                     ADD   a,l   
03B5   6F                     LD   l,a   
03B6   3E 00                  LD   a,0   
03B8   8C                     ADC   a,h   
03B9   67                     LD   h,a   
03BA   AF                     XOR   a   
03BB   B3                     OR   e   ; sets z flag if a-z
03BC   C9                     RET      
03BD                             ; **************************************************************************
03BD                             ; calculate nesting value
03BD                             ; a is char to be tested,
03BD                             ; e is the nesting value (initially 0)
03BD                             ; e is increased by ( and [
03BD                             ; e is decreased by ) and ]
03BD                             ; e has its bit 7 toggled by `
03BD                             ; limited to 127 levels
03BD                             ; **************************************************************************
03BD                NESTING:      ; 
03BD   FE 22                  CP   $22   ; quote char
03BF   20 0A                  JR   nz,nesting1   
03C1   CB 7B                  BIT   7,e   
03C3   28 03                  JR   z,nesting1a   
03C5   CB BB                  RES   7,e   
03C7   C9                     RET      
03C8                NESTING1A:      
03C8   CB FB                  SET   7,e   
03CA   C9                     RET      
03CB                NESTING1:      
03CB   CB 7B                  BIT   7,e   
03CD   C0                     RET   nz   
03CE   FE 7B                  CP   "{"   
03D0   28 08                  JR   z,nesting2   
03D2   FE 5B                  CP   "["   
03D4   28 04                  JR   z,nesting2   
03D6   FE 28                  CP   "("   
03D8   20 02                  JR   nz,nesting3   
03DA                NESTING2:      
03DA   1C                     INC   e   
03DB   C9                     RET      
03DC                NESTING3:      
03DC   FE 7D                  CP   "}"   
03DE   28 07                  JR   z,nesting4   
03E0   FE 5D                  CP   "]"   
03E2   28 03                  JR   z,nesting4   
03E4   FE 29                  CP   ")"   
03E6   C0                     RET   nz   
03E7                NESTING4:      
03E7   1D                     DEC   e   
03E8   C9                     RET      
03E9                             ; **********************************************************************			
03E9                             ; Page 4 primitive routines
03E9                             ; **********************************************************************
03E9                          ALIGN   $100   
0400                PAGE4:       
0400                AND_:        
0400   D1                     POP   de   ;     Bitwise and the top 2 elements of the stack
0401   E1                     POP   hl   ; 
0402   7B                     LD   a,e   ; 
0403   A5                     AND   l   ; 
0404   6F                     LD   l,a   ; 
0405   7A                     LD   a,d   ; 
0406   A4                     AND   h   ; 
0407                AND1:        
0407   67                     LD   h,a   ; 
0408   E5                     PUSH   hl   ; 
0409   FD E9                  JP   (iy)   ; 
040B                             ; 
040B                OR_:         
040B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
040C   E1                     POP   hl   
040D   7B                     LD   a,e   
040E   B5                     OR   l   
040F   6F                     LD   l,a   
0410   7A                     LD   a,d   
0411   B4                     OR   h   
0412   18 F3                  JR   and1   
0414                XOR_:        
0414   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0415                XOR1:        
0415   E1                     POP   hl   
0416   7B                     LD   a,e   
0417   AD                     XOR   l   
0418   6F                     LD   l,a   
0419   7A                     LD   a,d   
041A   AC                     XOR   h   
041B   18 EA                  JR   and1   
041D                INV_:        ; Bitwise INVert the top member of the stack
041D   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0420   18 F3                  JR   xor1   
0422                ADD_:        ; add the top 2 members of the stack
0422   D1                     POP   de   
0423   E1                     POP   hl   
0424   19                     ADD   hl,de   
0425   E5                     PUSH   hl   
0426   FD E9                  JP   (iy)   
0428                CALL_:       
0428   0A                     LD   a,(bc)   
0429   CD A5 03               CALL   lookupRef1   
042C   5E                     LD   e,(hl)   
042D   23                     INC   hl   
042E   56                     LD   d,(hl)   
042F   C3 2C 06               JP   go1   
0432                DOT_:        
0432   E1                     POP   hl   
0433   CD 1D 08               CALL   prtdec   
0436                DOT2:        
0436   3E 20                  LD   a," "   
0438   CD 85 00               CALL   putchar   
043B   FD E9                  JP   (iy)   
043D                HDOT_:       ; print hexadecimal
043D   E1                     POP   hl   
043E   CD 65 08               CALL   prthex   
0441   18 F3                  JR   dot2   
0443                DROP_:       ; Discard the top member of the stack
0443   E1                     POP   hl   
0444   FD E9                  JP   (iy)   
0446                DUP_:        
0446   E1                     POP   hl   ; Duplicate the top member of the stack
0447   E5                     PUSH   hl   
0448   E5                     PUSH   hl   
0449   FD E9                  JP   (iy)   
044B                ETX_:        
044B   C3 A6 02               JP   ETX   
044E                EXIT_:       
044E   03                     INC   bc   ; store offests into a table of bytes, smaller
044F   50 59                  LD   de,bc   
0451   CD A1 08               CALL   rpop   ; Restore Instruction pointer
0454   44 4D                  LD   bc,hl   
0456   EB                     EX   de,hl   
0457   E9                     JP   (hl)   
0458                FETCH_:      ; Fetch the value from the address placed on the top of the stack
0458   E1                     POP   hl   
0459                FETCH1:      
0459   5E                     LD   e,(hl)   
045A   23                     INC   hl   
045B   56                     LD   d,(hl)   
045C   D5                     PUSH   de   
045D   FD E9                  JP   (iy)   
045F                HEXNUM_:      
045F   C3 00 08               JP   hexnum   
0462                KEY_:        
0462   CD 81 00               CALL   getchar   
0465   26 00                  LD   h,0   
0467   6F                     LD   l,a   
0468   E5                     PUSH   hl   
0469   FD E9                  JP   (iy)   
046B   C3 81 07     MUL_:     JP   mul   
046E                NOP_:        
046E   C3 3C 03               JP   next   ; hardwire white space to always go to next (important for arrays)
0471                OVER_:       
0471   E1                     POP   hl   ; Duplicate 2nd element of the stack
0472   D1                     POP   de   
0473   D5                     PUSH   de   
0474   E5                     PUSH   hl   
0475   D5                     PUSH   de   ; and push it to top of stack
0476   FD E9                  JP   (iy)   
0478                RET_:        
0478   CD A1 08               CALL   rpop   ; Restore Instruction pointer
047B   44 4D                  LD   bc,hl   
047D   FD E9                  JP   (iy)   
047F                ROT_:        ; a b c -- b c a
047F   D1                     POP   de   ; a b                   de = c
0480   E1                     POP   hl   ; a                     hl = b
0481   E3                     EX   (SP),hl   ; b                     hl = a
0482   D5                     PUSH   de   ; b c
0483   E5                     PUSH   hl   ; b c a
0484   FD E9                  JP   (iy)   
0486                             ;  Left shift { is multiply by 2		
0486                SHL_:        
0486   E1                     POP   hl   ; Duplicate the top member of the stack
0487   29                     ADD   hl,hl   
0488   E5                     PUSH   hl   ; shift left fallthrough into add_
0489   FD E9                  JP   (iy)   ; 
048B                             ;  Right shift } is a divide by 2		
048B                SHR_:        
048B   E1                     POP   hl   ; Get the top member of the stack
048C                SHR1:        
048C   CB 3C                  SRL   h   
048E   CB 1D                  RR   l   
0490   E5                     PUSH   hl   
0491   FD E9                  JP   (iy)   ; 
0493                STORE_:      ; Store the value at the address placed on the top of the stack
0493   E1                     POP   hl   
0494   D1                     POP   de   
0495   73                     LD   (hl),e   
0496   23                     INC   hl   
0497   72                     LD   (hl),d   
0498   FD E9                  JP   (iy)   
049A                SWAP_:       ; a b -- b a Swap the top 2 elements of the stack
049A   E1                     POP   hl   
049B   E3                     EX   (SP),hl   
049C   E5                     PUSH   hl   
049D   FD E9                  JP   (iy)   
049F                NEG_:        
049F   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
04A2   D1                     POP   de   ; 
04A3   18 02                  JR   sub2   ; use the SUBtract routine
04A5                SUB_:        ; Subtract the value 2nd on stack from top of stack
04A5   D1                     POP   de   ; 
04A6   E1                     POP   hl   ;      Entry point for INVert
04A7                SUB2:        
04A7   B7                     OR   a   ;      Entry point for NEGate
04A8   ED 52                  SBC   hl,de   ; 15t
04AA   E5                     PUSH   hl   ; 
04AB   FD E9                  JP   (iy)   ; 
04AD                             ; 5
04AD                EQ_:         
04AD   E1                     POP   hl   
04AE   D1                     POP   de   
04AF   B7                     OR   a   ; reset the carry flag
04B0   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04B2   28 14                  JR   z,true_   
04B4                FALSE_:      
04B4   21 00 00               LD   hl,0   
04B7   E5                     PUSH   hl   
04B8   FD E9                  JP   (iy)   
04BA                GT_:         
04BA   D1                     POP   de   
04BB   E1                     POP   hl   
04BC   18 02                  JR   lt1   
04BE                LT_:         
04BE   E1                     POP   hl   
04BF   D1                     POP   de   
04C0                LT1:         
04C0   B7                     OR   a   ; reset the carry flag
04C1   ED 52                  SBC   hl,de   
04C3   28 EF                  JR   z,false_   
04C5   FA B4 04               JP   m,false_   
04C8                TRUE_:       
04C8   21 01 00               LD   hl,1   
04CB   E5                     PUSH   hl   
04CC   FD E9                  JP   (iy)   
04CE                GTE_:        
04CE   D1                     POP   de   
04CF   E1                     POP   hl   
04D0   18 02                  JR   lte1   
04D2                LTE_:        
04D2   E1                     POP   hl   
04D3   D1                     POP   de   
04D4                LTE1:        
04D4   B7                     OR   a   ; reset the carry flag
04D5   ED 52                  SBC   hl,de   
04D7   FA B4 04               JP   m,false_   
04DA   C3 01 00               JP   true   
04DD                VAR_:        
04DD   0A                     LD   a,(bc)   
04DE   CD AB 03               CALL   lookupRef2   
04E1   E5                     PUSH   hl   
04E2   FD E9                  JP   (iy)   
04E4   C3 D5 07     NUM_:     JP   num   
04E7                LAMBDA_:      
04E7   18 3B                  JR   lambda   
04E9                A_:          
04E9   C3 6B 06               JP   a   
04EC                C_:          
04EC   C3 7B 06               JP   c   
04EF                D_:          
04EF   C3 8B 06               JP   d   
04F2                E_:          
04F2   C3 A5 06               JP   e   
04F5                F_:          
04F5   C3 B0 06               JP   f   
04F8                G_:          
04F8   C3 BB 06               JP   g   
04FB                I_:          
04FB   C3 D0 06               JP   i   
04FE                K_:          
04FE   C3 E0 06               JP   k   
0501                L_:          
0501   C3 EE 06               JP   l   
0504                M_:          
0504   C3 FE 06               JP   m   
0507                N_:          
0507   C3 0E 07               JP   n   
050A                O_:          
050A   C3 19 07               JP   o   
050D                P_:          
050D   C3 29 07               JP   p   
0510                R_:          
0510   C3 34 07               JP   r   
0513                S_:          
0513   C3 3F 07               JP   s   
0516                U_:          
0516   C3 5E 07               JP   u   
0519                W_:          
0519   C3 69 07               JP   w   
051C                X_:          
051C   C3 74 07               JP   x   
051F   18 18        DIV_:     JR   div   
0521                             ;*******************************************************************
0521                             ; Page 5 primitive routines
0521                             ;*******************************************************************
0521                             ;falls through
0521   E5                     PUSH   hl   
0522   FD E9                  JP   (iy)   
0524                LAMBDA:      ;=
0524   03                     INC   bc   
0525   ED 5B 8E 1C            LD   de,(vHeapPtr)   ; start of defintion
0529   D5                     PUSH   de   
052A                LAMBDA1:      ; Skip to end of definition
052A   0A                     LD   a,(bc)   ; Get the next character
052B   03                     INC   bc   ; Point to next character
052C   12                     LD   (de),a   
052D   13                     INC   de   
052E   FE 29                  CP   ")"   ; Is it a semicolon
0530   20 F8                  JR   nz,lambda1   ; get the next element
0532                LAMBDA2:      
0532   0B                     DEC   bc   
0533   ED 53 8E 1C            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0537   FD E9                  JP   (iy)   
0539                             ; ********************************************************************
0539                             ; 16-bit division subroutine.
0539                             ; 
0539                             ; bc: divisor, de: dividend, hl: remainder
0539                             ; *********************************************************************
0539                             ; This divides de by bc, storing the result in de, remainder in hl
0539                             ; *********************************************************************
0539                             ; 1382 cycles
0539                             ; 35 bytes (reduced from 48)
0539                             ; 
0539                DIV:         ;=34
0539   D1                     POP   de   ; get first value
053A   E1                     POP   hl   ; get 2nd value
053B   C5                     PUSH   bc   ; Preserve the IP
053C   44                     LD   b,h   ; bc = 2nd value
053D   4D                     LD   c,l   
053E                             ; 
053E   21 00 00               LD   hl,0   ; Zero the remainder
0541   3E 10                  LD   a,16   ; Loop counter
0543                DIV1:        ;shift the bits from bc (numerator) into hl (accumulator)
0543   CB 21                  SLA   c   
0545   CB 10                  RL   b   
0547   ED 6A                  ADC   hl,hl   
0549   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (hl>=de)
054B   38 03                  JR   c,div2   
054D   0C                     INC   c   
054E   18 01                  JR   div3   
0550                DIV2:        ; remainder is not >= denominator, so we have to add de back to hl
0550   19                     ADD   hl,de   
0551                DIV3:        
0551   3D                     DEC   a   
0552   20 EF                  JR   nz,div1   
0554   50                     LD   d,b   ; Result from bc to de
0555   59                     LD   e,c   
0556                DIV4:        
0556   C1                     POP   bc   ; Restore the IP
0557   D5                     PUSH   de   ; push Result
0558   E5                     PUSH   hl   ; push remainder
0559   FD E9                  JP   (iy)   
055B                             ;=57
055B                             ; **************************************************************************
055B                             ; Page 6 Alt primitives
055B                             ; **************************************************************************
055B                          ALIGN   $100   
0600                PAGE6:       
0600                ANOP_:       
0600   FD E9                  JP   (iy)   
0602                CFETCH_:      
0602   E1                     POP   hl   
0603   16 00                  LD   d,0   
0605   5E                     LD   e,(hl)   
0606   D5                     PUSH   de   
0607   FD E9                  JP   (iy)   
0609                COMMENT_:      
0609   03                     INC   bc   ; point to next char
060A   0A                     LD   a,(bc)   
060B   FE 0D                  CP   "\r"   ; terminate at cr
060D   20 FA                  JR   nz,comment_   
060F   0B                     DEC   bc   
0610   FD E9                  JP   (iy)   
0612                CSTORE_:      
0612   E1                     POP   hl   
0613   D1                     POP   de   
0614   73                     LD   (hl),e   
0615   FD E9                  JP   (iy)   
0617                EMIT_:       
0617   E1                     POP   hl   
0618   7D                     LD   a,l   
0619   CD 85 00               CALL   putchar   
061C   FD E9                  JP   (iy)   
061E                EXEC_:       
061E   CD 23 06               CALL   exec1   
0621   FD E9                  JP   (iy)   
0623                EXEC1:       
0623   E1                     POP   hl   
0624   E3                     EX   (SP),hl   
0625   E9                     JP   (hl)   
0626                PROMPT_:      
0626   CD 84 08               CALL   prompt   
0629   FD E9                  JP   (iy)   
062B                GO_:         ;\^
062B   D1                     POP   de   
062C                GO1:         
062C   7A                     LD   a,d   ; skip if destination address is null
062D   B3                     OR   e   
062E   28 0E                  JR   z,go3   
0630   60 69                  LD   hl,bc   
0632   03                     INC   bc   ; read next char from source
0633   0A                     LD   a,(bc)   ; if ; to tail call optimise
0634   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
0636   28 03                  JR   z,go2   
0638   CD 96 08               CALL   rpush   ; save Instruction Pointer
063B                GO2:         
063B   42 4B                  LD   bc,de   
063D   0B                     DEC   bc   
063E                GO3:         
063E   FD E9                  JP   (iy)   
0640                INPORT_:      ; \<
0640   E1                     POP   hl   
0641   79                     LD   a,c   
0642   4D                     LD   c,l   
0643   ED 68                  IN   l,(c)   
0645   26 00                  LD   h,0   
0647   4F                     LD   c,a   
0648   E5                     PUSH   hl   
0649   FD E9                  JP   (iy)   
064B                NEWLN_:      
064B   CD AC 08               CALL   crlf   
064E   FD E9                  JP   (iy)   
0650                OUTPORT_:      
0650   E1                     POP   hl   
0651   59                     LD   e,c   
0652   4D                     LD   c,l   
0653   E1                     POP   hl   
0654   ED 69                  OUT   (c),l   
0656   4B                     LD   c,e   
0657   FD E9                  JP   (iy)   
0659                PRTSTR_:      
0659                PRTSTR:      
0659   E1                     POP   hl   
065A   CD 91 08               CALL   putStr   
065D   FD E9                  JP   (iy)   
065F                RPUSH_:      
065F   E1                     POP   hl   
0660   CD 96 08               CALL   rpush   
0663   FD E9                  JP   (iy)   
0665                RPOP_:       
0665   CD A1 08               CALL   rpop   
0668   E5                     PUSH   hl   
0669   FD E9                  JP   (iy)   
066B                             ; **************************************************************************
066B                             ; Page 6 primitive routines continued  (page 7)
066B                             ; **************************************************************************
066B                             ; falls through to following page
066B                A:           
066B   03                     INC   bc   
066C   0A                     LD   a,(bc)   
066D   FE 64                  CP   "d"   
066F   CA 22 04               JP   z,add_   
0672   FE 6E                  CP   "n"   
0674   CA 00 04               JP   z,and_   
0677   0B                     DEC   bc   
0678   C3 DD 04               JP   var_   
067B                C:           
067B   03                     INC   bc   
067C   0A                     LD   a,(bc)   
067D   FE 61                  CP   "a"   
067F   CA 7F 07               JP   z,case_   
0682   FE 6C                  CP   "l"   
0684   CA 7F 07               JP   z,closure_   
0687   0B                     DEC   bc   
0688   C3 DD 04               JP   var_   
068B                D:           
068B   03                     INC   bc   
068C   0A                     LD   a,(bc)   
068D   FE 65                  CP   "e"   
068F   CA 7F 07               JP   z,def_   
0692   FE 69                  CP   "i"   
0694   CA 1F 05               JP   z,div_   
0697   FE 72                  CP   "r"   
0699   CA 43 04               JP   z,drop_   
069C   FE 75                  CP   "u"   
069E   CA 46 04               JP   z,dup_   
06A1   0B                     DEC   bc   
06A2   C3 DD 04               JP   var_   
06A5                E:           
06A5   03                     INC   bc   
06A6   0A                     LD   a,(bc)   
06A7   FE 71                  CP   "q"   
06A9   CA AD 04               JP   z,eq_   
06AC   0B                     DEC   bc   
06AD   C3 DD 04               JP   var_   
06B0                F:           
06B0   03                     INC   bc   
06B1   0A                     LD   a,(bc)   
06B2   FE 69                  CP   "i"   
06B4   CA 7F 07               JP   z,filter_   
06B7   0B                     DEC   bc   
06B8   C3 DD 04               JP   var_   
06BB                G:           
06BB   03                     INC   bc   
06BC   0A                     LD   a,(bc)   
06BD   FE 65                  CP   "e"   
06BF   CA 7F 07               JP   z,get_   
06C2   FE 6F                  CP   "o"   
06C4   CA 2B 06               JP   z,go_   
06C7   FE 74                  CP   "t"   
06C9   CA BA 04               JP   z,gt_   
06CC   0B                     DEC   bc   
06CD   C3 DD 04               JP   var_   
06D0                I:           
06D0   03                     INC   bc   
06D1   0A                     LD   a,(bc)   
06D2   FE 66                  CP   "f"   
06D4   CA 7F 07               JP   z,if_   
06D7   FE 6E                  CP   "n"   
06D9   CA 1D 04               JP   z,inv_   
06DC   0B                     DEC   bc   
06DD   C3 DD 04               JP   var_   
06E0                K:           
06E0   C3 74 07               JP   x   
06E3   03                     INC   bc   
06E4   0A                     LD   a,(bc)   
06E5   FE 65                  CP   "e"   
06E7   CA 62 04               JP   z,key_   
06EA   0B                     DEC   bc   
06EB   C3 DD 04               JP   var_   
06EE                L:           
06EE   03                     INC   bc   
06EF   0A                     LD   a,(bc)   
06F0   FE 65                  CP   "e"   
06F2   CA 7F 07               JP   z,let_   
06F5   FE 74                  CP   "t"   
06F7   CA BE 04               JP   z,lt_   
06FA   0B                     DEC   bc   
06FB   C3 DD 04               JP   var_   
06FE                M:           
06FE   03                     INC   bc   
06FF   0A                     LD   a,(bc)   
0700   FE 61                  CP   "a"   
0702   CA 7F 07               JP   z,map_   
0705   FE 75                  CP   "u"   
0707   CA 6B 04               JP   z,mul_   
070A   0B                     DEC   bc   
070B   C3 DD 04               JP   var_   
070E                N:           
070E   03                     INC   bc   
070F   0A                     LD   a,(bc)   
0710   FE 65                  CP   "e"   
0712   CA 9F 04               JP   z,neg_   
0715   0B                     DEC   bc   
0716   C3 DD 04               JP   var_   
0719                O:           
0719   03                     INC   bc   
071A   0A                     LD   a,(bc)   
071B   FE 76                  CP   "v"   
071D   CA 71 04               JP   z,over_   
0720   FE 72                  CP   "r"   
0722   CA 0B 04               JP   z,or_   
0725   0B                     DEC   bc   
0726   C3 DD 04               JP   var_   
0729                P:           
0729   03                     INC   bc   
072A   0A                     LD   a,(bc)   
072B   FE 72                  CP   "r"   
072D   CA 7F 07               JP   z,print_   
0730   0B                     DEC   bc   
0731   C3 DD 04               JP   var_   
0734                R:           
0734   03                     INC   bc   
0735   0A                     LD   a,(bc)   
0736   FE 6F                  CP   "o"   
0738   CA 7F 04               JP   z,rot_   
073B   0B                     DEC   bc   
073C   C3 DD 04               JP   var_   
073F                S:           
073F   03                     INC   bc   
0740   0A                     LD   a,(bc)   
0741   FE 63                  CP   "c"   
0743   CA 7F 07               JP   z,scan_   
0746   FE 65                  CP   "e"   
0748   CA 7F 07               JP   z,set_   
074B   FE 68                  CP   "h"   
074D   CA 7F 07               JP   z,shift_   
0750   FE 75                  CP   "u"   
0752   CA A5 04               JP   z,sub_   
0755   FE 77                  CP   "w"   
0757   CA 9A 04               JP   z,swap_   
075A   0B                     DEC   bc   
075B   C3 DD 04               JP   var_   
075E                U:           
075E   03                     INC   bc   
075F   0A                     LD   a,(bc)   
0760   FE 6E                  CP   "n"   
0762   CA 7F 07               JP   z,undrop_   
0765   0B                     DEC   bc   
0766   C3 DD 04               JP   var_   
0769                W:           
0769   03                     INC   bc   
076A   0A                     LD   a,(bc)   
076B   FE 68                  CP   "h"   
076D   CA 7F 07               JP   z,while_   
0770   0B                     DEC   bc   
0771   C3 DD 04               JP   var_   
0774                X:           
0774   03                     INC   bc   
0775   0A                     LD   a,(bc)   
0776   FE 78                  CP   "x"   
0778   CA 14 04               JP   z,xor_   
077B   0B                     DEC   bc   
077C   C3 DD 04               JP   var_   
077F                CASE_:       
077F                CLOSURE_:      
077F                DEF_:        
077F                FILTER_:      
077F                GET_:        
077F                IF_:         
077F                LET_:        
077F                MAP_:        
077F                PRINT_:      
077F                SCAN_:       
077F                SET_:        
077F                SHIFT_:      
077F                UNDROP_:      
077F                WHILE_:      
077F   FD E9                  JP   (iy)   
0781                             ;*******************************************************************
0781                             ; Page 5 primitive routines continued
0781                             ;*******************************************************************
0781                             ; ********************************************************************
0781                             ; 16-bit multiply
0781                MUL:         ;=19
0781   D1                     POP   de   ; get first value
0782   E1                     POP   hl   
0783   C5                     PUSH   bc   ; Preserve the IP
0784   44                     LD   b,h   ; bc = 2nd value
0785   4D                     LD   c,l   
0786   21 00 00               LD   hl,0   
0789   3E 10                  LD   a,16   
078B                MUL2:        
078B   29                     ADD   hl,hl   
078C   CB 13                  RL   e   
078E   CB 12                  RL   d   
0790   30 04                  JR   nc,$+6   
0792   09                     ADD   hl,bc   
0793   30 01                  JR   nc,$+3   
0795   13                     INC   de   
0796   3D                     DEC   a   
0797   20 F2                  JR   nz,mul2   
0799   C1                     POP   bc   ; Restore the IP
079A   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
079B   FD E9                  JP   (iy)   
079D                             ; ********************************************************************************
079D                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in hl
079D                             ; Read the first character.
079D                             ;			
079D                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
079D                             ; and then added into the l register. (hl forms a 16-bit accumulator)
079D                             ; Fetch the next character, if it is a number, multiply contents of hl by 10
079D                             ; and then add in the next digit. Repeat this until a non-number character is
079D                             ; detected. add in the final digit so that hl contains the converted number.
079D                             ; push hl onto the stack and proceed to the dispatch routine.
079D                             ; ********************************************************************************
079D                XXNUM:       
079D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
07A0   0A                     LD   a,(bc)   ; Get numeral or -
07A1   FE 2D                  CP   "-"   
07A3   20 05                  JR   nz,num0   
07A5   08                     EX   af,af'   ; save zero flag = 1 for later
07A6   03                     INC   bc   
07A7   0A                     LD   a,(bc)   
07A8   18 03                  JR   num1   
07AA                NUM0:        
07AA   57                     LD   d,a   ; save a copy in d
07AB   08                     EX   af,af'   ; save zero flag = 0 for later
07AC   7A                     LD   a,d   ; restore char
07AD                NUM1:        ; corrected KB 24/11/21
07AD   D6 30                  SUB   $30   ;       Form decimal digit
07AF   85                     ADD   a,l   ;       add into bottom of hl
07B0   6F                     LD   l,a   ; 
07B1   3E 00                  LD   a,00   ;       Clear a
07B3   8C                     ADC   a,h   ; add with carry h-reg
07B4   67                     LD   h,a   ; Put result in h-reg
07B5   03                     INC   bc   ;       Increment IP
07B6   0A                     LD   a,(bc)   ;       and get the next character
07B7   FE 30                  CP   $30   ;       Less than $30
07B9   38 0C                  JR   c,num2   ;       Not a number / end of number
07BB   FE 3A                  CP   $3A   ;       Greater or equal to $3A
07BD   30 08                  JR   nc,num2   ;       Not a number / end of number
07BF                             ; Multiply digit(s) in hl by 10
07BF   29                     ADD   hl,hl   ;        2X
07C0   5D                     LD   e,l   ;        ld de,hl
07C1   54                     LD   d,h   ; 
07C2   29                     ADD   hl,hl   ;        4X
07C3   29                     ADD   hl,hl   ;        8X
07C4   19                     ADD   hl,de   ;        2X  + 8X  = 10X
07C5   18 E6                  JR   num1   
07C7                NUM2:        
07C7   0B                     DEC   bc   
07C8   08                     EX   af,af'   ; restore zero flag
07C9   20 07                  JR   nz,num3   
07CB   EB                     EX   de,hl   
07CC   21 00 00               LD   hl,0   
07CF   B7                     OR   a   
07D0   ED 52                  SBC   hl,de   
07D2                NUM3:        
07D2   E5                     PUSH   hl   ; Put the number on the stack
07D3   FD E9                  JP   (iy)   ; and process the next character
07D5                NUM:         
07D5   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
07D8   0A                     LD   a,(bc)   ; Get numeral or -
07D9   FE 2D                  CP   "-"   
07DB   20 01                  JR   nz,xnum0   
07DD   03                     INC   bc   ; no flags are affected
07DE                XNUM0:       
07DE   08                     EX   af,af'   ; save zero flag = 0 for later
07DF                XNUM1:       
07DF   0A                     LD   a,(bc)   
07E0   D6 30                  SUB   30h   
07E2   38 0E                  JR   c,xnum4   ; not a number, exit loop
07E4   03                     INC   bc   
07E5   54                     LD   d,h   
07E6   5D                     LD   e,l   
07E7   29                     ADD   hl,hl   
07E8   29                     ADD   hl,hl   
07E9   19                     ADD   hl,de   
07EA   29                     ADD   hl,hl   
07EB   85                     ADD   a,l   
07EC   6F                     LD   l,a   
07ED   30 F0                  JR   nc,xnum1   
07EF   24                     INC   h   
07F0   18 ED                  JR   xnum1   
07F2                XNUM4:       
07F2   0B                     DEC   bc   
07F3   08                     EX   af,af'   ; restore zero flag
07F4   20 07                  JR   nz,xnum5   
07F6   EB                     EX   de,hl   ; negate the value of hl
07F7   21 00 00               LD   hl,0   
07FA   B7                     OR   a   ; jump to sub2
07FB   ED 52                  SBC   hl,de   
07FD                XNUM5:       
07FD   E5                     PUSH   hl   ; Put the number on the stack
07FE   FD E9                  JP   (iy)   ; and process the next character
0800                HEXNUM:      ; 
0800   21 00 00               LD   hl,0   ; Clear hl to accept the number
0803                HEXNUM1:      
0803   03                     INC   bc   
0804   0A                     LD   a,(bc)   ; Get the character which is a numeral
0805   CB 77                  BIT   6,a   ; is it uppercase alpha?
0807   28 02                  JR   z,hexnum2   ; no a decimal
0809   D6 07                  SUB   7   ; sub 7  to make $a - $F
080B                HEXNUM2:      
080B   D6 30                  SUB   $30   ; Form decimal digit
080D   DA C7 07               JP   c,num2   
0810   FE 10                  CP   $0F+1   
0812   D2 C7 07               JP   nc,num2   
0815   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0816   29                     ADD   hl,hl   ; 4X
0817   29                     ADD   hl,hl   ; 8X
0818   29                     ADD   hl,hl   ; 16X
0819   85                     ADD   a,l   ; add into bottom of hl
081A   6F                     LD   l,a   ; 
081B   18 E6                  JR   hexnum1   
081D                PRTDEC:      ;=34 ; removes leading zeros
081D                             ; ld a,h
081D                             ; or l
081D                             ; ld a, "0"
081D                             ; jp z, putchar
081D   CB 7C                  BIT   7,h   
081F   28 0B                  JR   z,prtdec0   
0821   3E 2D                  LD   a,"-"   
0823   CD 85 00               CALL   putchar   
0826   AF                     XOR   a   
0827   95                     SUB   l   
0828   6F                     LD   l,a   
0829   9F                     SBC   a,a   
082A   94                     SUB   h   
082B   67                     LD   h,a   
082C                PRTDEC0:      
082C   C5                     PUSH   bc   
082D   0E 00                  LD   c,0   ; leading zeros flag = false
082F   11 F0 D8               LD   de,-10000   
0832   CD 4E 08               CALL   prtdec1   
0835   11 18 FC               LD   de,-1000   
0838   CD 4E 08               CALL   prtdec1   
083B   11 9C FF               LD   de,-100   
083E   CD 4E 08               CALL   prtdec1   
0841   1E F6                  LD   e,-10   
0843   CD 4E 08               CALL   prtdec1   
0846   0C                     INC   c   ; flag = true for at least digit
0847   1E FF                  LD   e,-1   
0849   CD 4E 08               CALL   prtdec1   
084C   C1                     POP   bc   
084D   C9                     RET      
084E                PRTDEC1:      
084E   06 2F                  LD   b,"0"-1   
0850                PRTDEC2:      
0850   04                     INC   b   
0851   19                     ADD   hl,de   
0852   38 FC                  JR   c,prtdec2   
0854   ED 52                  SBC   hl,de   
0856   3E 30                  LD   a,"0"   
0858   B8                     CP   b   
0859   20 05                  JR   nz,prtdec3   
085B   AF                     XOR   a   
085C   B1                     OR   c   
085D   C8                     RET   z   
085E   18 01                  JR   prtdec4   
0860                PRTDEC3:      
0860   0C                     INC   c   
0861                PRTDEC4:      
0861   78                     LD   a,b   
0862   C3 85 00               JP   putchar   
0865                PRTHEX:      ;=31
0865                             ; Display hl as a 16-bit number in hex.
0865   C5                     PUSH   bc   ; preserve the IP
0866   7C                     LD   a,h   
0867   CD 70 08               CALL   prthex2   
086A   7D                     LD   a,l   
086B   CD 70 08               CALL   prthex2   
086E   C1                     POP   bc   
086F   C9                     RET      
0870                PRTHEX2:      
0870   4F                     LD   c,a   
0871   1F                     RRA      
0872   1F                     RRA      
0873   1F                     RRA      
0874   1F                     RRA      
0875   CD 79 08               CALL   prthex3   
0878   79                     LD   a,c   
0879                PRTHEX3:      
0879   E6 0F                  AND   0x0F   
087B   C6 90                  ADD   a,0x90   
087D   27                     DAA      
087E   CE 40                  ADC   a,0x40   
0880   27                     DAA      
0881   C3 85 00               JP   putchar   
0884                             ;*******************************************************************
0884                             ; Subroutines
0884                             ;*******************************************************************
0884                PROMPT:      ;=9
0884   CD 98 03               CALL   printStr   
0887   0D 0A 3E 20 00         .CSTR   "\r\n> "   
088C   C9                     RET      
088D                PUTSTR0:      
088D   CD 85 00               CALL   putchar   
0890   23                     INC   hl   
0891                PUTSTR:      
0891   7E                     LD   a,(hl)   
0892   B7                     OR   a   
0893   20 F8                  JR   nz,putStr0   
0895   C9                     RET      
0896                RPUSH:       ;=11
0896   DD 2B                  DEC   ix   
0898   DD 74 00               LD   (ix+0),h   
089B   DD 2B                  DEC   ix   
089D   DD 75 00               LD   (ix+0),l   
08A0   C9                     RET      
08A1                RPOP:        ;=11
08A1   DD 6E 00               LD   l,(ix+0)   
08A4   DD 23                  INC   ix   
08A6   DD 66 00               LD   h,(ix+0)   
08A9   DD 23                  INC   ix   
08AB                RPOP2:       
08AB   C9                     RET      
08AC                CRLF:        ;=7
08AC   CD 98 03               CALL   printStr   
08AF   0D 0A 00               .CSTR   "\r\n"   
08B2   C9                     RET      
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          DS   LSIZE   
1A80                LSTACK:      
1A80                          ALIGN   $100   
1B00                OPCODES:      
1B00                          DS   $80   
1B80                CTRLCODES:      
1B80                ALTCODES:      
1B80                          DS   $80   
1C00                          ALIGN   $100   
1C00                MINTVARS:      
1C00                          DS   $30   
1C30                VLOOPSP:   DS   2   ; 
1C32                VBYTEMODE:   DS   2   ; 
1C34                TBPTR:    DS   2   ; reserved for tests
1C36                RST08:    DS   2   
1C38                RST10:    DS   2   
1C3A                RST18:    DS   2   
1C3C                RST20:    DS   2   
1C3E                RST28:    DS   2   
1C40                RST30:    DS   2   ; 
1C42                BAUD:     DS   2   ; 
1C44                INTVEC:   DS   2   ; 
1C46                NMIVEC:   DS   2   ; 
1C48                GETCVEC:   DS   2   ; 
1C4A                PUTCVEC:   DS   2   ; 
1C4C                          DS   26*2   
1C80                ALTVARS:      
1C80                VS0:      DS   2   ; a
1C82                          DS   2   ; b
1C84                VTIBPTR:   DS   2   ; c
1C86                          DS   2   ; d
1C88                VLASTDEF:   DS   2   ; e
1C8A                          DS   2   ; f
1C8C                          DS   2   ; g
1C8E                VHEAPPTR:   DS   2   ; h
1C90                          DS   2   ; i
1C92                          DS   2   ; j
1C94                          DS   2   ; k
1C96                          DS   2   ; l
1C98                          DS   2   ; m
1C9A                          DS   2   ; n
1C9C                          DS   2   ; o
1C9E                          DS   2   ; p
1CA0                          DS   2   ; q
1CA2                          DS   2   ; r
1CA4                          DS   2   ; s
1CA6                          DS   2   ; t
1CA8                          DS   2   ; u
1CAA                          DS   2   ; v
1CAC                          DS   2   ; w
1CAE                          DS   2   ; x
1CB0                          DS   2   ; y
1CB2                          DS   2   ; z
1CB4                             ; ****************************************************************
1CB4                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1CB4                             ; ****************************************************************
1CB4                          ALIGN   $40   
1CC0                DATA:     DS   dataSize   
1D28                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 43 IN SCAN.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 421 IN SCAN.asm
                    > USED AT LINE 741 IN SCAN.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 451 IN SCAN.asm
                    > USED AT LINE 700 IN SCAN.asm
                    > USED AT LINE 1016 IN SCAN.asm
                    > USED AT LINE 1443 IN SCAN.asm
                    > USED AT LINE 1484 IN SCAN.asm
                    > USED AT LINE 1509 IN SCAN.asm
                    > USED AT LINE 1522 IN SCAN.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 15 IN SCAN.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 16 IN SCAN.asm
                    > USED AT LINE 5 IN ram.asm
LSIZE:              0080 DEFINED AT LINE 17 IN SCAN.asm
                    > USED AT LINE 11 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN SCAN.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               0001 DEFINED AT LINE 19 IN SCAN.asm
                    > USED AT LINE 858 IN SCAN.asm
FALSE:              0000 DEFINED AT LINE 20 IN SCAN.asm
                    > USED AT LINE 55 IN SCAN.asm
EMPTY:              0000 DEFINED AT LINE 21 IN SCAN.asm
DATASIZE:           0068 DEFINED AT LINE 23 IN SCAN.asm
                    > USED AT LINE 521 IN SCAN.asm
                    > USED AT LINE 73 IN ram.asm
MACROS:             0180 DEFINED AT LINE 48 IN SCAN.asm
IALTVARS:           0180 DEFINED AT LINE 53 IN SCAN.asm
                    > USED AT LINE 512 IN SCAN.asm
IOPCODES:           0190 DEFINED AT LINE 65 IN SCAN.asm
                    > USED AT LINE 525 IN SCAN.asm
ETX:                02A6 DEFINED AT LINE 376 IN SCAN.asm
                    > USED AT LINE 718 IN SCAN.asm
ETX1:               02AF DEFINED AT LINE 381 IN SCAN.asm
                    > USED AT LINE 379 IN SCAN.asm
START:              02B1 DEFINED AT LINE 384 IN SCAN.asm
                    > USED AT LINE 6
INTERPRET:          02C7 DEFINED AT LINE 390 IN SCAN.asm
                    > USED AT LINE 382 IN SCAN.asm
INTERPRET2:         02D1 DEFINED AT LINE 396 IN SCAN.asm
                    > USED AT LINE 444 IN SCAN.asm
INTERPRET3:         02D9 DEFINED AT LINE 403 IN SCAN.asm
                    > USED AT LINE 412 IN SCAN.asm
INTERPRET4:         02DF DEFINED AT LINE 409 IN SCAN.asm
                    > USED AT LINE 401 IN SCAN.asm
WAITCHAR:           02E4 DEFINED AT LINE 420 IN SCAN.asm
                    > USED AT LINE 453 IN SCAN.asm
                    > USED AT LINE 467 IN SCAN.asm
MACRO:              02F3 DEFINED AT LINE 429 IN SCAN.asm
MACRO1:             030A DEFINED AT LINE 442 IN SCAN.asm
                    > USED AT LINE 437 IN SCAN.asm
WAITCHAR1:          0310 DEFINED AT LINE 446 IN SCAN.asm
                    > USED AT LINE 423 IN SCAN.asm
WAITCHAR3:          031E DEFINED AT LINE 455 IN SCAN.asm
                    > USED AT LINE 427 IN SCAN.asm
WAITCHAR4:          0334 DEFINED AT LINE 471 IN SCAN.asm
                    > USED AT LINE 425 IN SCAN.asm
NEXT:               033C DEFINED AT LINE 498 IN SCAN.asm
                    > USED AT LINE 511 IN SCAN.asm
                    > USED AT LINE 750 IN SCAN.asm
INIT:               0345 DEFINED AT LINE 507 IN SCAN.asm
                    > USED AT LINE 386 IN SCAN.asm
INITOPS:            036B DEFINED AT LINE 524 IN SCAN.asm
INITOPS1:           0374 DEFINED AT LINE 529 IN SCAN.asm
                    > USED AT LINE 539 IN SCAN.asm
                    > USED AT LINE 550 IN SCAN.asm
INITOPS2:           0384 DEFINED AT LINE 541 IN SCAN.asm
                    > USED AT LINE 534 IN SCAN.asm
INITOPS2A:          0389 DEFINED AT LINE 546 IN SCAN.asm
                    > USED AT LINE 549 IN SCAN.asm
ENTER:              038F DEFINED AT LINE 552 IN SCAN.asm
                    > USED AT LINE 440 IN SCAN.asm
PRINTSTR:           0398 DEFINED AT LINE 559 IN SCAN.asm
                    > USED AT LINE 387 IN SCAN.asm
                    > USED AT LINE 1517 IN SCAN.asm
                    > USED AT LINE 1546 IN SCAN.asm
LOOKUPREF:          039F DEFINED AT LINE 566 IN SCAN.asm
LOOKUPREF0:         03A1 DEFINED AT LINE 568 IN SCAN.asm
LOOKUPREF1:         03A5 DEFINED AT LINE 571 IN SCAN.asm
                    > USED AT LINE 688 IN SCAN.asm
LOOKUPREF2:         03AB DEFINED AT LINE 575 IN SCAN.asm
                    > USED AT LINE 570 IN SCAN.asm
                    > USED AT LINE 863 IN SCAN.asm
LOOKUPREF3:         03AF DEFINED AT LINE 578 IN SCAN.asm
                    > USED AT LINE 574 IN SCAN.asm
NESTING:            03BD DEFINED AT LINE 601 IN SCAN.asm
                    > USED AT LINE 407 IN SCAN.asm
                    > USED AT LINE 452 IN SCAN.asm
NESTING1A:          03C8 DEFINED AT LINE 608 IN SCAN.asm
                    > USED AT LINE 605 IN SCAN.asm
NESTING1:           03CB DEFINED AT LINE 611 IN SCAN.asm
                    > USED AT LINE 603 IN SCAN.asm
NESTING2:           03DA DEFINED AT LINE 620 IN SCAN.asm
                    > USED AT LINE 615 IN SCAN.asm
                    > USED AT LINE 617 IN SCAN.asm
NESTING3:           03DC DEFINED AT LINE 623 IN SCAN.asm
                    > USED AT LINE 619 IN SCAN.asm
NESTING4:           03E7 DEFINED AT LINE 630 IN SCAN.asm
                    > USED AT LINE 625 IN SCAN.asm
                    > USED AT LINE 627 IN SCAN.asm
PAGE4:              0400 DEFINED AT LINE 638 IN SCAN.asm
AND_:               0400 DEFINED AT LINE 640 IN SCAN.asm
                    > USED AT LINE 1100 IN SCAN.asm
AND1:               0407 DEFINED AT LINE 648 IN SCAN.asm
                    > USED AT LINE 662 IN SCAN.asm
                    > USED AT LINE 673 IN SCAN.asm
OR_:                040B DEFINED AT LINE 654 IN SCAN.asm
                    > USED AT LINE 1209 IN SCAN.asm
XOR_:               0414 DEFINED AT LINE 664 IN SCAN.asm
                    > USED AT LINE 1264 IN SCAN.asm
XOR1:               0415 DEFINED AT LINE 666 IN SCAN.asm
                    > USED AT LINE 677 IN SCAN.asm
INV_:               041D DEFINED AT LINE 675 IN SCAN.asm
                    > USED AT LINE 1162 IN SCAN.asm
ADD_:               0422 DEFINED AT LINE 679 IN SCAN.asm
                    > USED AT LINE 1098 IN SCAN.asm
CALL_:              0428 DEFINED AT LINE 686 IN SCAN.asm
DOT_:               0432 DEFINED AT LINE 695 IN SCAN.asm
DOT2:               0436 DEFINED AT LINE 698 IN SCAN.asm
                    > USED AT LINE 706 IN SCAN.asm
HDOT_:              043D DEFINED AT LINE 703 IN SCAN.asm
DROP_:              0443 DEFINED AT LINE 708 IN SCAN.asm
                    > USED AT LINE 1122 IN SCAN.asm
DUP_:               0446 DEFINED AT LINE 712 IN SCAN.asm
                    > USED AT LINE 1124 IN SCAN.asm
ETX_:               044B DEFINED AT LINE 717 IN SCAN.asm
EXIT_:              044E DEFINED AT LINE 720 IN SCAN.asm
FETCH_:             0458 DEFINED AT LINE 728 IN SCAN.asm
FETCH1:             0459 DEFINED AT LINE 730 IN SCAN.asm
HEXNUM_:            045F DEFINED AT LINE 737 IN SCAN.asm
KEY_:               0462 DEFINED AT LINE 740 IN SCAN.asm
                    > USED AT LINE 1171 IN SCAN.asm
MUL_:               046B DEFINED AT LINE 747 IN SCAN.asm
                    > USED AT LINE 1191 IN SCAN.asm
NOP_:               046E DEFINED AT LINE 749 IN SCAN.asm
OVER_:              0471 DEFINED AT LINE 753 IN SCAN.asm
                    > USED AT LINE 1207 IN SCAN.asm
RET_:               0478 DEFINED AT LINE 761 IN SCAN.asm
ROT_:               047F DEFINED AT LINE 766 IN SCAN.asm
                    > USED AT LINE 1224 IN SCAN.asm
SHL_:               0486 DEFINED AT LINE 775 IN SCAN.asm
SHR_:               048B DEFINED AT LINE 782 IN SCAN.asm
SHR1:               048C DEFINED AT LINE 784 IN SCAN.asm
STORE_:             0493 DEFINED AT LINE 790 IN SCAN.asm
SWAP_:              049A DEFINED AT LINE 798 IN SCAN.asm
                    > USED AT LINE 1240 IN SCAN.asm
NEG_:               049F DEFINED AT LINE 804 IN SCAN.asm
                    > USED AT LINE 1199 IN SCAN.asm
SUB_:               04A5 DEFINED AT LINE 809 IN SCAN.asm
                    > USED AT LINE 1238 IN SCAN.asm
SUB2:               04A7 DEFINED AT LINE 812 IN SCAN.asm
                    > USED AT LINE 807 IN SCAN.asm
EQ_:                04AD DEFINED AT LINE 818 IN SCAN.asm
                    > USED AT LINE 1132 IN SCAN.asm
FALSE_:             04B4 DEFINED AT LINE 824 IN SCAN.asm
                    > USED AT LINE 840 IN SCAN.asm
                    > USED AT LINE 841 IN SCAN.asm
                    > USED AT LINE 857 IN SCAN.asm
GT_:                04BA DEFINED AT LINE 829 IN SCAN.asm
                    > USED AT LINE 1152 IN SCAN.asm
LT_:                04BE DEFINED AT LINE 834 IN SCAN.asm
                    > USED AT LINE 1181 IN SCAN.asm
LT1:                04C0 DEFINED AT LINE 837 IN SCAN.asm
                    > USED AT LINE 832 IN SCAN.asm
TRUE_:              04C8 DEFINED AT LINE 842 IN SCAN.asm
                    > USED AT LINE 823 IN SCAN.asm
GTE_:               04CE DEFINED AT LINE 847 IN SCAN.asm
LTE_:               04D2 DEFINED AT LINE 851 IN SCAN.asm
LTE1:               04D4 DEFINED AT LINE 854 IN SCAN.asm
                    > USED AT LINE 850 IN SCAN.asm
VAR_:               04DD DEFINED AT LINE 861 IN SCAN.asm
                    > USED AT LINE 1102 IN SCAN.asm
                    > USED AT LINE 1112 IN SCAN.asm
                    > USED AT LINE 1126 IN SCAN.asm
                    > USED AT LINE 1134 IN SCAN.asm
                    > USED AT LINE 1142 IN SCAN.asm
                    > USED AT LINE 1154 IN SCAN.asm
                    > USED AT LINE 1164 IN SCAN.asm
                    > USED AT LINE 1173 IN SCAN.asm
                    > USED AT LINE 1183 IN SCAN.asm
                    > USED AT LINE 1193 IN SCAN.asm
                    > USED AT LINE 1201 IN SCAN.asm
                    > USED AT LINE 1211 IN SCAN.asm
                    > USED AT LINE 1219 IN SCAN.asm
                    > USED AT LINE 1226 IN SCAN.asm
                    > USED AT LINE 1242 IN SCAN.asm
                    > USED AT LINE 1250 IN SCAN.asm
                    > USED AT LINE 1258 IN SCAN.asm
                    > USED AT LINE 1266 IN SCAN.asm
NUM_:               04E4 DEFINED AT LINE 867 IN SCAN.asm
LAMBDA_:            04E7 DEFINED AT LINE 868 IN SCAN.asm
A_:                 04E9 DEFINED AT LINE 871 IN SCAN.asm
C_:                 04EC DEFINED AT LINE 873 IN SCAN.asm
D_:                 04EF DEFINED AT LINE 875 IN SCAN.asm
E_:                 04F2 DEFINED AT LINE 877 IN SCAN.asm
F_:                 04F5 DEFINED AT LINE 879 IN SCAN.asm
G_:                 04F8 DEFINED AT LINE 881 IN SCAN.asm
I_:                 04FB DEFINED AT LINE 883 IN SCAN.asm
K_:                 04FE DEFINED AT LINE 885 IN SCAN.asm
L_:                 0501 DEFINED AT LINE 887 IN SCAN.asm
M_:                 0504 DEFINED AT LINE 889 IN SCAN.asm
N_:                 0507 DEFINED AT LINE 891 IN SCAN.asm
O_:                 050A DEFINED AT LINE 893 IN SCAN.asm
P_:                 050D DEFINED AT LINE 895 IN SCAN.asm
R_:                 0510 DEFINED AT LINE 897 IN SCAN.asm
S_:                 0513 DEFINED AT LINE 899 IN SCAN.asm
U_:                 0516 DEFINED AT LINE 901 IN SCAN.asm
W_:                 0519 DEFINED AT LINE 903 IN SCAN.asm
X_:                 051C DEFINED AT LINE 905 IN SCAN.asm
DIV_:               051F DEFINED AT LINE 908 IN SCAN.asm
                    > USED AT LINE 1120 IN SCAN.asm
LAMBDA:             0524 DEFINED AT LINE 919 IN SCAN.asm
                    > USED AT LINE 869 IN SCAN.asm
LAMBDA1:            052A DEFINED AT LINE 923 IN SCAN.asm
                    > USED AT LINE 929 IN SCAN.asm
LAMBDA2:            0532 DEFINED AT LINE 930 IN SCAN.asm
DIV:                0539 DEFINED AT LINE 948 IN SCAN.asm
                    > USED AT LINE 908 IN SCAN.asm
DIV1:               0543 DEFINED AT LINE 958 IN SCAN.asm
                    > USED AT LINE 971 IN SCAN.asm
DIV2:               0550 DEFINED AT LINE 967 IN SCAN.asm
                    > USED AT LINE 964 IN SCAN.asm
DIV3:               0551 DEFINED AT LINE 969 IN SCAN.asm
                    > USED AT LINE 966 IN SCAN.asm
DIV4:               0556 DEFINED AT LINE 974 IN SCAN.asm
PAGE6:              0600 DEFINED AT LINE 987 IN SCAN.asm
                    > USED AT LINE 60 IN SCAN.asm
ANOP_:              0600 DEFINED AT LINE 989 IN SCAN.asm
CFETCH_:            0602 DEFINED AT LINE 992 IN SCAN.asm
COMMENT_:           0609 DEFINED AT LINE 999 IN SCAN.asm
                    > USED AT LINE 1003 IN SCAN.asm
CSTORE_:            0612 DEFINED AT LINE 1007 IN SCAN.asm
EMIT_:              0617 DEFINED AT LINE 1013 IN SCAN.asm
EXEC_:              061E DEFINED AT LINE 1019 IN SCAN.asm
EXEC1:              0623 DEFINED AT LINE 1022 IN SCAN.asm
                    > USED AT LINE 1020 IN SCAN.asm
PROMPT_:            0626 DEFINED AT LINE 1027 IN SCAN.asm
GO_:                062B DEFINED AT LINE 1032 IN SCAN.asm
                    > USED AT LINE 1150 IN SCAN.asm
GO1:                062C DEFINED AT LINE 1034 IN SCAN.asm
                    > USED AT LINE 692 IN SCAN.asm
GO2:                063B DEFINED AT LINE 1044 IN SCAN.asm
                    > USED AT LINE 1042 IN SCAN.asm
GO3:                063E DEFINED AT LINE 1047 IN SCAN.asm
                    > USED AT LINE 1037 IN SCAN.asm
INPORT_:            0640 DEFINED AT LINE 1050 IN SCAN.asm
NEWLN_:             064B DEFINED AT LINE 1060 IN SCAN.asm
OUTPORT_:           0650 DEFINED AT LINE 1064 IN SCAN.asm
PRTSTR_:            0659 DEFINED AT LINE 1073 IN SCAN.asm
PRTSTR:             0659 DEFINED AT LINE 1074 IN SCAN.asm
RPUSH_:             065F DEFINED AT LINE 1080 IN SCAN.asm
RPOP_:              0665 DEFINED AT LINE 1085 IN SCAN.asm
A:                  066B DEFINED AT LINE 1094 IN SCAN.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
                    > USED AT LINE 404 IN SCAN.asm
                    > USED AT LINE 410 IN SCAN.asm
                    > USED AT LINE 432 IN SCAN.asm
                    > USED AT LINE 433 IN SCAN.asm
                    > USED AT LINE 435 IN SCAN.asm
                    > USED AT LINE 436 IN SCAN.asm
                    > USED AT LINE 449 IN SCAN.asm
                    > USED AT LINE 465 IN SCAN.asm
                    > USED AT LINE 466 IN SCAN.asm
                    > USED AT LINE 500 IN SCAN.asm
                    > USED AT LINE 501 IN SCAN.asm
                    > USED AT LINE 530 IN SCAN.asm
                    > USED AT LINE 532 IN SCAN.asm
                    > USED AT LINE 535 IN SCAN.asm
                    > USED AT LINE 536 IN SCAN.asm
                    > USED AT LINE 542 IN SCAN.asm
                    > USED AT LINE 543 IN SCAN.asm
                    > USED AT LINE 544 IN SCAN.asm
                    > USED AT LINE 547 IN SCAN.asm
                    > USED AT LINE 579 IN SCAN.asm
                    > USED AT LINE 579 IN SCAN.asm
                    > USED AT LINE 580 IN SCAN.asm
                    > USED AT LINE 582 IN SCAN.asm
                    > USED AT LINE 583 IN SCAN.asm
                    > USED AT LINE 584 IN SCAN.asm
                    > USED AT LINE 585 IN SCAN.asm
                    > USED AT LINE 586 IN SCAN.asm
                    > USED AT LINE 587 IN SCAN.asm
                    > USED AT LINE 643 IN SCAN.asm
                    > USED AT LINE 645 IN SCAN.asm
                    > USED AT LINE 646 IN SCAN.asm
                    > USED AT LINE 649 IN SCAN.asm
                    > USED AT LINE 657 IN SCAN.asm
                    > USED AT LINE 659 IN SCAN.asm
                    > USED AT LINE 660 IN SCAN.asm
                    > USED AT LINE 668 IN SCAN.asm
                    > USED AT LINE 670 IN SCAN.asm
                    > USED AT LINE 671 IN SCAN.asm
                    > USED AT LINE 687 IN SCAN.asm
                    > USED AT LINE 699 IN SCAN.asm
                    > USED AT LINE 743 IN SCAN.asm
                    > USED AT LINE 813 IN SCAN.asm
                    > USED AT LINE 821 IN SCAN.asm
                    > USED AT LINE 838 IN SCAN.asm
                    > USED AT LINE 855 IN SCAN.asm
                    > USED AT LINE 862 IN SCAN.asm
                    > USED AT LINE 872 IN SCAN.asm
                    > USED AT LINE 924 IN SCAN.asm
                    > USED AT LINE 926 IN SCAN.asm
                    > USED AT LINE 956 IN SCAN.asm
                    > USED AT LINE 970 IN SCAN.asm
                    > USED AT LINE 1001 IN SCAN.asm
                    > USED AT LINE 1015 IN SCAN.asm
                    > USED AT LINE 1035 IN SCAN.asm
                    > USED AT LINE 1040 IN SCAN.asm
                    > USED AT LINE 1052 IN SCAN.asm
                    > USED AT LINE 1056 IN SCAN.asm
                    > USED AT LINE 1096 IN SCAN.asm
                    > USED AT LINE 1106 IN SCAN.asm
                    > USED AT LINE 1116 IN SCAN.asm
                    > USED AT LINE 1130 IN SCAN.asm
                    > USED AT LINE 1138 IN SCAN.asm
                    > USED AT LINE 1146 IN SCAN.asm
                    > USED AT LINE 1158 IN SCAN.asm
                    > USED AT LINE 1169 IN SCAN.asm
                    > USED AT LINE 1177 IN SCAN.asm
                    > USED AT LINE 1187 IN SCAN.asm
                    > USED AT LINE 1197 IN SCAN.asm
                    > USED AT LINE 1205 IN SCAN.asm
                    > USED AT LINE 1215 IN SCAN.asm
                    > USED AT LINE 1222 IN SCAN.asm
                    > USED AT LINE 1230 IN SCAN.asm
                    > USED AT LINE 1246 IN SCAN.asm
                    > USED AT LINE 1254 IN SCAN.asm
                    > USED AT LINE 1262 IN SCAN.asm
                    > USED AT LINE 1299 IN SCAN.asm
                    > USED AT LINE 1308 IN SCAN.asm
                    > USED AT LINE 1328 IN SCAN.asm
                    > USED AT LINE 1333 IN SCAN.asm
                    > USED AT LINE 1336 IN SCAN.asm
                    > USED AT LINE 1338 IN SCAN.asm
                    > USED AT LINE 1341 IN SCAN.asm
                    > USED AT LINE 1342 IN SCAN.asm
                    > USED AT LINE 1343 IN SCAN.asm
                    > USED AT LINE 1344 IN SCAN.asm
                    > USED AT LINE 1345 IN SCAN.asm
                    > USED AT LINE 1348 IN SCAN.asm
                    > USED AT LINE 1367 IN SCAN.asm
                    > USED AT LINE 1378 IN SCAN.asm
                    > USED AT LINE 1385 IN SCAN.asm
                    > USED AT LINE 1395 IN SCAN.asm
                    > USED AT LINE 1396 IN SCAN.asm
                    > USED AT LINE 1406 IN SCAN.asm
                    > USED AT LINE 1418 IN SCAN.asm
                    > USED AT LINE 1419 IN SCAN.asm
                    > USED AT LINE 1431 IN SCAN.asm
                    > USED AT LINE 1432 IN SCAN.asm
                    > USED AT LINE 1442 IN SCAN.asm
                    > USED AT LINE 1444 IN SCAN.asm
                    > USED AT LINE 1446 IN SCAN.asm
                    > USED AT LINE 1447 IN SCAN.asm
                    > USED AT LINE 1447 IN SCAN.asm
                    > USED AT LINE 1449 IN SCAN.asm
                    > USED AT LINE 1473 IN SCAN.asm
                    > USED AT LINE 1476 IN SCAN.asm
                    > USED AT LINE 1483 IN SCAN.asm
                    > USED AT LINE 1489 IN SCAN.asm
                    > USED AT LINE 1491 IN SCAN.asm
                    > USED AT LINE 1496 IN SCAN.asm
                    > USED AT LINE 1502 IN SCAN.asm
                    > USED AT LINE 1505 IN SCAN.asm
                    > USED AT LINE 1507 IN SCAN.asm
                    > USED AT LINE 1525 IN SCAN.asm
                    > USED AT LINE 1526 IN SCAN.asm
C:                  067B DEFINED AT LINE 1104 IN SCAN.asm
                    > USED AT LINE 410 IN SCAN.asm
                    > USED AT LINE 534 IN SCAN.asm
                    > USED AT LINE 536 IN SCAN.asm
                    > USED AT LINE 874 IN SCAN.asm
                    > USED AT LINE 953 IN SCAN.asm
                    > USED AT LINE 959 IN SCAN.asm
                    > USED AT LINE 964 IN SCAN.asm
                    > USED AT LINE 965 IN SCAN.asm
                    > USED AT LINE 973 IN SCAN.asm
                    > USED AT LINE 1052 IN SCAN.asm
                    > USED AT LINE 1053 IN SCAN.asm
                    > USED AT LINE 1054 IN SCAN.asm
                    > USED AT LINE 1056 IN SCAN.asm
                    > USED AT LINE 1066 IN SCAN.asm
                    > USED AT LINE 1067 IN SCAN.asm
                    > USED AT LINE 1069 IN SCAN.asm
                    > USED AT LINE 1070 IN SCAN.asm
                    > USED AT LINE 1296 IN SCAN.asm
                    > USED AT LINE 1350 IN SCAN.asm
                    > USED AT LINE 1387 IN SCAN.asm
                    > USED AT LINE 1424 IN SCAN.asm
                    > USED AT LINE 1452 IN SCAN.asm
                    > USED AT LINE 1461 IN SCAN.asm
                    > USED AT LINE 1471 IN SCAN.asm
                    > USED AT LINE 1477 IN SCAN.asm
                    > USED AT LINE 1481 IN SCAN.asm
                    > USED AT LINE 1496 IN SCAN.asm
                    > USED AT LINE 1502 IN SCAN.asm
D:                  068B DEFINED AT LINE 1114 IN SCAN.asm
                    > USED AT LINE 438 IN SCAN.asm
                    > USED AT LINE 567 IN SCAN.asm
                    > USED AT LINE 646 IN SCAN.asm
                    > USED AT LINE 660 IN SCAN.asm
                    > USED AT LINE 671 IN SCAN.asm
                    > USED AT LINE 691 IN SCAN.asm
                    > USED AT LINE 733 IN SCAN.asm
                    > USED AT LINE 795 IN SCAN.asm
                    > USED AT LINE 876 IN SCAN.asm
                    > USED AT LINE 972 IN SCAN.asm
                    > USED AT LINE 994 IN SCAN.asm
                    > USED AT LINE 1035 IN SCAN.asm
                    > USED AT LINE 1303 IN SCAN.asm
                    > USED AT LINE 1336 IN SCAN.asm
                    > USED AT LINE 1338 IN SCAN.asm
                    > USED AT LINE 1356 IN SCAN.asm
                    > USED AT LINE 1389 IN SCAN.asm
E:                  06A5 DEFINED AT LINE 1128 IN SCAN.asm
                    > USED AT LINE 397 IN SCAN.asm
                    > USED AT LINE 434 IN SCAN.asm
                    > USED AT LINE 435 IN SCAN.asm
                    > USED AT LINE 465 IN SCAN.asm
                    > USED AT LINE 573 IN SCAN.asm
                    > USED AT LINE 577 IN SCAN.asm
                    > USED AT LINE 580 IN SCAN.asm
                    > USED AT LINE 588 IN SCAN.asm
                    > USED AT LINE 604 IN SCAN.asm
                    > USED AT LINE 606 IN SCAN.asm
                    > USED AT LINE 609 IN SCAN.asm
                    > USED AT LINE 612 IN SCAN.asm
                    > USED AT LINE 621 IN SCAN.asm
                    > USED AT LINE 631 IN SCAN.asm
                    > USED AT LINE 643 IN SCAN.asm
                    > USED AT LINE 657 IN SCAN.asm
                    > USED AT LINE 668 IN SCAN.asm
                    > USED AT LINE 689 IN SCAN.asm
                    > USED AT LINE 731 IN SCAN.asm
                    > USED AT LINE 793 IN SCAN.asm
                    > USED AT LINE 878 IN SCAN.asm
                    > USED AT LINE 973 IN SCAN.asm
                    > USED AT LINE 995 IN SCAN.asm
                    > USED AT LINE 1010 IN SCAN.asm
                    > USED AT LINE 1036 IN SCAN.asm
                    > USED AT LINE 1066 IN SCAN.asm
                    > USED AT LINE 1070 IN SCAN.asm
                    > USED AT LINE 1302 IN SCAN.asm
                    > USED AT LINE 1355 IN SCAN.asm
                    > USED AT LINE 1390 IN SCAN.asm
                    > USED AT LINE 1459 IN SCAN.asm
                    > USED AT LINE 1462 IN SCAN.asm
F:                  06B0 DEFINED AT LINE 1136 IN SCAN.asm
                    > USED AT LINE 880 IN SCAN.asm
G:                  06BB DEFINED AT LINE 1144 IN SCAN.asm
                    > USED AT LINE 882 IN SCAN.asm
I:                  06D0 DEFINED AT LINE 1156 IN SCAN.asm
                    > USED AT LINE 884 IN SCAN.asm
K:                  06E0 DEFINED AT LINE 1166 IN SCAN.asm
                    > USED AT LINE 886 IN SCAN.asm
L:                  06EE DEFINED AT LINE 1175 IN SCAN.asm
                    > USED AT LINE 432 IN SCAN.asm
                    > USED AT LINE 433 IN SCAN.asm
                    > USED AT LINE 501 IN SCAN.asm
                    > USED AT LINE 503 IN SCAN.asm
                    > USED AT LINE 582 IN SCAN.asm
                    > USED AT LINE 583 IN SCAN.asm
                    > USED AT LINE 644 IN SCAN.asm
                    > USED AT LINE 645 IN SCAN.asm
                    > USED AT LINE 658 IN SCAN.asm
                    > USED AT LINE 659 IN SCAN.asm
                    > USED AT LINE 669 IN SCAN.asm
                    > USED AT LINE 670 IN SCAN.asm
                    > USED AT LINE 743 IN SCAN.asm
                    > USED AT LINE 786 IN SCAN.asm
                    > USED AT LINE 888 IN SCAN.asm
                    > USED AT LINE 953 IN SCAN.asm
                    > USED AT LINE 1015 IN SCAN.asm
                    > USED AT LINE 1053 IN SCAN.asm
                    > USED AT LINE 1054 IN SCAN.asm
                    > USED AT LINE 1067 IN SCAN.asm
                    > USED AT LINE 1069 IN SCAN.asm
                    > USED AT LINE 1296 IN SCAN.asm
                    > USED AT LINE 1341 IN SCAN.asm
                    > USED AT LINE 1342 IN SCAN.asm
                    > USED AT LINE 1355 IN SCAN.asm
                    > USED AT LINE 1390 IN SCAN.asm
                    > USED AT LINE 1395 IN SCAN.asm
                    > USED AT LINE 1396 IN SCAN.asm
                    > USED AT LINE 1431 IN SCAN.asm
                    > USED AT LINE 1432 IN SCAN.asm
                    > USED AT LINE 1445 IN SCAN.asm
                    > USED AT LINE 1446 IN SCAN.asm
                    > USED AT LINE 1491 IN SCAN.asm
                    > USED AT LINE 1534 IN SCAN.asm
                    > USED AT LINE 1538 IN SCAN.asm
M:                  06FE DEFINED AT LINE 1185 IN SCAN.asm
                    > USED AT LINE 841 IN SCAN.asm
                    > USED AT LINE 857 IN SCAN.asm
                    > USED AT LINE 890 IN SCAN.asm
N:                  070E DEFINED AT LINE 1195 IN SCAN.asm
                    > USED AT LINE 892 IN SCAN.asm
O:                  0719 DEFINED AT LINE 1203 IN SCAN.asm
                    > USED AT LINE 894 IN SCAN.asm
P:                  0729 DEFINED AT LINE 1213 IN SCAN.asm
                    > USED AT LINE 896 IN SCAN.asm
R:                  0734 DEFINED AT LINE 1220 IN SCAN.asm
                    > USED AT LINE 898 IN SCAN.asm
S:                  073F DEFINED AT LINE 1228 IN SCAN.asm
                    > USED AT LINE 900 IN SCAN.asm
U:                  075E DEFINED AT LINE 1244 IN SCAN.asm
                    > USED AT LINE 902 IN SCAN.asm
W:                  0769 DEFINED AT LINE 1252 IN SCAN.asm
                    > USED AT LINE 904 IN SCAN.asm
X:                  0774 DEFINED AT LINE 1260 IN SCAN.asm
                    > USED AT LINE 906 IN SCAN.asm
                    > USED AT LINE 1167 IN SCAN.asm
CASE_:              077F DEFINED AT LINE 1268 IN SCAN.asm
                    > USED AT LINE 1108 IN SCAN.asm
CLOSURE_:           077F DEFINED AT LINE 1269 IN SCAN.asm
                    > USED AT LINE 1110 IN SCAN.asm
DEF_:               077F DEFINED AT LINE 1270 IN SCAN.asm
                    > USED AT LINE 1118 IN SCAN.asm
FILTER_:            077F DEFINED AT LINE 1271 IN SCAN.asm
                    > USED AT LINE 1140 IN SCAN.asm
GET_:               077F DEFINED AT LINE 1272 IN SCAN.asm
                    > USED AT LINE 1148 IN SCAN.asm
IF_:                077F DEFINED AT LINE 1273 IN SCAN.asm
                    > USED AT LINE 1160 IN SCAN.asm
LET_:               077F DEFINED AT LINE 1274 IN SCAN.asm
                    > USED AT LINE 1179 IN SCAN.asm
MAP_:               077F DEFINED AT LINE 1275 IN SCAN.asm
                    > USED AT LINE 1189 IN SCAN.asm
PRINT_:             077F DEFINED AT LINE 1276 IN SCAN.asm
                    > USED AT LINE 1217 IN SCAN.asm
SCAN_:              077F DEFINED AT LINE 1277 IN SCAN.asm
                    > USED AT LINE 1232 IN SCAN.asm
SET_:               077F DEFINED AT LINE 1278 IN SCAN.asm
                    > USED AT LINE 1234 IN SCAN.asm
SHIFT_:             077F DEFINED AT LINE 1279 IN SCAN.asm
                    > USED AT LINE 1236 IN SCAN.asm
UNDROP_:            077F DEFINED AT LINE 1280 IN SCAN.asm
                    > USED AT LINE 1248 IN SCAN.asm
WHILE_:             077F DEFINED AT LINE 1281 IN SCAN.asm
                    > USED AT LINE 1256 IN SCAN.asm
MUL:                0781 DEFINED AT LINE 1291 IN SCAN.asm
                    > USED AT LINE 747 IN SCAN.asm
MUL2:               078B DEFINED AT LINE 1300 IN SCAN.asm
                    > USED AT LINE 1309 IN SCAN.asm
XXNUM:              079D DEFINED AT LINE 1326 IN SCAN.asm
NUM0:               07AA DEFINED AT LINE 1335 IN SCAN.asm
                    > USED AT LINE 1330 IN SCAN.asm
NUM1:               07AD DEFINED AT LINE 1339 IN SCAN.asm
                    > USED AT LINE 1334 IN SCAN.asm
                    > USED AT LINE 1360 IN SCAN.asm
NUM2:               07C7 DEFINED AT LINE 1361 IN SCAN.asm
                    > USED AT LINE 1350 IN SCAN.asm
                    > USED AT LINE 1352 IN SCAN.asm
                    > USED AT LINE 1424 IN SCAN.asm
                    > USED AT LINE 1426 IN SCAN.asm
NUM3:               07D2 DEFINED AT LINE 1369 IN SCAN.asm
                    > USED AT LINE 1364 IN SCAN.asm
NUM:                07D5 DEFINED AT LINE 1376 IN SCAN.asm
                    > USED AT LINE 867 IN SCAN.asm
XNUM0:              07DE DEFINED AT LINE 1382 IN SCAN.asm
                    > USED AT LINE 1380 IN SCAN.asm
XNUM1:              07DF DEFINED AT LINE 1384 IN SCAN.asm
                    > USED AT LINE 1397 IN SCAN.asm
                    > USED AT LINE 1399 IN SCAN.asm
XNUM4:              07F2 DEFINED AT LINE 1400 IN SCAN.asm
                    > USED AT LINE 1387 IN SCAN.asm
XNUM5:              07FD DEFINED AT LINE 1408 IN SCAN.asm
                    > USED AT LINE 1403 IN SCAN.asm
HEXNUM:             0800 DEFINED AT LINE 1414 IN SCAN.asm
                    > USED AT LINE 738 IN SCAN.asm
HEXNUM1:            0803 DEFINED AT LINE 1416 IN SCAN.asm
                    > USED AT LINE 1433 IN SCAN.asm
HEXNUM2:            080B DEFINED AT LINE 1422 IN SCAN.asm
                    > USED AT LINE 1420 IN SCAN.asm
PRTDEC:             081D DEFINED AT LINE 1435 IN SCAN.asm
                    > USED AT LINE 697 IN SCAN.asm
PRTDEC0:            082C DEFINED AT LINE 1450 IN SCAN.asm
                    > USED AT LINE 1441 IN SCAN.asm
PRTDEC1:            084E DEFINED AT LINE 1466 IN SCAN.asm
                    > USED AT LINE 1454 IN SCAN.asm
                    > USED AT LINE 1456 IN SCAN.asm
                    > USED AT LINE 1458 IN SCAN.asm
                    > USED AT LINE 1460 IN SCAN.asm
                    > USED AT LINE 1463 IN SCAN.asm
PRTDEC2:            0850 DEFINED AT LINE 1468 IN SCAN.asm
                    > USED AT LINE 1471 IN SCAN.asm
PRTDEC3:            0860 DEFINED AT LINE 1480 IN SCAN.asm
                    > USED AT LINE 1475 IN SCAN.asm
PRTDEC4:            0861 DEFINED AT LINE 1482 IN SCAN.asm
                    > USED AT LINE 1479 IN SCAN.asm
PRTHEX:             0865 DEFINED AT LINE 1486 IN SCAN.asm
                    > USED AT LINE 705 IN SCAN.asm
PRTHEX2:            0870 DEFINED AT LINE 1495 IN SCAN.asm
                    > USED AT LINE 1490 IN SCAN.asm
                    > USED AT LINE 1492 IN SCAN.asm
PRTHEX3:            0879 DEFINED AT LINE 1503 IN SCAN.asm
                    > USED AT LINE 1501 IN SCAN.asm
PROMPT:             0884 DEFINED AT LINE 1516 IN SCAN.asm
                    > USED AT LINE 391 IN SCAN.asm
                    > USED AT LINE 1028 IN SCAN.asm
PUTSTR0:            088D DEFINED AT LINE 1521 IN SCAN.asm
                    > USED AT LINE 1527 IN SCAN.asm
PUTSTR:             0891 DEFINED AT LINE 1524 IN SCAN.asm
                    > USED AT LINE 561 IN SCAN.asm
                    > USED AT LINE 1076 IN SCAN.asm
RPUSH:              0896 DEFINED AT LINE 1530 IN SCAN.asm
                    > USED AT LINE 554 IN SCAN.asm
                    > USED AT LINE 1043 IN SCAN.asm
                    > USED AT LINE 1082 IN SCAN.asm
RPOP:               08A1 DEFINED AT LINE 1537 IN SCAN.asm
                    > USED AT LINE 723 IN SCAN.asm
                    > USED AT LINE 762 IN SCAN.asm
                    > USED AT LINE 1086 IN SCAN.asm
RPOP2:              08AB DEFINED AT LINE 1542 IN SCAN.asm
CRLF:               08AC DEFINED AT LINE 1545 IN SCAN.asm
                    > USED AT LINE 464 IN SCAN.asm
                    > USED AT LINE 1061 IN SCAN.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 400 IN SCAN.asm
                    > USED AT LINE 447 IN SCAN.asm
                    > USED AT LINE 456 IN SCAN.asm
                    > USED AT LINE 473 IN SCAN.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 510 IN SCAN.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 54 IN SCAN.asm
                    > USED AT LINE 377 IN SCAN.asm
                    > USED AT LINE 380 IN SCAN.asm
                    > USED AT LINE 385 IN SCAN.asm
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
LSTACK:             1A80 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 508 IN SCAN.asm
OPCODES:            1B00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 526 IN SCAN.asm
CTRLCODES:          1B80 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 431 IN SCAN.asm
ALTCODES:           1B80 DEFINED AT LINE 17 IN ram.asm
MINTVARS:           1C00 DEFINED AT LINE 21 IN ram.asm
VLOOPSP:            1C30 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 509 IN SCAN.asm
VBYTEMODE:          1C32 DEFINED AT LINE 24 IN ram.asm
TBPTR:              1C34 DEFINED AT LINE 25 IN ram.asm
RST08:              1C36 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1C38 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1C3A DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1C3C DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1C3E DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1C40 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1C42 DEFINED AT LINE 33 IN ram.asm
INTVEC:             1C44 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1C46 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1C48 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1C4A DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            1C80 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 513 IN SCAN.asm
VS0:                1C80 DEFINED AT LINE 42 IN ram.asm
VTIBPTR:            1C84 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 394 IN SCAN.asm
                    > USED AT LINE 430 IN SCAN.asm
                    > USED AT LINE 443 IN SCAN.asm
                    > USED AT LINE 472 IN SCAN.asm
VLASTDEF:           1C88 DEFINED AT LINE 46 IN ram.asm
VHEAPPTR:           1C8E DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 921 IN SCAN.asm
                    > USED AT LINE 932 IN SCAN.asm
DATA:               1CC0 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 517 IN SCAN.asm
                    > USED AT LINE 581 IN SCAN.asm
HEAP:               1D28 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 61 IN SCAN.asm
